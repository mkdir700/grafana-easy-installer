{"version":3,"file":"AlertingRedirectToRule.c0a480bf2f1fce0098b8.js","mappings":"yTAeA,MAAMA,EAAwC,CAC5C,KAAM,OACN,GAAI,iBACN,EAEO,SAASC,EAAiBC,EAAkC,CACjE,KAAM,CAAE,cAAAC,EAAgB,GAAM,SAAAC,EAAU,MAAAC,EAAO,YAAAC,CAAY,EAAIJ,EACzDK,KAAS,MAAWC,CAAa,EAEvC,OACE,gBAACC,EAAA,EAAI,CAAC,QAAS,CAAE,GAAGT,EAAgB,KAAMK,CAAM,EAAG,YAAAC,EAA0B,MAAM,cACjF,gBAACG,EAAA,EAAK,SAAL,KACC,gBAAC,OAAI,UAAWF,EAAO,SAAUJ,EAAgB,gBAACO,EAAA,CAAyB,GAAGR,CAAA,CAAO,EAAKE,CAAS,CACrG,CACF,CAEJ,CAOO,SAASM,EAAwB,CAAE,SAAAN,EAAU,QAAAO,EAAU,CAAE,EAAqC,CACnG,MAAMJ,KAAS,MAAWK,EAAiBD,CAAO,CAAC,EACnD,OAAO,gBAAC,OAAI,UAAWJ,EAAO,SAAUH,CAAS,CACnD,CAEA,MAAMI,EAAiBK,IACd,CACL,WAAS;AAAA,mBACMA,EAAM,YAAY,OAAO,GAAG;AAAA,KAE7C,GAGID,EAAoBD,GAAqBE,IACtC,CACL,WAAS;AAAA,oBACOA,EAAM,OAAO,WAAW,OAAO;AAAA,0BACzBA,EAAM,OAAO,OAAO,IAAI;AAAA,uBAC3BA,EAAM,MAAM,OAAO,OAAO;AAAA,iBAChCA,EAAM,QAAQF,CAAO,CAAC;AAAA,KAErC,G,8CC3CF,MAAMG,EAAY,YACZC,EAASC,EAAA,EAAO,UAEtB,SAASC,GAAoB,CAO3B,MAAMC,KAAWC,EAAA,GAAY,EAE7B,SAAO,WAAQ,IAAM,CACnB,MAAMC,EAAWF,EAAS,UAAU,QAAQH,EAAQ,EAAE,EAAE,MAAM,GAAG,GAAK,CAAC,EACjEM,KAAO,KAAuB,sBAAmB,KAAuBD,EAAS,CAAC,CAAC,CAAC,CAAC,EACrFE,EAAa,mBAAmBF,EAAS,CAAC,CAAC,EAE3CG,EAAe,IAAI,gBAAgBL,EAAS,MAAM,EAExD,MAAO,CACL,KAAAG,EACA,WAAAC,EACA,UAAWC,EAAa,IAAI,WAAW,GAAK,OAC5C,MAAOA,EAAa,IAAI,OAAO,GAAK,MACtC,CACF,EAAG,CAACL,CAAQ,CAAC,CACf,CAEO,SAASM,GAA2C,CACzD,MAAMjB,KAAS,MAAWkB,CAAS,EAE7B,CAAE,KAAAJ,EAAM,WAAAC,EAAY,UAAAI,EAAW,MAAAC,CAAM,EAAIV,EAAkB,EAC3D,CACJ,MAAAW,EACA,QAAAC,EACA,MAAAC,EAAQ,CAAC,CACX,KAAI,MAA8BT,EAAMC,EAAY,CAAE,UAAAI,EAAW,UAAWC,CAAM,CAAC,EAEnF,GAAI,CAACN,GAAQ,CAACC,EACZ,OAAO,gBAAC,KAAQ,CAAC,GAAG,WAAY,GAGlC,GAAIM,EACF,OACE,gBAAC3B,EAAgB,CAAC,MAAOa,CAAA,EACvB,gBAACiB,EAAA,EAAK,CAAC,MAAO,6BAA6BT,CAAU,OAClD,MAAaM,CAAK,GACjB,gBAAC,WAAQ,UAAWrB,EAAO,cACxBqB,EAAM,QACP,gBAAC,SAAG,CAEN,CAEJ,CACF,EAIJ,GAAIC,EACF,OACE,gBAAC5B,EAAgB,CAAC,MAAOa,CAAA,EACvB,gBAACkB,EAAA,EAAkB,CAAC,KAAK,iBAAkB,EAC7C,EAIJ,MAAMC,KAAc,MAAqBX,CAAU,EAEnD,GAAI,CAACW,EACH,OACE,gBAAChC,EAAgB,CAAC,MAAOa,CAAA,EACvB,gBAACiB,EAAA,EAAK,CAAC,MAAM,uBACX,gBAAC,WAAQ,UAAWxB,EAAO,cAAe,yCAAyCe,CAAU,GAAI,CACnG,CACF,EAIJ,GAAIQ,EAAM,SAAW,EAAG,CACtB,KAAM,CAACI,CAAI,EAAIJ,EACTK,KAAK,MAAeF,EAAaC,EAAM,gBAAgB,EAAE,QAAQnB,EAAQ,EAAE,EACjF,OAAO,gBAAC,KAAQ,CAAC,GAAAoB,CAAA,CAAQ,CAC3B,CAEA,OAAIL,EAAM,SAAW,EAEjB,gBAAC7B,EAAgB,CAAC,MAAOa,CAAA,EACvB,gBAAC,OAAI,cAAY,YAAW,eACd,gBAAC,QAAK,UAAWP,EAAO,OAAQe,CAAW,EAAO,oBAAkB,IAChF,gBAAC,QAAK,UAAWf,EAAO,OAAQc,CAAK,CACvC,CACF,EAKF,gBAACpB,EAAgB,CAAC,MAAOa,CAAA,EACvB,gBAAC,WAAI,oBACc,gBAAC,QAAK,UAAWP,EAAO,OAAQe,CAAW,EAAO,oBAAkB,IACrF,gBAAC,QAAK,UAAWf,EAAO,OAAQc,CAAK,EAAO,4CAC9C,EACA,gBAAC,OAAI,UAAWd,EAAO,OACpBuB,EAAM,IAAI,CAACI,EAAME,IAEd,gBAACC,EAAA,EAAI,CAAC,IAAK,GAAGH,EAAK,IAAI,IAAIE,CAAK,GAAI,QAAM,MAAeH,EAAaC,EAAM,gBAAgB,GAC1F,gBAACG,EAAA,EAAK,QAAL,KAAcH,EAAK,IAAK,EACzB,gBAACG,EAAA,EAAK,KAAL,CAAU,UAAW,IACpB,gBAACC,EAAA,EAAI,CAAC,KAAK,QAAS,GACpB,gBAAC,QAAK,UAAW/B,EAAO,WAAY,GAAG2B,EAAK,UAAU,IAAI,MAAMA,EAAK,MAAM,IAAI,EAAG,CACpF,EACA,gBAACG,EAAA,EAAK,KAAL,KACC,gBAACE,EAAA,EAAW,CAAC,OAAQL,EAAK,OAAQ,CACpC,CACF,CAEH,CACH,CACF,CAEJ,CAEA,SAAST,EAAUZ,EAAsB,CACvC,MAAO,CACL,SAAO;AAAA;AAAA,eAEIA,EAAM,OAAO,KAAK,SAAS;AAAA,MAEtC,SAAO;AAAA,oBACSA,EAAM,QAAQ,CAAC,CAAC;AAAA,MAEhC,aAAW;AAAA,qBACMA,EAAM,QAAQ,CAAC,CAAC;AAAA,MAEjC,gBAAc;AAAA;AAAA,KAGhB,CACF,CAEA,WAAe,MAAkBW,EAAsB,CAAE,MAAO,MAAO,CAAC,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/rule-viewer/RuleViewerLayout.tsx","webpack://grafana/./public/app/features/alerting/unified/RedirectToRuleViewer.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2, NavModelItem } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { PageProps } from 'app/core/components/Page/types';\n\ntype Props = {\n  children: React.ReactNode | React.ReactNode[];\n  title: string;\n  renderTitle?: PageProps['renderTitle'];\n  wrapInContent?: boolean;\n};\n\nconst defaultPageNav: Partial<NavModelItem> = {\n  icon: 'bell',\n  id: 'alert-rule-view',\n};\n\nexport function RuleViewerLayout(props: Props): JSX.Element | null {\n  const { wrapInContent = true, children, title, renderTitle } = props;\n  const styles = useStyles2(getPageStyles);\n\n  return (\n    <Page pageNav={{ ...defaultPageNav, text: title }} renderTitle={renderTitle} navId=\"alert-list\">\n      <Page.Contents>\n        <div className={styles.content}>{wrapInContent ? <RuleViewerLayoutContent {...props} /> : children}</div>\n      </Page.Contents>\n    </Page>\n  );\n}\n\ntype ContentProps = {\n  children: React.ReactNode | React.ReactNode[];\n  padding?: number;\n};\n\nexport function RuleViewerLayoutContent({ children, padding = 2 }: ContentProps): JSX.Element | null {\n  const styles = useStyles2(getContentStyles(padding));\n  return <div className={styles.wrapper}>{children}</div>;\n}\n\nconst getPageStyles = (theme: GrafanaTheme2) => {\n  return {\n    content: css`\n      max-width: ${theme.breakpoints.values.xxl}px;\n    `,\n  };\n};\n\nconst getContentStyles = (padding: number) => (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css`\n      background: ${theme.colors.background.primary};\n      border: 1px solid ${theme.colors.border.weak};\n      border-radius: ${theme.shape.radius.default};\n      padding: ${theme.spacing(padding)};\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useLocation } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, isFetchError } from '@grafana/runtime';\nimport { Alert, Card, Icon, LoadingPlaceholder, useStyles2, withErrorBoundary } from '@grafana/ui';\n\nimport { AlertLabels } from './components/AlertLabels';\nimport { RuleViewerLayout } from './components/rule-viewer/RuleViewerLayout';\nimport { useCloudCombinedRulesMatching } from './hooks/useCombinedRule';\nimport { getRulesSourceByName } from './utils/datasource';\nimport { createViewLink } from './utils/misc';\nimport { unescapePathSeparators } from './utils/rule-id';\n\nconst pageTitle = 'Find rule';\nconst subUrl = config.appSubUrl;\n\nfunction useRuleFindParams() {\n  // DO NOT USE REACT-ROUTER HOOKS FOR THIS CODE\n  // React-router's useLocation/useParams/props.match are broken and don't preserve original param values when parsing location\n  // so, they cannot be used to parse name and sourceName path params\n  // React-router messes the pathname up resulting in a string that is neither encoded nor decoded\n  // Relevant issue: https://github.com/remix-run/history/issues/505#issuecomment-453175833\n  // It was probably fixed in React-Router v6\n  const location = useLocation();\n\n  return useMemo(() => {\n    const segments = location.pathname?.replace(subUrl, '').split('/') ?? []; // [\"\", \"alerting\", \"{sourceName}\", \"{name}]\n    const name = unescapePathSeparators(decodeURIComponent(unescapePathSeparators(segments[3])));\n    const sourceName = decodeURIComponent(segments[2]);\n\n    const searchParams = new URLSearchParams(location.search);\n\n    return {\n      name,\n      sourceName,\n      namespace: searchParams.get('namespace') ?? undefined,\n      group: searchParams.get('group') ?? undefined,\n    };\n  }, [location]);\n}\n\nexport function RedirectToRuleViewer(): JSX.Element | null {\n  const styles = useStyles2(getStyles);\n\n  const { name, sourceName, namespace, group } = useRuleFindParams();\n  const {\n    error,\n    loading,\n    rules = [],\n  } = useCloudCombinedRulesMatching(name, sourceName, { namespace, groupName: group });\n\n  if (!name || !sourceName) {\n    return <Redirect to=\"/notfound\" />;\n  }\n\n  if (error) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title={`Failed to load rules from ${sourceName}`}>\n          {isFetchError(error) && (\n            <details className={styles.errorMessage}>\n              {error.message}\n              <br />\n              {/* {!!error?.stack && error.stack} */}\n            </details>\n          )}\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (loading) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <LoadingPlaceholder text=\"Loading rule...\" />\n      </RuleViewerLayout>\n    );\n  }\n\n  const rulesSource = getRulesSourceByName(sourceName);\n\n  if (!rulesSource) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <Alert title=\"Could not view rule\">\n          <details className={styles.errorMessage}>{`Could not find data source with name: ${sourceName}.`}</details>\n        </Alert>\n      </RuleViewerLayout>\n    );\n  }\n\n  if (rules.length === 1) {\n    const [rule] = rules;\n    const to = createViewLink(rulesSource, rule, '/alerting/list').replace(subUrl, '');\n    return <Redirect to={to} />;\n  }\n\n  if (rules.length === 0) {\n    return (\n      <RuleViewerLayout title={pageTitle}>\n        <div data-testid=\"no-rules\">\n          No rules in <span className={styles.param}>{sourceName}</span> matched the name{' '}\n          <span className={styles.param}>{name}</span>\n        </div>\n      </RuleViewerLayout>\n    );\n  }\n\n  return (\n    <RuleViewerLayout title={pageTitle}>\n      <div>\n        Several rules in <span className={styles.param}>{sourceName}</span> matched the name{' '}\n        <span className={styles.param}>{name}</span>, please select the rule you want to view.\n      </div>\n      <div className={styles.rules}>\n        {rules.map((rule, index) => {\n          return (\n            <Card key={`${rule.name}-${index}`} href={createViewLink(rulesSource, rule, '/alerting/list')}>\n              <Card.Heading>{rule.name}</Card.Heading>\n              <Card.Meta separator={''}>\n                <Icon name=\"folder\" />\n                <span className={styles.namespace}>{`${rule.namespace.name} / ${rule.group.name}`}</span>\n              </Card.Meta>\n              <Card.Tags>\n                <AlertLabels labels={rule.labels} />\n              </Card.Tags>\n            </Card>\n          );\n        })}\n      </div>\n    </RuleViewerLayout>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    param: css`\n      font-style: italic;\n      color: ${theme.colors.text.secondary};\n    `,\n    rules: css`\n      margin-top: ${theme.spacing(2)};\n    `,\n    namespace: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    errorMessage: css`\n      white-space: pre-wrap;\n    `,\n  };\n}\n\nexport default withErrorBoundary(RedirectToRuleViewer, { style: 'page' });\n"],"names":["defaultPageNav","RuleViewerLayout","props","wrapInContent","children","title","renderTitle","styles","getPageStyles","Page","RuleViewerLayoutContent","padding","getContentStyles","theme","pageTitle","subUrl","config","useRuleFindParams","location","useLocation","segments","name","sourceName","searchParams","RedirectToRuleViewer","getStyles","namespace","group","error","loading","rules","Alert","LoadingPlaceholder","rulesSource","rule","to","index","Card","Icon","AlertLabels"],"sourceRoot":""}