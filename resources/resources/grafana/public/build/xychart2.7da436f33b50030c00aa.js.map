{"version":3,"file":"xychart2.7da436f33b50030c00aa.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Layers/LayerName.tsx","webpack://grafana/./public/app/plugins/panel/xychart/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/xychart/v2/panelcfg.gen.ts","webpack://grafana/./public/app/plugins/panel/xychart/v2/SeriesEditor.tsx","webpack://grafana/./public/app/plugins/panel/xychart/v2/utils.ts","webpack://grafana/./public/app/plugins/panel/xychart/v2/XYChartTooltip.tsx","webpack://grafana/./public/app/plugins/panel/xychart/v2/scatter.ts","webpack://grafana/./public/app/plugins/panel/xychart/v2/XYChartPanel.tsx","webpack://grafana/./public/app/plugins/panel/xychart/v2/config.ts","webpack://grafana/./public/app/plugins/panel/xychart/v2/migrations.ts","webpack://grafana/./public/app/plugins/panel/xychart/v2/module.tsx"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Input, FieldValidationMessage, useStyles2 } from '@grafana/ui';\n\nexport interface LayerNameProps {\n  name: string;\n  onChange: (v: string) => void;\n  verifyLayerNameUniqueness?: (nameToCheck: string) => boolean;\n  overrideStyles?: boolean;\n}\n\nexport const LayerName = ({ name, onChange, verifyLayerNameUniqueness, overrideStyles }: LayerNameProps) => {\n  const styles = useStyles2(getStyles);\n\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n\n  const onEditLayer = (event: React.SyntheticEvent) => {\n    setIsEditing(true);\n  };\n\n  const onEndEditName = (newName: string) => {\n    setIsEditing(false);\n\n    if (validationError) {\n      setValidationError(null);\n      return;\n    }\n\n    if (name !== newName) {\n      onChange(newName);\n    }\n  };\n\n  const onInputChange = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    const newName = event.currentTarget.value.trim();\n\n    if (newName.length === 0) {\n      setValidationError('An empty layer name is not allowed');\n      return;\n    }\n\n    if (verifyLayerNameUniqueness && !verifyLayerNameUniqueness(newName) && newName !== name) {\n      setValidationError('Layer name already exists');\n      return;\n    }\n\n    if (validationError) {\n      setValidationError(null);\n    }\n  };\n\n  const onEditLayerBlur = (event: React.SyntheticEvent<HTMLInputElement>) => {\n    onEndEditName(event.currentTarget.value.trim());\n  };\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Enter') {\n      onEndEditName(event.currentTarget.value);\n    }\n  };\n\n  const onFocus = (event: React.FocusEvent<HTMLInputElement>) => {\n    event.target.select();\n  };\n\n  return (\n    <>\n      <div className={styles.wrapper}>\n        {!isEditing && (\n          <button\n            className={styles.layerNameWrapper}\n            title=\"Edit layer name\"\n            onClick={onEditLayer}\n            data-testid=\"layer-name-div\"\n          >\n            <span className={overrideStyles ? '' : styles.layerName}>{name}</span>\n            <Icon name=\"pen\" className={styles.layerEditIcon} size=\"sm\" />\n          </button>\n        )}\n\n        {isEditing && (\n          <>\n            <Input\n              type=\"text\"\n              defaultValue={name}\n              onBlur={onEditLayerBlur}\n              autoFocus\n              onKeyDown={onKeyDown}\n              onFocus={onFocus}\n              invalid={validationError !== null}\n              onChange={onInputChange}\n              className={styles.layerNameInput}\n              data-testid=\"layer-name-input\"\n            />\n            {validationError && <FieldValidationMessage horizontal>{validationError}</FieldValidationMessage>}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    wrapper: css({\n      label: 'Wrapper',\n      display: 'flex',\n      alignItems: 'center',\n      marginLeft: theme.spacing(0.5),\n    }),\n    layerNameWrapper: css({\n      display: 'flex',\n      cursor: 'pointer',\n      border: '1px solid transparent',\n      borderRadius: theme.shape.radius.default,\n      alignItems: 'center',\n      padding: `0 0 0 ${theme.spacing(0.5)}`,\n      margin: 0,\n      background: 'transparent',\n\n      '&:hover': {\n        background: theme.colors.action.hover,\n        border: `1px dashed ${theme.colors.border.strong}`,\n      },\n\n      '&:focus': {\n        border: `2px solid ${theme.colors.primary.border}`,\n      },\n\n      '&:hover, &:focus': {\n        '.query-name-edit-icon': {\n          visibility: 'visible',\n        },\n      },\n    }),\n    layerName: css({\n      fontWeight: theme.typography.fontWeightMedium,\n      color: theme.colors.primary.text,\n      cursor: 'pointer',\n      overflow: 'hidden',\n      marginLeft: theme.spacing(0.5),\n    }),\n    layerEditIcon: cx(\n      css({\n        marginLeft: theme.spacing(2),\n        visibility: 'hidden',\n      }),\n      'query-name-edit-icon'\n    ),\n    layerNameInput: css({\n      maxWidth: '300px',\n      margin: '-4px 0',\n    }),\n  };\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\n/**\n * Auto is \"table\" in the UI\n */\nexport enum SeriesMapping {\n  Auto = 'auto',\n  Manual = 'manual',\n}\n\nexport enum ScatterShow {\n  Lines = 'lines',\n  Points = 'points',\n  PointsAndLines = 'points+lines',\n}\n\n/**\n * Configuration for the Table/Auto mode\n */\nexport interface XYDimensionConfig {\n  exclude?: Array<string>;\n  frame: number;\n  x?: string;\n}\n\nexport const defaultXYDimensionConfig: Partial<XYDimensionConfig> = {\n  exclude: [],\n};\n\nexport interface FieldConfig extends common.HideableFieldConfig, common.AxisConfig {\n  label?: common.VisibilityMode;\n  labelValue?: common.TextDimensionConfig;\n  lineColor?: common.ColorDimensionConfig;\n  lineStyle?: common.LineStyle;\n  lineWidth?: number;\n  pointColor?: common.ColorDimensionConfig;\n  pointSize?: common.ScaleDimensionConfig;\n  show?: ScatterShow;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  label: common.VisibilityMode.Auto,\n  show: ScatterShow.Points,\n};\n\nexport interface ScatterSeriesConfig extends FieldConfig {\n  frame?: number;\n  name?: string;\n  x?: string;\n  y?: string;\n}\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n  /**\n   * Table Mode (auto)\n   */\n  dims: XYDimensionConfig;\n  /**\n   * Manual Mode\n   */\n  series: Array<ScatterSeriesConfig>;\n  seriesMapping?: SeriesMapping;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  series: [],\n};\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\nexport enum SeriesMapping {\n  Auto = 'auto',\n  Manual = 'manual',\n}\n\nexport enum XYShowMode {\n  Lines = 'lines',\n  Points = 'points',\n  PointsAndLines = 'points+lines',\n}\n\n/**\n * NOTE: (copied from dashboard_kind.cue, since not exported)\n * Matcher is a predicate configuration. Based on the config a set of field(s) or values is filtered in order to apply override / transformation.\n * It comes with in id ( to resolve implementation from registry) and a configuration that’s specific to a particular matcher type.\n */\nexport interface MatcherConfig {\n  /**\n   * The matcher id. This is used to find the matcher implementation from registry.\n   */\n  id: string;\n  /**\n   * The matcher options. This is specific to the matcher implementation.\n   */\n  options?: unknown;\n}\n\nexport const defaultMatcherConfig: Partial<MatcherConfig> = {\n  id: '',\n};\n\nexport interface FieldConfig extends common.HideableFieldConfig, common.AxisConfig {\n  lineStyle?: common.LineStyle;\n  lineWidth?: number;\n  pointSize?: {\n    fixed?: number;\n    min?: number;\n    max?: number;\n  };\n  show?: XYShowMode;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  show: XYShowMode.Points,\n};\n\nexport interface XYSeriesConfig {\n  color?: {\n    matcher: MatcherConfig;\n  };\n  frame?: {\n    matcher: MatcherConfig;\n  };\n  name?: {\n    fixed?: string;\n  };\n  size?: {\n    matcher: MatcherConfig;\n  };\n  x?: {\n    matcher: MatcherConfig;\n  };\n  y?: {\n    matcher: MatcherConfig;\n  };\n}\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n  mapping: SeriesMapping;\n  series: Array<XYSeriesConfig>;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  series: [],\n};\n","import { css, cx } from '@emotion/css';\nimport React, { Fragment, useState } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport {\n  getFrameDisplayName,\n  StandardEditorProps,\n  // getFieldDisplayName,\n  FrameMatcherID,\n  FieldMatcherID,\n  FieldNamePickerBaseNameMode,\n  FieldType,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { Button, Field, IconButton, Select, useStyles2 } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { LayerName } from 'app/core/components/Layers/LayerName';\n\nimport { Options, SeriesMapping, XYSeriesConfig } from './panelcfg.gen';\n\nexport const SeriesEditor = ({\n  value: seriesCfg,\n  onChange,\n  context,\n}: StandardEditorProps<XYSeriesConfig[], unknown, Options>) => {\n  const style = useStyles2(getStyles);\n\n  // reset opts when mapping changes (no way to do this in panel opts builder?)\n  const mapping = context.options?.mapping as SeriesMapping;\n  const prevMapping = usePrevious(mapping);\n  const mappingChanged = prevMapping != null && mapping !== prevMapping;\n\n  const defaultFrame = { frame: { matcher: { id: FrameMatcherID.byIndex, options: 0 } } };\n\n  if (mappingChanged || seriesCfg == null) {\n    seriesCfg = [{ ...defaultFrame }];\n    onChange([...seriesCfg]);\n  }\n\n  const [selectedIdx, setSelectedIdx] = useState(0);\n\n  const addSeries = () => {\n    seriesCfg = seriesCfg.concat({ ...defaultFrame });\n    setSelectedIdx(seriesCfg.length - 1);\n    onChange([...seriesCfg]);\n  };\n\n  const deleteSeries = (index: number) => {\n    seriesCfg = seriesCfg.filter((s, i) => i !== index);\n    setSelectedIdx(0);\n    onChange([...seriesCfg]);\n  };\n\n  const series = seriesCfg[selectedIdx];\n  const formKey = `${mapping}${selectedIdx}`;\n\n  const baseNameMode =\n    mapping === SeriesMapping.Manual\n      ? FieldNamePickerBaseNameMode.ExcludeBaseNames\n      : context.data.length === 1\n        ? FieldNamePickerBaseNameMode.IncludeAll\n        : FieldNamePickerBaseNameMode.OnlyBaseNames;\n\n  context.data.forEach((frame, frameIndex) => {\n    frame.fields.forEach((field, fieldIndex) => {\n      field.state = {\n        ...field.state,\n        origin: {\n          frameIndex,\n          fieldIndex,\n        },\n      };\n    });\n  });\n\n  return (\n    <>\n      {mapping === SeriesMapping.Manual && (\n        <>\n          <Button icon=\"plus\" size=\"sm\" variant=\"secondary\" onClick={addSeries} className={style.marginBot}>\n            Add series\n          </Button>\n\n          <div className={style.marginBot}>\n            {seriesCfg.map((series, index) => {\n              return (\n                <div\n                  key={`series/${index}`}\n                  className={index === selectedIdx ? `${style.row} ${style.sel}` : style.row}\n                  onClick={() => setSelectedIdx(index)}\n                  role=\"button\"\n                  aria-label={`Select series ${index + 1}`}\n                  tabIndex={0}\n                  onKeyPress={(e) => {\n                    if (e.key === 'Enter') {\n                      setSelectedIdx(index);\n                    }\n                  }}\n                >\n                  <LayerName\n                    name={series.name?.fixed ?? `Series ${index + 1}`}\n                    onChange={(v) => {\n                      series.name = {\n                        fixed: v === '' || v === `Series ${index + 1}` ? undefined : v,\n                      };\n                      onChange([...seriesCfg]);\n                    }}\n                  />\n                  <IconButton\n                    name=\"trash-alt\"\n                    title={'remove'}\n                    className={cx(style.actionIcon)}\n                    onClick={() => deleteSeries(index)}\n                    tooltip=\"Delete series\"\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </>\n      )}\n\n      {selectedIdx >= 0 && series != null && (\n        <Fragment key={formKey}>\n          <Field label=\"Frame\">\n            <Select\n              placeholder={mapping === SeriesMapping.Auto ? 'All frames' : 'Select frame'}\n              isClearable={true}\n              options={context.data.map((frame, index) => ({\n                value: index,\n                label: `${getFrameDisplayName(frame, index)} (index: ${index}, rows: ${frame.length})`,\n              }))}\n              value={series.frame?.matcher.options}\n              onChange={(opt) => {\n                if (opt == null) {\n                  delete series.frame;\n                } else {\n                  series.frame = {\n                    matcher: {\n                      id: FrameMatcherID.byIndex,\n                      options: Number(opt.value),\n                    },\n                  };\n                }\n\n                onChange([...seriesCfg]);\n              }}\n            />\n          </Field>\n          <Field label=\"X field\">\n            <FieldNamePicker\n              value={series.x?.matcher.options as string}\n              context={context}\n              onChange={(fieldName) => {\n                if (fieldName == null) {\n                  delete series.x;\n                } else {\n                  // TODO: reset any other dim that was set to fieldName\n                  series.x = {\n                    matcher: {\n                      id: FieldMatcherID.byName,\n                      options: fieldName,\n                    },\n                  };\n                }\n\n                onChange([...seriesCfg]);\n              }}\n              item={{\n                id: 'x',\n                name: 'x',\n                settings: {\n                  filter: (field) =>\n                    (mapping === SeriesMapping.Auto ||\n                      field.state?.origin?.frameIndex === series.frame?.matcher.options) &&\n                    field.type === FieldType.number &&\n                    !field.config.custom?.hideFrom?.viz,\n                  baseNameMode,\n                  placeholderText: mapping === SeriesMapping.Auto ? 'First number field in each frame' : undefined,\n                },\n              }}\n            />\n          </Field>\n          <Field label=\"Y field\">\n            <FieldNamePicker\n              value={series.y?.matcher?.options as string}\n              context={context}\n              onChange={(fieldName) => {\n                if (fieldName == null) {\n                  delete series.y;\n                } else {\n                  // TODO: reset any other dim that was set to fieldName\n                  series.y = {\n                    matcher: {\n                      id: FieldMatcherID.byName,\n                      options: fieldName,\n                    },\n                  };\n                }\n\n                onChange([...seriesCfg]);\n              }}\n              item={{\n                id: 'y',\n                name: 'y',\n                settings: {\n                  // TODO: filter out series.y?.exclude.options, series.size.matcher.options, series.color.matcher.options\n                  filter: (field) =>\n                    (mapping === SeriesMapping.Auto ||\n                      field.state?.origin?.frameIndex === series.frame?.matcher.options) &&\n                    field.type === FieldType.number &&\n                    !field.config.custom?.hideFrom?.viz,\n                  baseNameMode,\n                  placeholderText: mapping === SeriesMapping.Auto ? 'Remaining number fields in each frame' : undefined,\n                },\n              }}\n            />\n          </Field>\n          <Field label=\"Size field\">\n            <FieldNamePicker\n              value={series.size?.matcher?.options as string}\n              context={context}\n              onChange={(fieldName) => {\n                if (fieldName == null) {\n                  delete series.size;\n                } else {\n                  // TODO: reset any other dim that was set to fieldName\n                  series.size = {\n                    matcher: {\n                      id: FieldMatcherID.byName,\n                      options: fieldName,\n                    },\n                  };\n                }\n\n                onChange([...seriesCfg]);\n              }}\n              item={{\n                id: 'size',\n                name: 'size',\n                settings: {\n                  // TODO: filter out series.y?.exclude.options, series.size.matcher.options, series.color.matcher.options\n                  filter: (field) =>\n                    field.name !== series.x?.matcher.options &&\n                    (mapping === SeriesMapping.Auto ||\n                      field.state?.origin?.frameIndex === series.frame?.matcher.options) &&\n                    field.type === FieldType.number &&\n                    !field.config.custom?.hideFrom?.viz,\n                  baseNameMode,\n                  placeholderText: '',\n                },\n              }}\n            />\n          </Field>\n          <Field label=\"Color field\">\n            <FieldNamePicker\n              value={series.color?.matcher?.options as string}\n              context={context}\n              onChange={(fieldName) => {\n                if (fieldName == null) {\n                  delete series.color;\n                } else {\n                  // TODO: reset any other dim that was set to fieldName\n                  series.color = {\n                    matcher: {\n                      id: FieldMatcherID.byName,\n                      options: fieldName,\n                    },\n                  };\n                }\n\n                onChange([...seriesCfg]);\n              }}\n              item={{\n                id: 'color',\n                name: 'color',\n                settings: {\n                  // TODO: filter out series.y?.exclude.options, series.size.matcher.options, series.color.matcher.options\n                  filter: (field) =>\n                    field.name !== series.x?.matcher.options &&\n                    (mapping === SeriesMapping.Auto ||\n                      field.state?.origin?.frameIndex === series.frame?.matcher.options) &&\n                    field.type === FieldType.number &&\n                    !field.config.custom?.hideFrom?.viz,\n                  baseNameMode,\n                  placeholderText: '',\n                },\n              }}\n            />\n          </Field>\n        </Fragment>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  marginBot: css({\n    marginBottom: '20px',\n  }),\n  row: css({\n    padding: `${theme.spacing(0.5, 1)}`,\n    borderRadius: `${theme.shape.radius.default}`,\n    background: `${theme.colors.background.secondary}`,\n    minHeight: `${theme.spacing(4)}`,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: '3px',\n    cursor: 'pointer',\n\n    border: `1px solid ${theme.components.input.borderColor}`,\n    '&:hover': {\n      border: `1px solid ${theme.components.input.borderHover}`,\n    },\n  }),\n  sel: css({\n    border: `1px solid ${theme.colors.primary.border}`,\n    '&:hover': {\n      border: `1px solid ${theme.colors.primary.border}`,\n    },\n  }),\n  actionIcon: css({\n    color: `${theme.colors.text.secondary}`,\n    '&:hover': {\n      color: `${theme.colors.text}`,\n    },\n  }),\n});\n","import {\n  Field,\n  formattedValueToString,\n  getFieldMatcher,\n  FieldType,\n  getFieldDisplayName,\n  DataFrame,\n  FrameMatcherID,\n  MatcherConfig,\n  FieldColorModeId,\n  cacheFieldDisplayNames,\n  FieldMatcherID,\n  FieldConfigSource,\n} from '@grafana/data';\nimport { decoupleHideFromState } from '@grafana/data/src/field/fieldState';\nimport { config } from '@grafana/runtime';\nimport { VisibilityMode } from '@grafana/schema';\n\nimport { XYShowMode, SeriesMapping, XYSeriesConfig } from './panelcfg.gen';\nimport { XYSeries } from './types2';\n\nexport function fmt(field: Field, val: number): string {\n  if (field.display) {\n    return formattedValueToString(field.display(val));\n  }\n\n  return `${val}`;\n}\n\n// cause we dont have a proper matcher for this currently\nfunction getFrameMatcher2(config: MatcherConfig) {\n  if (config.id === FrameMatcherID.byIndex) {\n    return (frame: DataFrame, index: number) => index === config.options;\n  }\n\n  return () => false;\n}\n\nexport function prepSeries(\n  mapping: SeriesMapping,\n  mappedSeries: XYSeriesConfig[],\n  frames: DataFrame[],\n  fieldConfig: FieldConfigSource<any>\n) {\n  cacheFieldDisplayNames(frames);\n  decoupleHideFromState(frames, fieldConfig);\n\n  let series: XYSeries[] = [];\n\n  if (mappedSeries.length === 0) {\n    mappedSeries = [{}];\n  }\n\n  const { palette, getColorByName } = config.theme2.visualization;\n\n  mappedSeries.forEach((seriesCfg, seriesIdx) => {\n    if (mapping === SeriesMapping.Manual) {\n      if (seriesCfg.frame?.matcher == null || seriesCfg.x?.matcher == null || seriesCfg.y?.matcher == null) {\n        return;\n      }\n    }\n\n    let xMatcher = getFieldMatcher(\n      seriesCfg.x?.matcher ?? {\n        id: FieldMatcherID.byType,\n        options: 'number',\n      }\n    );\n    let yMatcher = getFieldMatcher(\n      seriesCfg.y?.matcher ?? {\n        id: FieldMatcherID.byType,\n        options: 'number',\n      }\n    );\n    let colorMatcher = seriesCfg.color ? getFieldMatcher(seriesCfg.color.matcher) : null;\n    let sizeMatcher = seriesCfg.size ? getFieldMatcher(seriesCfg.size.matcher) : null;\n    // let frameMatcher = seriesCfg.frame ? getFrameMatchers(seriesCfg.frame) : null;\n    let frameMatcher = seriesCfg.frame ? getFrameMatcher2(seriesCfg.frame.matcher) : null;\n\n    // loop over all frames and fields, adding a new series for each y dim\n    frames.forEach((frame, frameIdx) => {\n      // must match frame in manual mode\n      if (frameMatcher != null && !frameMatcher(frame, frameIdx)) {\n        return;\n      }\n\n      // shared across each series in this frame\n      let restFields: Field[] = [];\n\n      let frameSeries: XYSeries[] = [];\n\n      // only grabbing number fields (exclude time, string, enum, other)\n      let onlyNumFields = frame.fields.filter((field) => field.type === FieldType.number);\n\n      // only one of these per frame\n      let x = onlyNumFields.find((field) => xMatcher(field, frame, frames));\n      let color =\n        colorMatcher != null\n          ? onlyNumFields.find((field) => field !== x && colorMatcher!(field, frame, frames))\n          : undefined;\n      let size =\n        sizeMatcher != null\n          ? onlyNumFields.find((field) => field !== x && field !== color && sizeMatcher!(field, frame, frames))\n          : undefined;\n\n      // x field is required\n      if (x != null) {\n        // match y fields and create series\n        onlyNumFields.forEach((field) => {\n          // don't reuse already-mapped fields\n          if (field === x || field === color || field === size) {\n            return;\n          }\n\n          // in manual mode only add single series for this config\n          if (mapping === SeriesMapping.Manual && frameSeries.length > 0) {\n            return;\n          }\n\n          // if we match non-excluded y, create series\n          if (yMatcher(field, frame, frames) && !field.config.custom?.hideFrom?.viz) {\n            let y = field;\n            let name = seriesCfg.name?.fixed ?? getFieldDisplayName(y, frame, frames);\n\n            let ser: XYSeries = {\n              // these typically come from y field\n              name: {\n                value: name,\n              },\n\n              showPoints: y.config.custom.show === XYShowMode.Lines ? VisibilityMode.Never : VisibilityMode.Always,\n\n              showLine: y.config.custom.show !== XYShowMode.Points,\n              lineWidth: y.config.custom.lineWidth ?? 2,\n              lineStyle: y.config.custom.lineStyle,\n              // lineColor: () => seriesColor,\n              x: {\n                field: x!,\n              },\n              y: {\n                field: y,\n              },\n              color: {},\n              size: {},\n              _rest: restFields,\n            };\n\n            if (color != null) {\n              ser.color.field = color;\n            }\n\n            if (size != null) {\n              ser.size.field = size;\n              ser.size.min = size.config.custom.pointSize?.min ?? 5;\n              ser.size.max = size.config.custom.pointSize?.max ?? 100;\n              // ser.size.mode =\n            }\n\n            frameSeries.push(ser);\n          }\n        });\n\n        if (frameSeries.length === 0) {\n          // TODO: could not create series, skip & show error?\n        }\n\n        // populate rest fields\n        frame.fields.forEach((field) => {\n          let isUsedField = frameSeries.some(\n            ({ x, y, color, size }) =>\n              x.field === field || y.field === field || color.field === field || size.field === field\n          );\n\n          if (!isUsedField) {\n            restFields.push(field);\n          }\n        });\n\n        series.push(...frameSeries);\n      } else {\n        // x is missing in this frame!\n      }\n    });\n  });\n\n  if (series.length === 0) {\n    // TODO: could not create series, skip & show error?\n  } else {\n    // assign classic palette colors by index, as fallbacks for all series\n\n    let paletteIdx = 0;\n\n    // todo: populate min, max, mode from field + hints\n    series.forEach((s, i) => {\n      if (s.color.field == null) {\n        // derive fixed color from y field config\n        let colorCfg = s.y.field.config.color ?? { mode: FieldColorModeId.PaletteClassic };\n\n        let value = '';\n\n        if (colorCfg.mode === FieldColorModeId.PaletteClassic) {\n          value = getColorByName(palette[paletteIdx++ % palette.length]); // todo: do this via state.seriesIdx and re-init displayProcessor\n        } else if (colorCfg.mode === FieldColorModeId.Fixed) {\n          value = getColorByName(colorCfg.fixedColor!);\n        }\n\n        s.color.fixed = value;\n      }\n\n      if (s.size.field == null) {\n        // derive fixed size from y field config\n        s.size.fixed = s.y.field.config.custom.pointSize?.fixed ?? 5;\n        // ser.size.mode =\n      }\n    });\n\n    autoNameSeries(series);\n\n    // TODO: re-assign y display names?\n    // y.state = {\n    //   ...y.state,\n    //   seriesIndex: series.length + ,\n    // };\n    // y.display = getDisplayProcessor({ field, theme });\n  }\n\n  return series;\n}\n\n// strip common prefixes and suffixes from y field names\nfunction autoNameSeries(series: XYSeries[]) {\n  let names = series.map((s) => s.name.value.split(/\\s+/g));\n\n  const { prefix, suffix } = findCommonPrefixSuffixLengths(names);\n\n  if (prefix < Infinity || suffix < Infinity) {\n    series.forEach((s, i) => {\n      s.name.value = names[i].slice(prefix, names[i].length - suffix).join(' ');\n    });\n  }\n}\n\nexport function getCommonPrefixSuffix(strs: string[]) {\n  let names = strs.map((s) => s.split(/\\s+/g));\n\n  let { prefix, suffix } = findCommonPrefixSuffixLengths(names);\n\n  let n = names[0];\n\n  if (n.length === 1 && prefix === 1 && suffix === 1) {\n    return '';\n  }\n\n  let parts = [];\n\n  if (prefix > 0) {\n    parts.push(...n.slice(0, prefix));\n  }\n\n  if (suffix > 0) {\n    parts.push(...n.slice(-suffix));\n  }\n\n  return parts.join(' ');\n}\n\n// lengths are in number of tokens (segments) in a phrase\nfunction findCommonPrefixSuffixLengths(names: string[][]) {\n  let commonPrefixLen = Infinity;\n  let commonSuffixLen = Infinity;\n\n  // if auto naming strategy, rename fields by stripping common prefixes and suffixes\n  let segs0: string[] = names[0];\n\n  for (let i = 1; i < names.length; i++) {\n    if (names[i].length < segs0.length) {\n      segs0 = names[i];\n    }\n  }\n\n  for (let i = 1; i < names.length; i++) {\n    let segs = names[i];\n\n    if (segs !== segs0) {\n      // prefixes\n      let preLen = 0;\n      for (let j = 0; j < segs0.length; j++) {\n        if (segs[j] === segs0[j]) {\n          preLen++;\n        } else {\n          break;\n        }\n      }\n\n      if (preLen < commonPrefixLen) {\n        commonPrefixLen = preLen;\n      }\n\n      // suffixes\n      let sufLen = 0;\n      for (let j = segs0.length - 1; j >= 0; j--) {\n        if (segs[j] === segs0[j]) {\n          sufLen++;\n        } else {\n          break;\n        }\n      }\n\n      if (sufLen < commonSuffixLen) {\n        commonSuffixLen = sufLen;\n      }\n    }\n  }\n\n  return {\n    prefix: commonPrefixLen,\n    suffix: commonSuffixLen,\n  };\n}\n","import React, { ReactNode } from 'react';\n\nimport { DataFrame } from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { useStyles2 } from '@grafana/ui';\nimport { VizTooltipContent } from '@grafana/ui/src/components/VizTooltip/VizTooltipContent';\nimport { VizTooltipFooter } from '@grafana/ui/src/components/VizTooltip/VizTooltipFooter';\nimport { VizTooltipHeader } from '@grafana/ui/src/components/VizTooltip/VizTooltipHeader';\nimport { ColorIndicator, VizTooltipItem } from '@grafana/ui/src/components/VizTooltip/types';\n\nimport { getDataLinks } from '../../status-history/utils';\nimport { getStyles } from '../../timeseries/TimeSeriesTooltip';\n\nimport { XYSeries } from './types2';\nimport { fmt } from './utils';\n\nexport interface Props {\n  dataIdxs: Array<number | null>;\n  seriesIdx: number | null | undefined;\n  isPinned: boolean;\n  dismiss: () => void;\n  data: DataFrame[];\n  xySeries: XYSeries[];\n}\n\nfunction stripSeriesName(fieldName: string, seriesName: string) {\n  if (fieldName !== seriesName && fieldName.includes(' ')) {\n    fieldName = fieldName.replace(seriesName, '').trim();\n  }\n\n  return fieldName;\n}\n\nexport const XYChartTooltip = ({ dataIdxs, seriesIdx, data, xySeries, dismiss, isPinned }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const rowIndex = dataIdxs.find((idx) => idx !== null)!;\n\n  const series = xySeries[seriesIdx! - 1];\n  const xField = series.x.field;\n  const yField = series.y.field;\n\n  const sizeField = series.size.field;\n  const colorField = series.color.field;\n\n  let label = series.name.value;\n\n  let seriesColor = series.color.fixed;\n  // let colorField = series.color.field;\n  // let pointColor: string;\n\n  // if (colorField != null) {\n  //   pointColor = colorField.display?.(colorField.values[rowIndex]).color!;\n  // }\n\n  const headerItem: VizTooltipItem = {\n    label,\n    value: '',\n    color: alpha(seriesColor!, 0.5),\n    colorIndicator: ColorIndicator.marker_md,\n  };\n\n  const contentItems: VizTooltipItem[] = [\n    {\n      label: stripSeriesName(xField.state?.displayName ?? xField.name, label),\n      value: fmt(xField, xField.values[rowIndex]),\n    },\n    {\n      label: stripSeriesName(yField.state?.displayName ?? yField.name, label),\n      value: fmt(yField, yField.values[rowIndex]),\n    },\n  ];\n\n  // mapped fields for size/color\n  if (sizeField != null) {\n    contentItems.push({\n      label: stripSeriesName(sizeField.state?.displayName ?? sizeField.name, label),\n      value: fmt(sizeField, sizeField.values[rowIndex]),\n    });\n  }\n\n  if (colorField != null) {\n    contentItems.push({\n      label: stripSeriesName(colorField.state?.displayName ?? colorField.name, label),\n      value: fmt(colorField, colorField.values[rowIndex]),\n    });\n  }\n\n  series._rest.forEach((field) => {\n    contentItems.push({\n      label: stripSeriesName(field.state?.displayName ?? field.name, label),\n      value: fmt(field, field.values[rowIndex]),\n    });\n  });\n\n  let footer: ReactNode;\n\n  if (isPinned && seriesIdx != null) {\n    const links = getDataLinks(yField, rowIndex);\n\n    footer = <VizTooltipFooter dataLinks={links} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipHeader item={headerItem} isPinned={isPinned} />\n      <VizTooltipContent items={contentItems} isPinned={isPinned} />\n      {footer}\n    </div>\n  );\n};\n","import uPlot from 'uplot';\n\nimport { formattedValueToString, GrafanaTheme2 } from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { AxisPlacement, ScaleDirection, ScaleOrientation, VisibilityMode } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { FacetedData, FacetSeries } from '@grafana/ui/src/components/uPlot/types';\n\nimport { pointWithin, Quadtree, Rect } from '../../barchart/quadtree';\n\nimport { XYSeries } from './types2';\nimport { getCommonPrefixSuffix } from './utils';\n\ninterface DrawBubblesOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  disp: {\n    //unit: 3,\n    size: {\n      values: (u: uPlot, seriesIdx: number) => number[];\n    };\n    color: {\n      values: (u: uPlot, seriesIdx: number) => string[];\n      alpha: number;\n    };\n  };\n}\n\nexport const prepConfig = (xySeries: XYSeries[], theme: GrafanaTheme2) => {\n  if (xySeries.length === 0) {\n    return { builder: null, prepData: () => [] };\n  }\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  function drawBubblesFactory(opts: DrawBubblesOpts) {\n    const drawBubbles: uPlot.Series.PathBuilder = (u, seriesIdx, idx0, idx1) => {\n      uPlot.orient(\n        u,\n        seriesIdx,\n        (\n          series,\n          dataX,\n          dataY,\n          scaleX,\n          scaleY,\n          valToPosX,\n          valToPosY,\n          xOff,\n          yOff,\n          xDim,\n          yDim,\n          moveTo,\n          lineTo,\n          rect,\n          arc\n        ) => {\n          const pxRatio = uPlot.pxRatio;\n          const scatterInfo = xySeries[seriesIdx - 1];\n          let d = u.data[seriesIdx] as unknown as FacetSeries;\n\n          // showLine: boolean;\n          // lineStyle: common.LineStyle;\n          // showPoints: common.VisibilityMode;\n\n          let showLine = scatterInfo.showLine;\n          let showPoints = scatterInfo.showPoints === VisibilityMode.Always;\n\n          let strokeWidth = 1;\n\n          u.ctx.save();\n\n          u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n          u.ctx.clip();\n\n          u.ctx.fillStyle = (series.fill as any)(); // assumes constant\n          u.ctx.strokeStyle = (series.stroke as any)();\n          u.ctx.lineWidth = strokeWidth;\n\n          let deg360 = 2 * Math.PI;\n\n          let xKey = scaleX.key!;\n          let yKey = scaleY.key!;\n\n          // let pointHints = scatterInfo.hints.pointSize;\n          // const colorByValue = scatterInfo.hints.pointColor.mode.isByValue;\n          const pointHints = { max: undefined, fixed: 5 };\n          const colorByValue = false;\n\n          let maxSize = (pointHints.max ?? pointHints.fixed) * pxRatio;\n\n          // todo: this depends on direction & orientation\n          // todo: calc once per redraw, not per path\n          let filtLft = u.posToVal(-maxSize / 2, xKey);\n          let filtRgt = u.posToVal(u.bbox.width / pxRatio + maxSize / 2, xKey);\n          let filtBtm = u.posToVal(u.bbox.height / pxRatio + maxSize / 2, yKey);\n          let filtTop = u.posToVal(-maxSize / 2, yKey);\n\n          let sizes = opts.disp.size.values(u, seriesIdx);\n          let pointColors = opts.disp.color.values(u, seriesIdx);\n          let pointAlpha = opts.disp.color.alpha;\n\n          let linePath: Path2D | null = showLine ? new Path2D() : null;\n\n          let curColor: CanvasRenderingContext2D['fillStyle'] | null = null;\n\n          for (let i = 0; i < d[0].length; i++) {\n            let xVal = d[0][i];\n            let yVal = d[1][i];\n            let size = sizes[i] * pxRatio;\n\n            if (xVal >= filtLft && xVal <= filtRgt && yVal >= filtBtm && yVal <= filtTop) {\n              let cx = valToPosX(xVal, scaleX, xDim, xOff);\n              let cy = valToPosY(yVal, scaleY, yDim, yOff);\n\n              if (showLine) {\n                linePath!.lineTo(cx, cy);\n              }\n\n              if (showPoints) {\n                // if pointHints.fixed? don't recalc size\n                // if pointColor has 0 opacity, draw as single path (assuming all strokes are alpha 1)\n\n                u.ctx.moveTo(cx + size / 2, cy);\n                u.ctx.beginPath();\n                u.ctx.arc(cx, cy, size / 2, 0, deg360);\n\n                if (colorByValue) {\n                  if (pointColors[i] !== curColor) {\n                    curColor = pointColors[i];\n                    u.ctx.fillStyle = alpha(curColor, pointAlpha);\n                    u.ctx.strokeStyle = curColor;\n                  }\n                }\n\n                u.ctx.fill();\n                u.ctx.stroke();\n                opts.each(\n                  u,\n                  seriesIdx,\n                  i,\n                  cx - size / 2 - strokeWidth / 2,\n                  cy - size / 2 - strokeWidth / 2,\n                  size + strokeWidth,\n                  size + strokeWidth\n                );\n              }\n            }\n          }\n\n          if (showLine) {\n            u.ctx.strokeStyle = scatterInfo.color.fixed!;\n            u.ctx.lineWidth = scatterInfo.lineWidth * pxRatio;\n\n            const { lineStyle } = scatterInfo;\n            if (lineStyle && lineStyle.fill !== 'solid') {\n              if (lineStyle.fill === 'dot') {\n                u.ctx.lineCap = 'round';\n              }\n              u.ctx.setLineDash(lineStyle.dash ?? [10, 10]);\n            }\n\n            u.ctx.stroke(linePath!);\n          }\n\n          u.ctx.restore();\n        }\n      );\n\n      return null;\n    };\n\n    return drawBubbles;\n  }\n\n  let drawBubbles = drawBubblesFactory({\n    disp: {\n      size: {\n        //unit: 3, // raw CSS pixels\n        values: (u, seriesIdx) => {\n          return u.data[seriesIdx][2] as any; // already contains final pixel geometry\n          //let [minValue, maxValue] = getSizeMinMax(u);\n          //return u.data[seriesIdx][2].map(v => getSize(v, minValue, maxValue));\n        },\n      },\n      color: {\n        // string values\n        values: (u, seriesIdx) => {\n          return u.data[seriesIdx][3] as any;\n        },\n        alpha: 0.5,\n      },\n    },\n    each: (u, seriesIdx, dataIdx, lft, top, wid, hgt) => {\n      // we get back raw canvas coords (included axes & padding). translate to the plotting area origin\n      lft -= u.bbox.left;\n      top -= u.bbox.top;\n      qt.add({ x: lft, y: top, w: wid, h: hgt, sidx: seriesIdx, didx: dataIdx });\n    },\n  });\n\n  const builder = new UPlotConfigBuilder();\n\n  builder.setCursor({\n    drag: { setScale: true },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        const pxRatio = uPlot.pxRatio;\n\n        hRect = null;\n\n        let dist = Infinity;\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            let ocx = o.x + o.w / 2;\n            let ocy = o.y + o.h / 2;\n\n            let dx = ocx - cx;\n            let dy = ocy - cy;\n\n            let d = Math.sqrt(dx ** 2 + dy ** 2);\n\n            // test against radius for actual hover\n            if (d <= o.w / 2) {\n              // only hover bbox with closest distance\n              if (d <= dist) {\n                dist = d;\n                hRect = o;\n              }\n            }\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      size: (u, seriesIdx) => {\n        return hRect && seriesIdx === hRect.sidx ? hRect.w / uPlot.pxRatio : 0;\n      },\n      fill: (u, seriesIdx) => 'rgba(255,255,255,0.4)',\n    },\n  });\n\n  // clip hover points/bubbles to plotting area\n  builder.addHook('init', (u, r) => {\n    // TODO: re-enable once we global portal again\n    u.over.style.overflow = 'hidden';\n  });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  let xField = xySeries[0].x.field;\n\n  let fieldConfig = xField.config;\n  let customConfig = fieldConfig.custom;\n  let scaleDistr = customConfig?.scaleDistribution;\n\n  builder.addScale({\n    scaleKey: 'x',\n    isTime: false,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    distribution: scaleDistr?.type,\n    log: scaleDistr?.log,\n    linearThreshold: scaleDistr?.linearThreshold,\n    min: fieldConfig.min,\n    max: fieldConfig.max,\n    softMin: customConfig?.axisSoftMin,\n    softMax: customConfig?.axisSoftMax,\n    centeredZero: customConfig?.axisCenteredZero,\n    decimals: fieldConfig.decimals,\n  });\n\n  // why does this fall back to '' instead of null or undef?\n  let xAxisLabel = customConfig.axisLabel;\n\n  if (xAxisLabel == null || xAxisLabel === '') {\n    let dispNames = xySeries.map((s) => s.x.field.state?.displayName ?? '');\n\n    let xAxisAutoLabel =\n      xySeries.length === 1\n        ? xField.state?.displayName ?? xField.name\n        : new Set(dispNames).size === 1\n          ? dispNames[0]\n          : getCommonPrefixSuffix(dispNames);\n\n    if (xAxisAutoLabel !== '') {\n      xAxisLabel = xAxisAutoLabel;\n    }\n  }\n\n  builder.addAxis({\n    scaleKey: 'x',\n    placement: customConfig?.axisPlacement !== AxisPlacement.Hidden ? AxisPlacement.Bottom : AxisPlacement.Hidden,\n    show: customConfig?.axisPlacement !== AxisPlacement.Hidden,\n    grid: { show: customConfig?.axisGridShow },\n    border: { show: customConfig?.axisBorderShow },\n    theme,\n    label: xAxisLabel,\n    formatValue: (v, decimals) => formattedValueToString(xField.display!(v, decimals)),\n  });\n\n  xySeries.forEach((s, si) => {\n    let field = s.y.field;\n\n    const lineColor = s.color.fixed;\n    const pointColor = s.color.fixed;\n    //const lineColor = s.lineColor(frame);\n    //const lineWidth = s.lineWidth;\n\n    let scaleKey = field.config.unit ?? 'y';\n    let config = field.config;\n    let customConfig = config.custom;\n    let scaleDistr = customConfig?.scaleDistribution;\n\n    builder.addScale({\n      scaleKey,\n      orientation: ScaleOrientation.Vertical,\n      direction: ScaleDirection.Up,\n      distribution: scaleDistr?.type,\n      log: scaleDistr?.log,\n      linearThreshold: scaleDistr?.linearThreshold,\n      min: config.min,\n      max: config.max,\n      softMin: customConfig?.axisSoftMin,\n      softMax: customConfig?.axisSoftMax,\n      centeredZero: customConfig?.axisCenteredZero,\n      decimals: config.decimals,\n    });\n\n    // why does this fall back to '' instead of null or undef?\n    let yAxisLabel = customConfig.axisLabel;\n\n    if (yAxisLabel == null || yAxisLabel === '') {\n      let dispNames = xySeries.map((s) => s.y.field.state?.displayName ?? '');\n\n      let yAxisAutoLabel =\n        xySeries.length === 1\n          ? field.state?.displayName ?? field.name\n          : new Set(dispNames).size === 1\n            ? dispNames[0]\n            : getCommonPrefixSuffix(dispNames);\n\n      if (yAxisAutoLabel !== '') {\n        yAxisLabel = yAxisAutoLabel;\n      }\n    }\n\n    builder.addAxis({\n      scaleKey,\n      theme,\n      placement: customConfig?.axisPlacement === AxisPlacement.Auto ? AxisPlacement.Left : customConfig?.axisPlacement,\n      show: customConfig?.axisPlacement !== AxisPlacement.Hidden,\n      grid: { show: customConfig?.axisGridShow },\n      border: { show: customConfig?.axisBorderShow },\n      size: customConfig?.axisWidth,\n      // label: yAxisLabel == null || yAxisLabel === '' ? fieldDisplayName : yAxisLabel,\n      label: yAxisLabel,\n      formatValue: (v, decimals) => formattedValueToString(field.display!(v, decimals)),\n    });\n\n    builder.addSeries({\n      facets: [\n        {\n          scale: 'x',\n          auto: true,\n        },\n        {\n          scale: scaleKey,\n          auto: true,\n        },\n      ],\n      pathBuilder: drawBubbles, // drawBubbles({disp: {size: {values: () => }}})\n      theme,\n      scaleKey: '', // facets' scales used (above)\n      lineColor: alpha('' + lineColor, 1),\n      fillColor: alpha(pointColor ?? '#ffff', 0.5),\n      show: !field.state?.hideFrom?.viz,\n    });\n  });\n\n  /*\n  builder.setPrepData((frames) => {\n    let seriesData = lookup.fieldMaps.flatMap((f, i) => {\n      let { fields } = frames[i];\n\n      return f.y.map((yIndex, frameSeriesIndex) => {\n        let xValues = fields[f.x[frameSeriesIndex]].values;\n        let yValues = fields[f.y[frameSeriesIndex]].values;\n        let sizeValues = f.size![frameSeriesIndex](frames[i]);\n\n        if (!Array.isArray(sizeValues)) {\n          sizeValues = Array(xValues.length).fill(sizeValues);\n        }\n\n        return [xValues, yValues, sizeValues];\n      });\n    });\n\n    return [null, ...seriesData];\n  });\n  */\n\n  return { builder, prepData };\n};\n\nexport type PrepData = (xySeries: XYSeries[]) => FacetedData;\n\n/**\n * This is called everytime the data changes\n *\n * from?  is this where we would support that?  -- need the previous values\n */\nexport function prepData(xySeries: XYSeries[]): FacetedData {\n  // if (info.error || !data.length) {\n  //   return [null];\n  // }\n\n  return [\n    null,\n    ...xySeries.map((s, idx) => {\n      let len = s.x.field.values.length;\n\n      let diams: number[];\n\n      if (s.size.field != null) {\n        let { min, max } = s.size;\n\n        // todo: this scaling should be in renderer from raw values (not by passing css pixel diams via data)\n        let minPx = min! ** 2;\n        let maxPx = max! ** 2;\n        // use quadratic size scaling in byValue modes\n        let pxRange = maxPx - minPx;\n\n        // todo: add shared, local, or key-group min/max option?\n        // todo: better min/max with ignoring non-finite values\n        // todo: allow this to come from fieldConfig min/max ? or field.state.min/max (shared)\n        let vals = s.size.field.values;\n        let minVal = Math.min(...vals);\n        let maxVal = Math.max(...vals);\n        let valRange = maxVal - minVal;\n\n        diams = Array(len);\n\n        for (let i = 0; i < vals.length; i++) {\n          let val = vals[i];\n\n          let valPct = (val - minVal) / valRange;\n          let pxArea = minPx + valPct * pxRange;\n          diams[i] = pxArea ** 0.5;\n        }\n      } else {\n        diams = Array(len).fill(s.size.fixed!);\n      }\n\n      return [\n        s.x.field.values, // X\n        s.y.field.values, // Y\n        diams, // TODO: fails for by value\n        Array(len).fill(s.color.fixed!), // TODO: fails for by value\n      ];\n    }),\n  ];\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { PanelProps } from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { config } from '@grafana/runtime';\nimport {\n  TooltipDisplayMode,\n  TooltipPlugin2,\n  UPlotChart,\n  VizLayout,\n  VizLegend,\n  VizLegendItem,\n  useStyles2,\n} from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\n\nimport { XYChartTooltip } from './XYChartTooltip';\nimport { Options } from './panelcfg.gen';\nimport { prepConfig } from './scatter';\nimport { prepSeries } from './utils';\n\ntype Props2 = PanelProps<Options>;\n\nexport const XYChartPanel2 = (props: Props2) => {\n  const styles = useStyles2(getStyles);\n\n  let { mapping, series: mappedSeries } = props.options;\n\n  // regenerate series schema when mappings or data changes\n  let series = useMemo(\n    () => prepSeries(mapping, mappedSeries, props.data.series, props.fieldConfig),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [mapping, mappedSeries, props.data.series, props.fieldConfig]\n  );\n\n  // if series changed due to mappings or data structure, re-init config & renderers\n  let { builder, prepData } = useMemo(\n    () => prepConfig(series, config.theme2),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [mapping, mappedSeries, props.data.structureRev, props.fieldConfig, props.options.tooltip]\n  );\n\n  // generate data struct for uPlot mode: 2\n  let data = useMemo(\n    () => prepData(series),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [series]\n  );\n\n  // todo: handle errors\n  let error = builder == null || data.length === 0 ? 'Err' : '';\n\n  // TODO: React.memo()\n  const renderLegend = () => {\n    if (!props.options.legend.showLegend) {\n      return null;\n    }\n\n    const items: VizLegendItem[] = [];\n\n    series.forEach((s, idx) => {\n      let yField = s.y.field;\n      let config = yField.config;\n      let custom = config.custom;\n\n      if (!custom.hideFrom?.legend) {\n        items.push({\n          yAxis: 1, // TODO: pull from y field\n          label: s.name.value,\n          color: alpha(s.color.fixed!, 1),\n          getItemKey: () => `${idx}-${s.name.value}`,\n          fieldName: yField.state?.displayName ?? yField.name,\n          disabled: yField.state?.hideFrom?.viz ?? false,\n        });\n      }\n    });\n\n    // sort series by calcs? table mode?\n\n    const { placement, displayMode, width } = props.options.legend;\n\n    return (\n      <VizLayout.Legend placement={placement} width={width}>\n        <VizLegend className={styles.legend} placement={placement} items={items} displayMode={displayMode} />\n      </VizLayout.Legend>\n    );\n  };\n\n  if (error) {\n    return (\n      <div className=\"panel-empty\">\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <VizLayout width={props.width} height={props.height} legend={renderLegend()}>\n      {(vizWidth: number, vizHeight: number) => (\n        <UPlotChart config={builder!} data={data} width={vizWidth} height={vizHeight}>\n          {props.options.tooltip.mode !== TooltipDisplayMode.None && (\n            <TooltipPlugin2\n              config={builder!}\n              hoverMode={TooltipHoverMode.xyOne}\n              render={(u, dataIdxs, seriesIdx, isPinned, dismiss) => {\n                return (\n                  <XYChartTooltip\n                    data={props.data.series}\n                    dataIdxs={dataIdxs}\n                    xySeries={series}\n                    dismiss={dismiss}\n                    isPinned={isPinned}\n                    seriesIdx={seriesIdx!}\n                  />\n                );\n              }}\n              maxWidth={props.options.tooltip.maxWidth}\n              maxHeight={props.options.tooltip.maxHeight}\n            />\n          )}\n        </UPlotChart>\n      )}\n    </VizLayout>\n  );\n};\n\nconst getStyles = () => ({\n  legend: css({\n    div: {\n      justifyContent: 'flex-start',\n    },\n  }),\n});\n","import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  SetFieldConfigOptionsArgs,\n} from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { LineStyleEditor } from '../../timeseries/LineStyleEditor';\n\nimport { FieldConfig, XYShowMode } from './panelcfg.gen';\n\nexport const DEFAULT_POINT_SIZE = 5;\n\nexport function getScatterFieldConfig(cfg: FieldConfig): SetFieldConfigOptionsArgs<FieldConfig> {\n  return {\n    standardOptions: {\n      [FieldConfigProperty.Min]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Max]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Unit]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Decimals]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.NoValue]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.DisplayName]: {\n        hideFromDefaults: true,\n      },\n\n      [FieldConfigProperty.Thresholds]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Mappings]: {\n        hideFromDefaults: true,\n      },\n\n      // TODO: this still leaves Color series by: [ Last | Min | Max ]\n      // because item.settings?.bySeriesSupport && colorMode.isByValue\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n          bySeriesSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n\n    useCustomConfig: (builder) => {\n      builder\n        .addRadio({\n          path: 'show',\n          name: 'Show',\n          defaultValue: cfg.show,\n          settings: {\n            options: [\n              { label: 'Points', value: XYShowMode.Points },\n              { label: 'Lines', value: XYShowMode.Lines },\n              { label: 'Both', value: XYShowMode.PointsAndLines },\n            ],\n          },\n        })\n        // .addGenericEditor(\n        //   {\n        //     path: 'pointSymbol',\n        //     name: 'Point symbol',\n        //     defaultValue: defaultFieldConfig.pointSymbol ?? {\n        //       mode: 'fixed',\n        //       fixed: 'img/icons/marker/circle.svg',\n        //     },\n        //     settings: {\n        //       resourceType: MediaType.Icon,\n        //       folderName: ResourceFolderName.Marker,\n        //       placeholderText: 'Select a symbol',\n        //       placeholderValue: 'img/icons/marker/circle.svg',\n        //       showSourceRadio: false,\n        //     },\n        //     showIf: (c) => c.show !== ScatterShow.Lines,\n        //   },\n        //   SymbolEditor // ResourceDimensionEditor\n        // )\n        .addSliderInput({\n          path: 'pointSize.fixed',\n          name: 'Point size',\n          defaultValue: cfg.pointSize?.fixed ?? DEFAULT_POINT_SIZE,\n          settings: {\n            min: 1,\n            max: 100,\n            step: 1,\n          },\n          showIf: (c) => c.show !== XYShowMode.Lines,\n        })\n        .addNumberInput({\n          path: 'pointSize.min',\n          name: 'Min point size',\n          showIf: (c) => c.show !== XYShowMode.Lines,\n        })\n        .addNumberInput({\n          path: 'pointSize.max',\n          name: 'Max point size',\n          showIf: (c) => c.show !== XYShowMode.Lines,\n        })\n        // .addSliderInput({\n        //   path: 'fillOpacity',\n        //   name: 'Fill opacity',\n        //   defaultValue: 0.4, // defaultFieldConfig.fillOpacity,\n        //   settings: {\n        //     min: 0, // hidden?  or just outlines?\n        //     max: 1,\n        //     step: 0.05,\n        //   },\n        //   showIf: (c) => c.show !== ScatterShow.Lines,\n        // })\n        .addCustomEditor<void, LineStyle>({\n          id: 'lineStyle',\n          path: 'lineStyle',\n          name: 'Line style',\n          showIf: (c) => c.show !== XYShowMode.Points,\n          editor: LineStyleEditor,\n          override: LineStyleEditor,\n          process: identityOverrideProcessor,\n          shouldApply: (f) => f.type === FieldType.number,\n        })\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n          showIf: (c) => c.show !== XYShowMode.Points,\n        });\n\n      commonOptionsBuilder.addAxisConfig(builder, cfg);\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  };\n}\n","import { FieldMatcherID, FrameMatcherID, MatcherConfig, PanelModel } from '@grafana/data';\n\nimport { ScatterSeriesConfig, SeriesMapping, XYDimensionConfig, Options as PrevOptions } from '../panelcfg.gen';\n\nimport { XYSeriesConfig, Options } from './panelcfg.gen';\n\nexport const xyChartMigrationHandler = (panel: PanelModel): Options => {\n  const pluginVersion = panel?.pluginVersion ?? '';\n\n  if (pluginVersion === '') {\n    return migrateOptions(panel);\n  }\n\n  return panel.options as Options;\n};\n\nfunction migrateOptions(panel: PanelModel): Options {\n  const { dims, seriesMapping, series: oldSeries, ...cleanedOpts } = panel.options as PrevOptions;\n  const { exclude = [], frame: frameShared, x: xShared }: XYDimensionConfig = dims ?? {};\n\n  const custDefaults = panel.fieldConfig.defaults.custom;\n\n  let oldSeries2 = oldSeries;\n\n  if (seriesMapping === SeriesMapping.Auto) {\n    oldSeries2 = [\n      {\n        x: undefined,\n        y: undefined,\n      },\n    ];\n  }\n\n  /*\n  // old manual mode example\n  \"series\": [\n    {\n      \"pointColor\": {\n        \"fixed\": \"purple\"       // this becomes override for y field.config.custom.pointColor.fixed, (or config.color?)\n        \"field\": \"BMI Male\",    // ...unless another field is mapped, then ignore\n      },\n      \"pointSize\": {\n        \"field\": \"Weight Male\",\n        \"max\": 40,              // this becomes override for y field.config.custom.pointSize.max\n        \"min\": 1,               // ...and .min\n        \"fixed\": 50.5\n      },\n      \"frame\": 0,               // byIndex frame matcher\n      \"x\": \"Height Male\",       // byName field matcher, falls back to byType/number field matcher\n      \"y\": \"Weight Male\"        // byName field matcher, falls back to byType/number field matcher\n    }\n  ],\n*/\n  let i = 0;\n\n  const newSeries: XYSeriesConfig[] = oldSeries2.map(({ x, y, pointColor, pointSize, frame }: ScatterSeriesConfig) => {\n    const { fixed: colorFixed, field: colorField } = pointColor ?? {};\n    const { fixed: sizeFixed, field: sizeField, min: sizeMin, max: sizeMax } = pointSize ?? {};\n\n    let xMatcherConfig: MatcherConfig;\n    let yMatcherConfig: MatcherConfig;\n\n    // old auto mode did not require x field defined\n    if (x == null && xShared == null) {\n      // TODO: this should just be the internal default. no need to store on save model\n      xMatcherConfig = {\n        id: FieldMatcherID.byType,\n        options: 'number',\n      };\n    } else {\n      xMatcherConfig = {\n        id: FieldMatcherID.byName,\n        options: x ?? xShared,\n      };\n    }\n\n    if (y == null) {\n      // TODO: this should just be the internal default. no need to store on save model\n      yMatcherConfig = {\n        id: FieldMatcherID.byType,\n        options: 'number',\n      };\n    } else {\n      yMatcherConfig = {\n        id: FieldMatcherID.byName,\n        options: y,\n      };\n    }\n\n    if (colorField == null && colorFixed && custDefaults.pointColor?.fixed !== colorFixed) {\n      // NOTE: intentionally not using custom.pointColor.fixed\n      let hasOverride = panel.fieldConfig.overrides.some(\n        (o) =>\n          o.matcher.id === yMatcherConfig.id &&\n          o.matcher.options === yMatcherConfig.options &&\n          o.properties.some((p) => p.id === 'color')\n      );\n\n      if (!hasOverride) {\n        panel.fieldConfig.overrides.push({\n          matcher: yMatcherConfig,\n          properties: [\n            {\n              id: 'color',\n              value: {\n                mode: 'fixed',\n                fixedColor: colorFixed,\n              },\n            },\n          ],\n        });\n      }\n    }\n\n    // add field overrides for custom pointSize.fixed\n    if (sizeField == null && sizeFixed && custDefaults.pointSize?.fixed !== sizeFixed) {\n      let hasOverride = panel.fieldConfig.overrides.some(\n        (o) =>\n          o.matcher.id === yMatcherConfig.id &&\n          o.matcher.options === yMatcherConfig.options &&\n          o.properties.some((p) => p.id === 'custom.pointSize.fixed')\n      );\n\n      if (!hasOverride) {\n        panel.fieldConfig.overrides.push({\n          matcher: yMatcherConfig,\n          properties: [\n            {\n              id: 'custom.pointSize.fixed',\n              value: sizeFixed,\n            },\n          ],\n        });\n      }\n    }\n\n    if (sizeField != null) {\n      // add field overrides for custom pointSize.min\n      if (sizeMin && custDefaults.pointSize?.min !== sizeMin) {\n        let hasOverride = panel.fieldConfig.overrides.some(\n          (o) =>\n            o.matcher.id === yMatcherConfig.id &&\n            o.matcher.options === yMatcherConfig.options &&\n            o.properties.some((p) => p.id === 'custom.pointSize.min')\n        );\n\n        if (!hasOverride) {\n          panel.fieldConfig.overrides.push({\n            matcher: {\n              id: FieldMatcherID.byName,\n              options: sizeField,\n            },\n            properties: [\n              {\n                id: 'custom.pointSize.min',\n                value: sizeMin,\n              },\n            ],\n          });\n        }\n      }\n      // add field overrides for custom pointSize.min\n      if (sizeMax && custDefaults.pointSize?.max !== sizeMax) {\n        let hasOverride = panel.fieldConfig.overrides.some(\n          (o) =>\n            o.matcher.id === yMatcherConfig.id &&\n            o.matcher.options === yMatcherConfig.options &&\n            o.properties.some((p) => p.id === 'custom.pointSize.max')\n        );\n\n        if (!hasOverride) {\n          panel.fieldConfig.overrides.push({\n            matcher: {\n              id: FieldMatcherID.byName,\n              options: sizeField,\n            },\n            properties: [\n              {\n                id: 'custom.pointSize.max',\n                value: sizeMax,\n              },\n            ],\n          });\n        }\n      }\n    }\n\n    return {\n      frame: {\n        matcher: {\n          id: FrameMatcherID.byIndex,\n          options: frame ?? (seriesMapping === SeriesMapping.Manual ? i++ : frameShared ?? 0),\n        },\n      },\n      x: {\n        matcher: xMatcherConfig,\n      },\n      y: {\n        matcher: yMatcherConfig,\n        ...(exclude.length && {\n          exclude: {\n            id: FieldMatcherID.byNames,\n            options: exclude,\n          },\n        }),\n      },\n      ...(colorField && {\n        color: {\n          matcher: {\n            id: FieldMatcherID.byName,\n            options: colorField,\n          },\n        },\n      }),\n      ...(sizeField && {\n        size: {\n          matcher: {\n            id: FieldMatcherID.byName,\n            options: sizeField,\n          },\n        },\n      }),\n    };\n  });\n\n  const newOptions: Options = {\n    ...cleanedOpts,\n    mapping: seriesMapping === SeriesMapping.Auto ? SeriesMapping.Auto : SeriesMapping.Manual,\n    series: newSeries,\n  };\n\n  return newOptions;\n}\n","import { PanelPlugin } from '@grafana/data';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { SeriesEditor } from './SeriesEditor';\nimport { XYChartPanel2 } from './XYChartPanel';\nimport { getScatterFieldConfig } from './config';\nimport { xyChartMigrationHandler } from './migrations';\nimport { FieldConfig, defaultFieldConfig, Options } from './panelcfg.gen';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(XYChartPanel2)\n  // .setPanelChangeHandler(xyChartChangeHandler)\n  .setMigrationHandler(xyChartMigrationHandler)\n  .useFieldConfig(getScatterFieldConfig(defaultFieldConfig))\n  .setPanelOptions((builder) => {\n    builder\n      .addRadio({\n        path: 'mapping',\n        name: 'Series mapping',\n        defaultValue: 'auto',\n        settings: {\n          options: [\n            { value: 'auto', label: 'Auto' },\n            { value: 'manual', label: 'Manual' },\n          ],\n        },\n      })\n      .addCustomEditor({\n        id: 'series',\n        path: 'series',\n        name: '',\n        editor: SeriesEditor,\n        defaultValue: [{}],\n      });\n\n    commonOptionsBuilder.addTooltipOptions(builder, true);\n    commonOptionsBuilder.addLegendOptions(builder);\n  });\n"],"names":["LayerName","name","onChange","verifyLayerNameUniqueness","overrideStyles","styles","getStyles","isEditing","setIsEditing","validationError","setValidationError","onEditLayer","event","onEndEditName","newName","onInputChange","onEditLayerBlur","onKeyDown","onFocus","theme","SeriesMapping","ScatterShow","defaultXYDimensionConfig","defaultFieldConfig","defaultOptions","XYShowMode","defaultMatcherConfig","SeriesEditor","seriesCfg","context","style","mapping","prevMapping","usePrevious","mappingChanged","defaultFrame","selectedIdx","setSelectedIdx","addSeries","deleteSeries","index","s","i","series","formKey","baseNameMode","frame","frameIndex","field","fieldIndex","Button","e","v","IconButton","Field","Select","opt","FieldNamePicker","fieldName","fmt","val","getFrameMatcher2","config","prepSeries","mappedSeries","frames","fieldConfig","palette","getColorByName","seriesIdx","xMatcher","yMatcher","colorMatcher","sizeMatcher","frameMatcher","frameIdx","restFields","frameSeries","onlyNumFields","x","color","size","y","ser","paletteIdx","colorCfg","value","autoNameSeries","names","prefix","suffix","findCommonPrefixSuffixLengths","getCommonPrefixSuffix","strs","n","parts","commonPrefixLen","commonSuffixLen","segs0","segs","preLen","j","sufLen","stripSeriesName","seriesName","XYChartTooltip","dataIdxs","data","xySeries","dismiss","isPinned","rowIndex","idx","xField","yField","sizeField","colorField","label","seriesColor","headerItem","contentItems","footer","links","VizTooltipFooter","VizTooltipHeader","VizTooltipContent","prepConfig","qt","hRect","drawBubblesFactory","opts","u","idx0","idx1","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","rect","arc","pxRatio","scatterInfo","d","showLine","showPoints","strokeWidth","deg360","xKey","yKey","pointHints","colorByValue","maxSize","filtLft","filtRgt","filtBtm","filtTop","sizes","pointColors","pointAlpha","linePath","curColor","xVal","yVal","cx","cy","lineStyle","drawBubbles","dataIdx","lft","top","wid","hgt","builder","UPlotConfigBuilder","dist","o","ocx","ocy","dx","dy","r","customConfig","scaleDistr","xAxisLabel","dispNames","xAxisAutoLabel","decimals","si","lineColor","pointColor","scaleKey","yAxisLabel","yAxisAutoLabel","prepData","len","diams","min","max","minPx","pxRange","vals","minVal","valRange","valPct","pxArea","XYChartPanel2","props","error","renderLegend","items","placement","displayMode","width","VizLayout","VizLegend","vizWidth","vizHeight","TooltipPlugin2","DEFAULT_POINT_SIZE","getScatterFieldConfig","cfg","c","LineStyleEditor","f","xyChartMigrationHandler","panel","migrateOptions","dims","seriesMapping","oldSeries","cleanedOpts","exclude","frameShared","xShared","custDefaults","oldSeries2","newSeries","pointSize","colorFixed","sizeFixed","sizeMin","sizeMax","xMatcherConfig","yMatcherConfig","p","PanelPlugin"],"sourceRoot":""}