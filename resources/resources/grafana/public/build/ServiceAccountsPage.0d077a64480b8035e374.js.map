{"version":3,"file":"ServiceAccountsPage.0d077a64480b8035e374.js","mappings":"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","sources":["webpack://grafana/./public/app/features/serviceaccounts/components/ServiceAccountsListItem.tsx","webpack://grafana/./public/app/features/serviceaccounts/ServiceAccountsListPage.tsx","webpack://grafana/./public/app/features/serviceaccounts/components/CreateTokenModal.tsx","webpack://grafana/./public/app/features/serviceaccounts/state/actions.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport React, { memo } from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport { Button, Icon, IconButton, Stack, useStyles2 } from '@grafana/ui';\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/src/unstable';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { contextSrv } from 'app/core/core';\nimport { OrgRolePicker } from 'app/features/admin/OrgRolePicker';\nimport { AccessControlAction, Role, ServiceAccountDTO } from 'app/types';\n\ntype ServiceAccountListItemProps = {\n  serviceAccount: ServiceAccountDTO;\n  onRoleChange: (role: OrgRole, serviceAccount: ServiceAccountDTO) => void;\n  roleOptions: Role[];\n  onRemoveButtonClick: (serviceAccount: ServiceAccountDTO) => void;\n  onDisable: (serviceAccount: ServiceAccountDTO) => void;\n  onEnable: (serviceAccount: ServiceAccountDTO) => void;\n  onAddTokenClick: (serviceAccount: ServiceAccountDTO) => void;\n};\n\nconst getServiceAccountsAriaLabel = (name: string) => {\n  return `Edit service account's ${name} details`;\n};\n\nconst ServiceAccountListItemComponent = memo(\n  ({\n    serviceAccount,\n    onRoleChange,\n    roleOptions,\n    onRemoveButtonClick,\n    onDisable,\n    onEnable,\n    onAddTokenClick,\n  }: ServiceAccountListItemProps) => {\n    const editUrl = `org/serviceaccounts/${serviceAccount.id}`;\n    const styles = useStyles2(getStyles);\n    const canUpdateRole = contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount);\n    const displayRolePicker =\n      contextSrv.hasPermission(AccessControlAction.ActionRolesList) &&\n      contextSrv.hasPermission(AccessControlAction.ActionUserRolesList);\n\n    return (\n      <tr key={serviceAccount.id} className={cx({ [styles.disabled]: serviceAccount.isDisabled })}>\n        <td className=\"width-4 text-center link-td\">\n          <a href={editUrl} aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}>\n            <img\n              className=\"filter-table__avatar\"\n              src={serviceAccount.avatarUrl}\n              alt={`Avatar for user ${serviceAccount.name}`}\n            />\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title={serviceAccount.name}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.name}\n          </a>\n        </td>\n        <td className=\"link-td max-width-10\">\n          <a\n            className={styles.accountId}\n            href={editUrl}\n            title={serviceAccount.login}\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            {serviceAccount.login}\n          </a>\n        </td>\n        {contextSrv.licensedAccessControlEnabled() ? (\n          <td>\n            {displayRolePicker && (\n              <UserRolePicker\n                userId={serviceAccount.id}\n                orgId={serviceAccount.orgId}\n                basicRole={serviceAccount.role}\n                roles={serviceAccount.roles || []}\n                onBasicRoleChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n                roleOptions={roleOptions}\n                basicRoleDisabled={!canUpdateRole}\n                disabled={serviceAccount.isExternal || serviceAccount.isDisabled}\n                width={40}\n              />\n            )}\n          </td>\n        ) : (\n          <td>\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={serviceAccount.role}\n              disabled={serviceAccount.isExternal || !canUpdateRole || serviceAccount.isDisabled}\n              onChange={(newRole) => onRoleChange(newRole, serviceAccount)}\n            />\n          </td>\n        )}\n        <td className=\"link-td max-width-10\">\n          <a\n            className=\"ellipsis\"\n            href={editUrl}\n            title=\"Tokens\"\n            aria-label={getServiceAccountsAriaLabel(serviceAccount.name)}\n          >\n            <div className={cx(styles.tokensInfo, { [styles.tokensInfoSecondary]: !serviceAccount.tokens })}>\n              <span>\n                <Icon name=\"key-skeleton-alt\"></Icon>\n              </span>\n              {serviceAccount.tokens || 'No tokens'}\n            </div>\n          </a>\n        </td>\n        <td>\n          {!serviceAccount.isExternal && (\n            <Stack alignItems=\"center\" justifyContent=\"flex-end\">\n              {contextSrv.hasPermission(AccessControlAction.ServiceAccountsWrite) && !serviceAccount.tokens && (\n                <Button\n                  onClick={() => onAddTokenClick(serviceAccount)}\n                  disabled={serviceAccount.isDisabled}\n                  className={styles.actionButton}\n                >\n                  Add token\n                </Button>\n              )}\n              {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsWrite, serviceAccount) &&\n                (serviceAccount.isDisabled ? (\n                  <Button variant=\"primary\" onClick={() => onEnable(serviceAccount)} className={styles.actionButton}>\n                    Enable\n                  </Button>\n                ) : (\n                  <Button variant=\"secondary\" onClick={() => onDisable(serviceAccount)} className={styles.actionButton}>\n                    Disable\n                  </Button>\n                ))}\n              {contextSrv.hasPermissionInMetadata(AccessControlAction.ServiceAccountsDelete, serviceAccount) && (\n                <IconButton\n                  className={styles.deleteButton}\n                  name=\"trash-alt\"\n                  size=\"md\"\n                  onClick={() => onRemoveButtonClick(serviceAccount)}\n                  tooltip={`Delete service account ${serviceAccount.name}`}\n                />\n              )}\n            </Stack>\n          )}\n          {serviceAccount.isExternal && (\n            <Stack alignItems=\"center\" justifyContent=\"flex-end\">\n              <IconButton\n                disabled={true}\n                name=\"lock\"\n                size=\"md\"\n                tooltip={`This is a managed service account and cannot be modified.`}\n              />\n            </Stack>\n          )}\n        </td>\n      </tr>\n    );\n  }\n);\nServiceAccountListItemComponent.displayName = 'ServiceAccountListItem';\n\nconst ServiceAccountsListItemSkeleton: SkeletonComponent = ({ rootProps }) => {\n  const styles = useStyles2(getSkeletonStyles);\n\n  return (\n    <tr {...rootProps}>\n      <td className=\"width-4 text-center\">\n        <Skeleton containerClassName={styles.blockSkeleton} circle width={25} height={25} />\n      </td>\n      <td className=\"max-width-10\">\n        <Skeleton width={100} />\n      </td>\n      <td className=\"max-width-10\">\n        <Skeleton width={100} />\n      </td>\n      <td>\n        <Skeleton containerClassName={styles.blockSkeleton} width=\"100%\" height={32} />\n      </td>\n      <td className=\"max-width-10\">\n        <Skeleton width={40} />\n      </td>\n      <td>\n        <Stack alignItems=\"center\" justifyContent=\"flex-end\">\n          <Skeleton containerClassName={styles.blockSkeleton} width={102} height={32} />\n          <Skeleton containerClassName={styles.blockSkeleton} width={85} height={32} />\n          <Skeleton containerClassName={cx(styles.blockSkeleton, styles.deleteButton)} width={16} height={16} />\n        </Stack>\n      </td>\n    </tr>\n  );\n};\n\nconst ServiceAccountListItem = attachSkeleton(ServiceAccountListItemComponent, ServiceAccountsListItemSkeleton);\n\nconst getSkeletonStyles = (theme: GrafanaTheme2) => ({\n  blockSkeleton: css({\n    display: 'block',\n    lineHeight: 1,\n  }),\n  deleteButton: css({\n    marginRight: theme.spacing(0.5),\n  }),\n});\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    iconRow: css({\n      svg: {\n        marginLeft: theme.spacing(0.5),\n      },\n    }),\n    accountId: cx(\n      'ellipsis',\n      css({\n        color: theme.colors.text.secondary,\n      })\n    ),\n    deleteButton: css({\n      color: theme.colors.text.secondary,\n    }),\n    tokensInfo: css({\n      span: {\n        marginRight: theme.spacing(1),\n      },\n    }),\n    tokensInfoSecondary: css({\n      color: theme.colors.text.secondary,\n    }),\n    disabled: css({\n      'td a': {\n        color: theme.colors.text.secondary,\n      },\n    }),\n    actionButton: css({\n      minWidth: 85,\n    }),\n  };\n};\n\nexport default ServiceAccountListItem;\n","import { css, cx } from '@emotion/css';\nimport pluralize from 'pluralize';\nimport React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2, OrgRole } from '@grafana/data';\nimport {\n  ConfirmModal,\n  FilterInput,\n  LinkButton,\n  RadioButtonGroup,\n  useStyles2,\n  InlineField,\n  Pagination,\n  Stack,\n  EmptyState,\n} from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { t } from 'app/core/internationalization';\nimport { StoreState, ServiceAccountDTO, AccessControlAction, ServiceAccountStateFilter } from 'app/types';\n\nimport { CreateTokenModal, ServiceAccountToken } from './components/CreateTokenModal';\nimport ServiceAccountListItem from './components/ServiceAccountsListItem';\nimport {\n  changeQuery,\n  changePage,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n} from './state/actions';\n\ninterface OwnProps {}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    ...state.serviceAccounts,\n  };\n}\n\nconst mapDispatchToProps = {\n  changePage,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nconst availableFilters = [\n  { label: 'All', value: ServiceAccountStateFilter.All },\n  { label: 'With expired tokens', value: ServiceAccountStateFilter.WithExpiredTokens },\n  { label: 'Disabled', value: ServiceAccountStateFilter.Disabled },\n];\n\nif (config.featureToggles.externalServiceAccounts) {\n  availableFilters.push({ label: 'Managed', value: ServiceAccountStateFilter.External });\n}\n\nexport const ServiceAccountsListPageUnconnected = ({\n  page,\n  changePage,\n  totalPages,\n  serviceAccounts,\n  isLoading,\n  roleOptions,\n  query,\n  serviceAccountStateFilter,\n  changeQuery,\n  fetchACOptions,\n  fetchServiceAccounts,\n  deleteServiceAccount,\n  updateServiceAccount,\n  changeStateFilter,\n  createServiceAccountToken,\n}: Props): JSX.Element => {\n  const styles = useStyles2(getStyles);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [isRemoveModalOpen, setIsRemoveModalOpen] = useState(false);\n  const [isDisableModalOpen, setIsDisableModalOpen] = useState(false);\n  const [newToken, setNewToken] = useState('');\n  const [currentServiceAccount, setCurrentServiceAccount] = useState<ServiceAccountDTO | null>(null);\n\n  useEffect(() => {\n    fetchServiceAccounts({ withLoadingIndicator: true });\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  }, [fetchACOptions, fetchServiceAccounts]);\n\n  const noServiceAccountsCreated =\n    serviceAccounts.length === 0 && serviceAccountStateFilter === ServiceAccountStateFilter.All && !query;\n\n  const onRoleChange = async (role: OrgRole, serviceAccount: ServiceAccountDTO) => {\n    const updatedServiceAccount = { ...serviceAccount, role: role };\n    updateServiceAccount(updatedServiceAccount);\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchACOptions();\n    }\n  };\n\n  const onQueryChange = (value: string) => {\n    changeQuery(value);\n  };\n\n  const onStateFilterChange = (value: ServiceAccountStateFilter) => {\n    changeStateFilter(value);\n  };\n\n  const onRemoveButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsRemoveModalOpen(true);\n  };\n\n  const onServiceAccountRemove = async () => {\n    if (currentServiceAccount) {\n      deleteServiceAccount(currentServiceAccount.id);\n    }\n    onRemoveModalClose();\n  };\n\n  const onDisableButtonClick = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsDisableModalOpen(true);\n  };\n\n  const onDisable = () => {\n    if (currentServiceAccount) {\n      updateServiceAccount({ ...currentServiceAccount, isDisabled: true });\n    }\n    onDisableModalClose();\n  };\n\n  const onEnable = (serviceAccount: ServiceAccountDTO) => {\n    updateServiceAccount({ ...serviceAccount, isDisabled: false });\n  };\n\n  const onTokenAdd = (serviceAccount: ServiceAccountDTO) => {\n    setCurrentServiceAccount(serviceAccount);\n    setIsAddModalOpen(true);\n  };\n\n  const onTokenCreate = async (token: ServiceAccountToken) => {\n    if (currentServiceAccount) {\n      createServiceAccountToken(currentServiceAccount.id, token, setNewToken);\n    }\n  };\n\n  const onAddModalClose = () => {\n    setIsAddModalOpen(false);\n    setCurrentServiceAccount(null);\n    setNewToken('');\n  };\n\n  const onRemoveModalClose = () => {\n    setIsRemoveModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const onDisableModalClose = () => {\n    setIsDisableModalOpen(false);\n    setCurrentServiceAccount(null);\n  };\n\n  const docsLink = (\n    <a\n      className=\"external-link\"\n      href=\"https://grafana.com/docs/grafana/latest/administration/service-accounts/\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      documentation.\n    </a>\n  );\n  const subTitle = (\n    <span>\n      Service accounts and their tokens can be used to authenticate against the Grafana API. Find out more in our{' '}\n      {docsLink}\n    </span>\n  );\n\n  return (\n    <Page\n      navId=\"serviceaccounts\"\n      subTitle={subTitle}\n      actions={\n        <>\n          {!noServiceAccountsCreated && contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate) && (\n            <LinkButton href=\"org/serviceaccounts/create\" variant=\"primary\">\n              Add service account\n            </LinkButton>\n          )}\n        </>\n      }\n    >\n      <Page.Contents>\n        <div className=\"page-action-bar\">\n          <InlineField grow>\n            <FilterInput\n              placeholder=\"Search service account by name\"\n              value={query}\n              onChange={onQueryChange}\n              width={50}\n            />\n          </InlineField>\n          <RadioButtonGroup\n            options={availableFilters}\n            onChange={onStateFilterChange}\n            value={serviceAccountStateFilter}\n            className={styles.filter}\n          />\n        </div>\n        {!isLoading && !noServiceAccountsCreated && serviceAccounts.length === 0 && (\n          <EmptyState\n            variant=\"not-found\"\n            message={t('service-accounts.empty-state.message', 'No services accounts found')}\n          />\n        )}\n        {!isLoading && noServiceAccountsCreated && (\n          <>\n            <EmptyListCTA\n              title=\"You haven't created any service accounts yet.\"\n              buttonIcon=\"key-skeleton-alt\"\n              buttonLink=\"org/serviceaccounts/create\"\n              buttonTitle=\"Add service account\"\n              buttonDisabled={!contextSrv.hasPermission(AccessControlAction.ServiceAccountsCreate)}\n              proTip=\"Remember, you can provide specific permissions for API access to other applications.\"\n              proTipLink=\"\"\n              proTipLinkTitle=\"\"\n              proTipTarget=\"_blank\"\n            />\n          </>\n        )}\n\n        {(isLoading || serviceAccounts.length !== 0) && (\n          <>\n            <div className={cx(styles.table, 'admin-list-table')}>\n              <table className=\"filter-table filter-table--hover\">\n                <thead>\n                  <tr>\n                    <th></th>\n                    <th>Account</th>\n                    <th>ID</th>\n                    <th>Roles</th>\n                    <th>Tokens</th>\n                    <th style={{ width: '120px' }} />\n                  </tr>\n                </thead>\n                <tbody>\n                  {isLoading ? (\n                    <>\n                      <ServiceAccountListItem.Skeleton />\n                      <ServiceAccountListItem.Skeleton />\n                      <ServiceAccountListItem.Skeleton />\n                    </>\n                  ) : (\n                    serviceAccounts.map((serviceAccount) => (\n                      <ServiceAccountListItem\n                        serviceAccount={serviceAccount}\n                        key={serviceAccount.id}\n                        roleOptions={roleOptions}\n                        onRoleChange={onRoleChange}\n                        onRemoveButtonClick={onRemoveButtonClick}\n                        onDisable={onDisableButtonClick}\n                        onEnable={onEnable}\n                        onAddTokenClick={onTokenAdd}\n                      />\n                    ))\n                  )}\n                </tbody>\n              </table>\n\n              <Stack justifyContent=\"flex-end\">\n                <Pagination hideWhenSinglePage currentPage={page} numberOfPages={totalPages} onNavigate={changePage} />\n              </Stack>\n            </div>\n          </>\n        )}\n        {currentServiceAccount && (\n          <>\n            <ConfirmModal\n              isOpen={isRemoveModalOpen}\n              body={`Are you sure you want to delete '${currentServiceAccount.name}'${\n                !!currentServiceAccount.tokens\n                  ? ` and ${currentServiceAccount.tokens} accompanying ${pluralize(\n                      'token',\n                      currentServiceAccount.tokens\n                    )}`\n                  : ''\n              }?`}\n              confirmText=\"Delete\"\n              title=\"Delete service account\"\n              onConfirm={onServiceAccountRemove}\n              onDismiss={onRemoveModalClose}\n            />\n            <ConfirmModal\n              isOpen={isDisableModalOpen}\n              title=\"Disable service account\"\n              body={`Are you sure you want to disable '${currentServiceAccount.name}'?`}\n              confirmText=\"Disable service account\"\n              onConfirm={onDisable}\n              onDismiss={onDisableModalClose}\n            />\n            <CreateTokenModal\n              isOpen={isAddModalOpen}\n              token={newToken}\n              serviceAccountLogin={currentServiceAccount.login}\n              onCreateToken={onTokenCreate}\n              onClose={onAddModalClose}\n            />\n          </>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    table: css({\n      marginTop: theme.spacing(3),\n    }),\n    filter: css({\n      margin: `0 ${theme.spacing(1)}`,\n    }),\n    row: css({\n      display: 'flex',\n      alignItems: 'center',\n      height: '100% !important',\n\n      a: {\n        padding: `${theme.spacing(0.5)} 0 !important`,\n      },\n    }),\n    unitTooltip: css({\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    unitItem: css({\n      cursor: 'pointer',\n      padding: theme.spacing(0.5, 0),\n      marginRight: theme.spacing(1),\n    }),\n    disabled: css({\n      color: theme.colors.text.disabled,\n    }),\n    link: css({\n      color: 'inherit',\n      cursor: 'pointer',\n      textDecoration: 'underline',\n    }),\n    pageHeader: css({\n      display: 'flex',\n      marginBottom: theme.spacing(2),\n    }),\n    apiKeyInfoLabel: css({\n      marginLeft: theme.spacing(1),\n      lineHeight: 2.2,\n      flexGrow: 1,\n      color: theme.colors.text.secondary,\n\n      span: {\n        padding: theme.spacing(0.5),\n      },\n    }),\n    filterDelimiter: css({\n      flexGrow: 1,\n    }),\n  };\n};\n\nconst ServiceAccountsListPage = connector(ServiceAccountsListPageUnconnected);\nexport default ServiceAccountsListPage;\n","import { css } from '@emotion/css';\nimport React, { useEffect, useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Button,\n  ClipboardButton,\n  DatePickerWithInput,\n  Field,\n  Input,\n  Modal,\n  RadioButtonGroup,\n  useStyles2,\n} from '@grafana/ui';\n\nconst EXPIRATION_OPTIONS = [\n  { label: 'No expiration', value: false },\n  { label: 'Set expiration date', value: true },\n];\n\nexport type ServiceAccountToken = {\n  name: string;\n  secondsToLive?: number;\n};\n\ninterface Props {\n  isOpen: boolean;\n  token: string;\n  serviceAccountLogin: string;\n  onCreateToken: (token: ServiceAccountToken) => void;\n  onClose: () => void;\n}\n\nexport const CreateTokenModal = ({ isOpen, token, serviceAccountLogin, onCreateToken, onClose }: Props) => {\n  const tomorrow = new Date();\n  tomorrow.setDate(tomorrow.getDate() + 1);\n\n  const maxExpirationDate = new Date();\n  if (config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > -1) {\n    maxExpirationDate.setDate(maxExpirationDate.getDate() + config.tokenExpirationDayLimit + 1);\n  } else {\n    maxExpirationDate.setDate(8640000000000000);\n  }\n  const defaultExpirationDate = config.tokenExpirationDayLimit !== undefined && config.tokenExpirationDayLimit > 0;\n\n  const [defaultTokenName, setDefaultTokenName] = useState('');\n  const [newTokenName, setNewTokenName] = useState('');\n  const [isWithExpirationDate, setIsWithExpirationDate] = useState(defaultExpirationDate);\n  const [newTokenExpirationDate, setNewTokenExpirationDate] = useState<Date | string>(tomorrow);\n  const [isExpirationDateValid, setIsExpirationDateValid] = useState(newTokenExpirationDate !== '');\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // Generate new token name every time we open modal\n    if (isOpen) {\n      setDefaultTokenName(`${serviceAccountLogin}-${uuidv4()}`);\n    }\n  }, [serviceAccountLogin, isOpen]);\n\n  const onExpirationDateChange = (value: Date | string) => {\n    const isValid = value !== '';\n    setIsExpirationDateValid(isValid);\n    setNewTokenExpirationDate(value);\n  };\n\n  const onGenerateToken = () => {\n    onCreateToken({\n      name: newTokenName || defaultTokenName,\n      secondsToLive: isWithExpirationDate ? getSecondsToLive(newTokenExpirationDate) : undefined,\n    });\n  };\n\n  const onCloseInternal = () => {\n    setNewTokenName('');\n    setDefaultTokenName('');\n    setIsWithExpirationDate(defaultExpirationDate);\n    setNewTokenExpirationDate(tomorrow);\n    setIsExpirationDateValid(newTokenExpirationDate !== '');\n    onClose();\n  };\n\n  const modalTitle = !token ? 'Add service account token' : 'Service account token created';\n\n  return (\n    <Modal isOpen={isOpen} title={modalTitle} onDismiss={onCloseInternal} className={styles.modal}>\n      {!token ? (\n        <div>\n          <Field\n            label=\"Display name\"\n            description=\"Name to easily identify the token\"\n            // for now this is required\n            // need to make this optional in backend as well\n            required={true}\n          >\n            <Input\n              name=\"tokenName\"\n              value={newTokenName}\n              placeholder={defaultTokenName}\n              onChange={(e) => {\n                setNewTokenName(e.currentTarget.value);\n              }}\n            />\n          </Field>\n          <Field label=\"Expiration\">\n            <RadioButtonGroup\n              options={EXPIRATION_OPTIONS}\n              value={isWithExpirationDate}\n              onChange={setIsWithExpirationDate}\n              size=\"md\"\n            />\n          </Field>\n          {isWithExpirationDate && (\n            <Field label=\"Expiration date\">\n              <DatePickerWithInput\n                onChange={onExpirationDateChange}\n                value={newTokenExpirationDate}\n                placeholder=\"\"\n                minDate={tomorrow}\n                maxDate={maxExpirationDate}\n              />\n            </Field>\n          )}\n          <Modal.ButtonRow>\n            <Button onClick={onGenerateToken} disabled={isWithExpirationDate && !isExpirationDateValid}>\n              Generate token\n            </Button>\n          </Modal.ButtonRow>\n        </div>\n      ) : (\n        <>\n          <Field\n            label=\"Token\"\n            description=\"Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.\"\n          >\n            <div className={styles.modalTokenRow}>\n              <Input name=\"tokenValue\" value={token} readOnly />\n              <ClipboardButton\n                className={styles.modalCopyToClipboardButton}\n                variant=\"primary\"\n                size=\"md\"\n                icon=\"copy\"\n                getText={() => token}\n              >\n                Copy clipboard\n              </ClipboardButton>\n            </div>\n          </Field>\n          <Modal.ButtonRow>\n            <ClipboardButton variant=\"primary\" getText={() => token} onClipboardCopy={onCloseInternal}>\n              Copy to clipboard and close\n            </ClipboardButton>\n            <Button variant=\"secondary\" onClick={onCloseInternal}>\n              Close\n            </Button>\n          </Modal.ButtonRow>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nconst getSecondsToLive = (date: Date | string) => {\n  const dateAsDate = new Date(date);\n  const now = new Date();\n\n  return Math.ceil((dateAsDate.getTime() - now.getTime()) / 1000);\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    modal: css({\n      width: '550px',\n    }),\n    modalTokenRow: css({\n      display: 'flex',\n    }),\n    modalCopyToClipboardButton: css({\n      marginLeft: theme.spacing(0.5),\n    }),\n  };\n};\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AccessControlAction, ServiceAccountDTO, ServiceAccountStateFilter, ThunkResult } from 'app/types';\n\nimport { ServiceAccountToken } from '../components/CreateTokenModal';\n\nimport {\n  acOptionsLoaded,\n  pageChanged,\n  queryChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n  serviceAccountsFetchBegin,\n  serviceAccountsFetched,\n  serviceAccountsFetchEnd,\n  stateFilterChanged,\n} from './reducers';\n\nconst BASE_URL = `/api/serviceaccounts`;\n\nexport function fetchACOptions(): ThunkResult<void> {\n  return async (dispatch) => {\n    try {\n      if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n        const options = await fetchRoleOptions();\n        dispatch(acOptionsLoaded(options));\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n}\n\ninterface FetchServiceAccountsParams {\n  withLoadingIndicator: boolean;\n}\n\nexport function fetchServiceAccounts(\n  { withLoadingIndicator }: FetchServiceAccountsParams = { withLoadingIndicator: false }\n): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      if (contextSrv.hasPermission(AccessControlAction.ServiceAccountsRead)) {\n        if (withLoadingIndicator) {\n          dispatch(serviceAccountsFetchBegin());\n        }\n        const { perPage, page, query, serviceAccountStateFilter } = getState().serviceAccounts;\n        const result = await getBackendSrv().get(\n          `/api/serviceaccounts/search?perpage=${perPage}&page=${page}&query=${query}${getStateFilter(\n            serviceAccountStateFilter\n          )}&accesscontrol=true`\n        );\n\n        if (\n          contextSrv.licensedAccessControlEnabled() &&\n          contextSrv.hasPermission(AccessControlAction.ActionUserRolesList)\n        ) {\n          dispatch(rolesFetchBegin());\n          const orgId = contextSrv.user.orgId;\n          const userIds = result?.serviceAccounts.map((u: ServiceAccountDTO) => u.id);\n          const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n          result.serviceAccounts.forEach((u: ServiceAccountDTO) => {\n            u.roles = roles ? roles[u.id] || [] : [];\n          });\n          dispatch(rolesFetchEnd());\n        }\n\n        dispatch(serviceAccountsFetched(result));\n      }\n    } catch (error) {\n      console.error(error);\n    } finally {\n      dispatch(serviceAccountsFetchEnd());\n    }\n  };\n}\n\nconst fetchServiceAccountsWithDebounce = debounce((dispatch) => dispatch(fetchServiceAccounts()), 500, {\n  leading: true,\n});\n\nexport function updateServiceAccount(serviceAccount: ServiceAccountDTO): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`${BASE_URL}/${serviceAccount.id}?accesscontrol=true`, {\n      ...serviceAccount,\n    });\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function deleteServiceAccount(serviceAccountId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`${BASE_URL}/${serviceAccountId}`);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function createServiceAccountToken(\n  saID: number,\n  token: ServiceAccountToken,\n  onTokenCreated: (key: string) => void\n): ThunkResult<void> {\n  return async (dispatch) => {\n    const result = await getBackendSrv().post(`${BASE_URL}/${saID}/tokens`, token);\n    onTokenCreated(result.key);\n    dispatch(fetchServiceAccounts());\n  };\n}\n\n// search / filtering of serviceAccounts\nconst getStateFilter = (value: ServiceAccountStateFilter) => {\n  switch (value) {\n    case ServiceAccountStateFilter.WithExpiredTokens:\n      return '&expiredTokens=true';\n    case ServiceAccountStateFilter.Disabled:\n      return '&disabled=true';\n    case ServiceAccountStateFilter.External:\n      return '&external=true';\n    default:\n      return '';\n  }\n};\n\nexport function changeQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(queryChanged(query));\n    fetchServiceAccountsWithDebounce(dispatch);\n  };\n}\n\nexport function changeStateFilter(filter: ServiceAccountStateFilter): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(stateFilterChanged(filter));\n    dispatch(fetchServiceAccounts());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(fetchServiceAccounts());\n  };\n}\n"],"names":["getServiceAccountsAriaLabel","name","ServiceAccountListItemComponent","serviceAccount","onRoleChange","roleOptions","onRemoveButtonClick","onDisable","onEnable","onAddTokenClick","editUrl","styles","getStyles","canUpdateRole","displayRolePicker","UserRolePicker","newRole","OrgRolePicker","Icon","Stack","Button","IconButton","ServiceAccountsListItemSkeleton","rootProps","getSkeletonStyles","ServiceAccountListItem","theme","mapStateToProps","state","mapDispatchToProps","connector","availableFilters","config","ServiceAccountsListPageUnconnected","page","changePage","totalPages","serviceAccounts","isLoading","query","serviceAccountStateFilter","changeQuery","fetchACOptions","fetchServiceAccounts","deleteServiceAccount","updateServiceAccount","changeStateFilter","createServiceAccountToken","isAddModalOpen","setIsAddModalOpen","isRemoveModalOpen","setIsRemoveModalOpen","isDisableModalOpen","setIsDisableModalOpen","newToken","setNewToken","currentServiceAccount","setCurrentServiceAccount","noServiceAccountsCreated","role","updatedServiceAccount","onQueryChange","value","onStateFilterChange","onServiceAccountRemove","onRemoveModalClose","onDisableButtonClick","onDisableModalClose","onTokenAdd","onTokenCreate","token","onAddModalClose","docsLink","subTitle","Page","InlineField","FilterInput","RadioButtonGroup","EmptyState","EmptyListCTA","Pagination","ConfirmModal","CreateTokenModal","EXPIRATION_OPTIONS","isOpen","serviceAccountLogin","onCreateToken","onClose","tomorrow","maxExpirationDate","defaultExpirationDate","defaultTokenName","setDefaultTokenName","newTokenName","setNewTokenName","isWithExpirationDate","setIsWithExpirationDate","newTokenExpirationDate","setNewTokenExpirationDate","isExpirationDateValid","setIsExpirationDateValid","onExpirationDateChange","onGenerateToken","getSecondsToLive","onCloseInternal","modalTitle","e","date","dateAsDate","now","BASE_URL","dispatch","options","error","withLoadingIndicator","getState","perPage","result","getStateFilter","orgId","userIds","u","roles","fetchServiceAccountsWithDebounce","serviceAccountId","saID","onTokenCreated","filter"],"sourceRoot":""}