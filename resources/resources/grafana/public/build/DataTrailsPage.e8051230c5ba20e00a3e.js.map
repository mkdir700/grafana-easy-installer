{"version":3,"file":"DataTrailsPage.e8051230c5ba20e00a3e.js","mappings":"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","sources":["webpack://grafana/./public/app/features/trails/DataTrailCard.tsx","webpack://grafana/./public/app/features/trails/DataTrailsHome.tsx","webpack://grafana/./public/app/features/trails/DataTrailsApp.tsx","webpack://grafana/./public/app/features/trails/DataTrailsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { dateTimeFormat, GrafanaTheme2 } from '@grafana/data';\nimport { AdHocFiltersVariable, sceneGraph } from '@grafana/scenes';\nimport { Card, IconButton, Stack, Tag, useStyles2 } from '@grafana/ui';\n\nimport { DataTrail } from './DataTrail';\nimport { VAR_FILTERS } from './shared';\nimport { getDataSource, getDataSourceName, getMetricName } from './utils';\n\nexport interface Props {\n  trail: DataTrail;\n  onSelect: (trail: DataTrail) => void;\n  onDelete?: () => void;\n}\n\nexport function DataTrailCard({ trail, onSelect, onDelete }: Props) {\n  const styles = useStyles2(getStyles);\n\n  const filtersVariable = sceneGraph.lookupVariable(VAR_FILTERS, trail)!;\n  if (!(filtersVariable instanceof AdHocFiltersVariable)) {\n    return null;\n  }\n\n  const filters = filtersVariable.state.filters;\n  const dsValue = getDataSource(trail);\n\n  const onClick = () => onSelect(trail);\n\n  return (\n    <Card onClick={onClick} className={styles.card}>\n      <Card.Heading>{getMetricName(trail.state.metric)}</Card.Heading>\n      <div className={styles.description}>\n        <Stack gap={1.5} wrap=\"wrap\">\n          {filters.map((f) => (\n            <Tag key={f.key} name={`${f.key}: ${f.value}`} colorIndex={12} />\n          ))}\n        </Stack>\n      </div>\n      <Card.Actions className={styles.actions}>\n        <Stack gap={1} justifyContent={'space-between'} grow={1}>\n          <div className={styles.secondary}>\n            <b>Datasource:</b> {getDataSourceName(dsValue)}\n          </div>\n          {trail.state.createdAt && (\n            <i className={styles.secondary}>\n              <b>Created:</b> {dateTimeFormat(trail.state.createdAt, { format: 'LL' })}\n            </i>\n          )}\n        </Stack>\n      </Card.Actions>\n      {onDelete && (\n        <Card.SecondaryActions>\n          <IconButton\n            key=\"delete\"\n            name=\"trash-alt\"\n            className={styles.secondary}\n            tooltip=\"Remove bookmark\"\n            onClick={onDelete}\n          />\n        </Card.SecondaryActions>\n      )}\n    </Card>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    tag: css({\n      maxWidth: '260px',\n      overflow: 'hidden',\n      textOverflow: 'ellipsis',\n    }),\n    card: css({\n      padding: theme.spacing(1),\n    }),\n    secondary: css({\n      color: theme.colors.text.secondary,\n      fontSize: '12px',\n    }),\n    description: css({\n      width: '100%',\n      gridArea: 'Description',\n      margin: theme.spacing(1, 0, 0),\n      color: theme.colors.text.secondary,\n      lineHeight: theme.typography.body.lineHeight,\n    }),\n    actions: css({\n      marginRight: theme.spacing(1),\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneComponentProps, sceneGraph, SceneObject, SceneObjectBase, SceneObjectState } from '@grafana/scenes';\nimport { Button, Stack, useStyles2 } from '@grafana/ui';\nimport { Text } from '@grafana/ui/src/components/Text/Text';\n\nimport { DataTrail } from './DataTrail';\nimport { DataTrailCard } from './DataTrailCard';\nimport { DataTrailsApp } from './DataTrailsApp';\nimport { getTrailStore } from './TrailStore/TrailStore';\nimport { reportExploreMetrics } from './interactions';\nimport { getDatasourceForNewTrail, getUrlForTrail, newMetricsTrail } from './utils';\n\nexport interface DataTrailsHomeState extends SceneObjectState {}\n\nexport class DataTrailsHome extends SceneObjectBase<DataTrailsHomeState> {\n  public constructor(state: DataTrailsHomeState) {\n    super(state);\n  }\n\n  public onNewMetricsTrail = () => {\n    const app = getAppFor(this);\n    const trail = newMetricsTrail(getDatasourceForNewTrail());\n    reportExploreMetrics('exploration_started', { cause: 'new_clicked' });\n    getTrailStore().setRecentTrail(trail);\n    app.goToUrlForTrail(trail);\n  };\n\n  public onSelectTrail = (trail: DataTrail, isBookmark: boolean) => {\n    const app = getAppFor(this);\n    reportExploreMetrics('exploration_started', { cause: isBookmark ? 'bookmark_clicked' : 'recent_clicked' });\n    getTrailStore().setRecentTrail(trail);\n    app.goToUrlForTrail(trail);\n  };\n\n  static Component = ({ model }: SceneComponentProps<DataTrailsHome>) => {\n    const [_, setLastDelete] = useState(Date.now());\n    const styles = useStyles2(getStyles);\n\n    const onDelete = (index: number) => {\n      getTrailStore().removeBookmark(index);\n      reportExploreMetrics('bookmark_changed', { action: 'deleted' });\n      setLastDelete(Date.now()); // trigger re-render\n    };\n\n    // If there are no recent trails, don't show home page and create a new trail\n    if (!getTrailStore().recent.length) {\n      const trail = newMetricsTrail(getDatasourceForNewTrail());\n      return <Redirect to={getUrlForTrail(trail)} />;\n    }\n\n    const onSelectRecent = (trail: DataTrail) => model.onSelectTrail(trail, false);\n    const onSelectBookmark = (trail: DataTrail) => model.onSelectTrail(trail, true);\n\n    return (\n      <div className={styles.container}>\n        <Stack direction={'column'} gap={1} alignItems={'start'}>\n          <Button icon=\"plus\" size=\"md\" variant=\"primary\" onClick={model.onNewMetricsTrail}>\n            New metric exploration\n          </Button>\n        </Stack>\n\n        <Stack gap={5}>\n          <div className={styles.column}>\n            <Text variant=\"h4\">Recent metrics</Text>\n            <div className={styles.trailList}>\n              {getTrailStore().recent.map((trail, index) => {\n                const resolvedTrail = trail.resolve();\n                return (\n                  <DataTrailCard\n                    key={(resolvedTrail.state.key || '') + index}\n                    trail={resolvedTrail}\n                    onSelect={onSelectRecent}\n                  />\n                );\n              })}\n            </div>\n          </div>\n          <div className={styles.verticalLine} />\n          <div className={styles.column}>\n            <Text variant=\"h4\">Bookmarks</Text>\n            <div className={styles.trailList}>\n              {getTrailStore().bookmarks.map((trail, index) => {\n                const resolvedTrail = trail.resolve();\n                return (\n                  <DataTrailCard\n                    key={(resolvedTrail.state.key || '') + index}\n                    trail={resolvedTrail}\n                    onSelect={onSelectBookmark}\n                    onDelete={() => onDelete(index)}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        </Stack>\n      </div>\n    );\n  };\n}\n\nfunction getAppFor(model: SceneObject) {\n  return sceneGraph.getAncestor(model, DataTrailsApp);\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    container: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(3),\n    }),\n    column: css({\n      display: 'flex',\n      flexGrow: 1,\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n    }),\n    newTrail: css({\n      height: 'auto',\n      justifyContent: 'center',\n      fontSize: theme.typography.h5.fontSize,\n    }),\n    trailCard: css({}),\n    trailList: css({\n      display: 'flex',\n      flexDirection: 'column',\n      gap: theme.spacing(2),\n    }),\n    verticalLine: css({\n      borderLeft: `1px solid ${theme.colors.border.weak}`,\n    }),\n  };\n}\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport { GrafanaTheme2, PageLayoutType } from '@grafana/data';\nimport { locationService } from '@grafana/runtime';\nimport { SceneComponentProps, SceneObjectBase, SceneObjectState, getUrlSyncManager } from '@grafana/scenes';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { DataTrail } from './DataTrail';\nimport { DataTrailsHome } from './DataTrailsHome';\nimport { MetricsHeader } from './MetricsHeader';\nimport { getTrailStore } from './TrailStore/TrailStore';\nimport { HOME_ROUTE, TRAILS_ROUTE } from './shared';\nimport { getMetricName, getUrlForTrail, newMetricsTrail } from './utils';\n\nexport interface DataTrailsAppState extends SceneObjectState {\n  trail: DataTrail;\n  home: DataTrailsHome;\n}\n\nexport class DataTrailsApp extends SceneObjectBase<DataTrailsAppState> {\n  public constructor(state: DataTrailsAppState) {\n    super(state);\n  }\n\n  goToUrlForTrail(trail: DataTrail) {\n    this.setState({ trail });\n    locationService.push(getUrlForTrail(trail));\n  }\n\n  static Component = ({ model }: SceneComponentProps<DataTrailsApp>) => {\n    const { trail, home } = model.useState();\n    const styles = useStyles2(getStyles);\n\n    return (\n      <Switch>\n        <Route\n          exact={true}\n          path={HOME_ROUTE}\n          render={() => (\n            <Page\n              navId=\"explore/metrics\"\n              layout={PageLayoutType.Standard}\n              renderTitle={() => <MetricsHeader />}\n              subTitle=\"\"\n            >\n              <home.Component model={home} />\n            </Page>\n          )}\n        />\n        <Route\n          exact={true}\n          path={TRAILS_ROUTE}\n          render={() => (\n            <Page\n              navId=\"explore/metrics\"\n              pageNav={{ text: getMetricName(trail.state.metric) }}\n              layout={PageLayoutType.Custom}\n            >\n              <div className={styles.customPage}>\n                <DataTrailView trail={trail} />\n              </div>\n            </Page>\n          )}\n        />\n      </Switch>\n    );\n  };\n}\n\nfunction DataTrailView({ trail }: { trail: DataTrail }) {\n  const [isInitialized, setIsInitialized] = React.useState(false);\n\n  useEffect(() => {\n    if (!isInitialized) {\n      getTrailStore().setRecentTrail(trail);\n      setIsInitialized(true);\n    }\n  }, [trail, isInitialized]);\n\n  if (!isInitialized) {\n    return null;\n  }\n\n  return <trail.Component model={trail} />;\n}\n\nlet dataTrailsApp: DataTrailsApp;\n\nexport function getDataTrailsApp() {\n  if (!dataTrailsApp) {\n    dataTrailsApp = new DataTrailsApp({\n      trail: getInitialTrail(),\n      home: new DataTrailsHome({}),\n    });\n  }\n\n  return dataTrailsApp;\n}\n\n/**\n * Get the initial trail for the app to work with based on the current URL\n *\n * It will either be a new trail that will be started based on the state represented\n * in the URL parameters, or it will be the most recently used trail (according to the trail store)\n * which has its current history step matching the URL parameters.\n *\n * The reason for trying to reinitialize from the recent trail is to resolve an issue\n * where refreshing the browser would wipe the step history. This allows you to preserve\n * it between browser refreshes, or when reaccessing the same URL.\n */\nfunction getInitialTrail() {\n  const newTrail = newMetricsTrail();\n\n  // Set the initial state of the newTrail based on the URL,\n  // In case we are initializing from an externally created URL or a page reload\n  getUrlSyncManager().initSync(newTrail);\n  // Remove the URL sync for now. It will be restored on the trail if it is activated.\n  getUrlSyncManager().cleanUp(newTrail);\n\n  // If one of the recent trails is a match to the newTrail derived from the current URL,\n  // let's restore that trail so that a page refresh doesn't create a new trail.\n  const recentMatchingTrail = getTrailStore().findMatchingRecentTrail(newTrail)?.resolve();\n\n  // If there is a matching trail, initialize with that. Otherwise, use the new trail.\n  return recentMatchingTrail || newTrail;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    customPage: css({\n      padding: theme.spacing(2, 3, 2, 3),\n      background: theme.isLight ? theme.colors.background.primary : theme.colors.background.canvas,\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n  };\n}\n","// Libraries\nimport React from 'react';\n\nimport { getDataTrailsApp } from './DataTrailsApp';\n\nexport function DataTrailsPage() {\n  const app = getDataTrailsApp();\n  return <app.Component model={app} />;\n}\n\nexport default DataTrailsPage;\n"],"names":["DataTrailCard","trail","onSelect","onDelete","styles","getStyles","filtersVariable","filters","dsValue","onClick","Card","Stack","f","Tag","IconButton","theme","DataTrailsHome","state","app","getAppFor","isBookmark","model","_","setLastDelete","index","onSelectRecent","onSelectBookmark","Button","Text","resolvedTrail","DataTrailsApp","home","Page","MetricsHeader","DataTrailView","isInitialized","setIsInitialized","dataTrailsApp","getDataTrailsApp","getInitialTrail","newTrail","DataTrailsPage"],"sourceRoot":""}