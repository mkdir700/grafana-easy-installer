{"version":3,"file":"AlertGroups.620ef2c6f29a024f9fff.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertStateFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/GroupBy.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useFilteredAmGroups.ts","webpack://grafana/./public/app/features/alerting/unified/hooks/useGroupedAlerts.ts","webpack://grafana/./public/app/features/alerting/unified/AlertGroups.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Authorize.tsx","webpack://grafana/./public/app/features/alerting/unified/components/CollapseToggle.tsx","webpack://grafana/./public/app/features/alerting/unified/components/Strong.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/notifications.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupHeader.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx"],"sourcesContent":["import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { RadioButtonGroup, Label } from '@grafana/ui';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  stateFilter?: AlertState;\n  onStateFilterChange: (value: AlertState) => void;\n}\n\nexport const AlertStateFilter = ({ onStateFilterChange, stateFilter }: Props) => {\n  const alertStateOptions: SelectableValue[] = Object.entries(AlertState)\n    .sort(([labelA], [labelB]) => (labelA < labelB ? -1 : 1))\n    .map(([label, state]) => ({\n      label,\n      value: state,\n    }));\n\n  return (\n    <div>\n      <Label>State</Label>\n      <RadioButtonGroup options={alertStateOptions} value={stateFilter} onChange={onStateFilterChange} />\n    </div>\n  );\n};\n","import { uniq } from 'lodash';\nimport React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Icon, Label, MultiSelect } from '@grafana/ui';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n  groupBy: string[];\n  onGroupingChange: (keys: string[]) => void;\n}\n\nexport const GroupBy = ({ groups, groupBy, onGroupingChange }: Props) => {\n  const labelKeyOptions = uniq(groups.flatMap((group) => group.alerts).flatMap(({ labels }) => Object.keys(labels)))\n    .filter((label) => !(label.startsWith('__') && label.endsWith('__'))) // Filter out private labels\n    .map<SelectableValue>((key) => ({\n      label: key,\n      value: key,\n    }));\n\n  return (\n    <div data-testid={'group-by-container'}>\n      <Label>Custom group by</Label>\n      <MultiSelect\n        aria-label={'group by label keys'}\n        value={groupBy}\n        placeholder=\"Group by\"\n        prefix={<Icon name={'tag-alt'} />}\n        onChange={(items) => {\n          onGroupingChange(items.map(({ value }) => value as string));\n        }}\n        options={labelKeyOptions}\n        width={34}\n      />\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getFiltersFromUrlParams } from '../../utils/misc';\n\nimport { AlertStateFilter } from './AlertStateFilter';\nimport { GroupBy } from './GroupBy';\nimport { MatcherFilter } from './MatcherFilter';\n\ninterface Props {\n  groups: AlertmanagerGroup[];\n}\n\nexport const AlertGroupFilter = ({ groups }: Props) => {\n  const [filterKey, setFilterKey] = useState<number>(Math.floor(Math.random() * 100));\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { groupBy = [], queryString, alertState } = getFiltersFromUrlParams(queryParams);\n  const matcherFilterKey = `matcher-${filterKey}`;\n\n  const styles = useStyles2(getStyles);\n\n  const clearFilters = () => {\n    setQueryParams({\n      groupBy: null,\n      queryString: null,\n      alertState: null,\n    });\n    setTimeout(() => setFilterKey(filterKey + 1), 100);\n  };\n\n  const showClearButton = !!(groupBy.length > 0 || queryString || alertState);\n\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.filterSection}>\n        <MatcherFilter\n          key={matcherFilterKey}\n          defaultQueryString={queryString}\n          onFilterChange={(value) => setQueryParams({ queryString: value ? value : null })}\n        />\n        <GroupBy\n          groups={groups}\n          groupBy={groupBy}\n          onGroupingChange={(keys) => setQueryParams({ groupBy: keys.length ? keys.join(',') : null })}\n        />\n        <AlertStateFilter\n          stateFilter={alertState as AlertState}\n          onStateFilterChange={(value) => setQueryParams({ alertState: value ? value : null })}\n        />\n        {showClearButton && (\n          <Button className={styles.clearButton} variant={'secondary'} icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css`\n    border-bottom: 1px solid ${theme.colors.border.medium};\n    margin-bottom: ${theme.spacing(3)};\n  `,\n  filterSection: css`\n    display: flex;\n    flex-direction: row;\n    margin-bottom: ${theme.spacing(3)};\n    gap: ${theme.spacing(1)};\n  `,\n  clearButton: css`\n    margin-left: ${theme.spacing(1)};\n    margin-top: 19px;\n  `,\n});\n","import { useMemo } from 'react';\n\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nimport { labelsMatchMatchers, parseMatchers } from '../utils/alertmanager';\nimport { getFiltersFromUrlParams } from '../utils/misc';\n\nexport const useFilteredAmGroups = (groups: AlertmanagerGroup[]) => {\n  const [queryParams] = useQueryParams();\n  const filters = getFiltersFromUrlParams(queryParams);\n  const matchers = parseMatchers(filters.queryString || '');\n\n  return useMemo(() => {\n    return groups.reduce((filteredGroup: AlertmanagerGroup[], group) => {\n      const alerts = group.alerts.filter(({ labels, status }) => {\n        const labelsMatch = labelsMatchMatchers(labels, matchers);\n        const filtersMatch = filters.alertState ? status.state === filters.alertState : true;\n        return labelsMatch && filtersMatch;\n      });\n      if (alerts.length > 0) {\n        // The ungrouped alerts should be first in the results\n        if (Object.keys(group.labels).length === 0) {\n          filteredGroup.unshift({ ...group, alerts });\n        } else {\n          filteredGroup.push({ ...group, alerts });\n        }\n      }\n      return filteredGroup;\n    }, []);\n  }, [groups, filters, matchers]);\n};\n","import { uniqBy } from 'lodash';\nimport { useMemo } from 'react';\n\nimport { Labels } from '@grafana/data';\nimport { AlertmanagerGroup } from 'app/plugins/datasource/alertmanager/types';\n\nexport const useGroupedAlerts = (groups: AlertmanagerGroup[], groupBy: string[]): AlertmanagerGroup[] => {\n  return useMemo(() => {\n    if (groupBy.length === 0) {\n      const emptyGroupings = groups.filter((group) => Object.keys(group.labels).length === 0);\n      if (emptyGroupings.length > 1) {\n        // Merges multiple ungrouped grouping\n        return groups.reduce<AlertmanagerGroup[]>((combinedGroups, group) => {\n          if (Object.keys(group.labels).length === 0) {\n            const noGroupingGroup = combinedGroups.find(({ labels }) => Object.keys(labels));\n            if (!noGroupingGroup) {\n              combinedGroups.push({ alerts: group.alerts, labels: {}, receiver: { name: 'NONE' } });\n            } else {\n              noGroupingGroup.alerts = uniqBy([...noGroupingGroup.alerts, ...group.alerts], 'labels');\n            }\n          } else {\n            combinedGroups.push(group);\n          }\n          return combinedGroups;\n        }, []);\n      } else {\n        return groups;\n      }\n    }\n\n    // api/v2/alerts/groups returns alerts grouped by labels AND receiver.\n    // It means that the same alert can be in multiple groups if it has multiple receivers.\n    // Hence, to get the list of unique alerts we need to get unique alerts by fingerprint.\n    const alerts = uniqBy(\n      groups.flatMap(({ alerts }) => alerts),\n      (alert) => alert.fingerprint\n    );\n    return alerts.reduce<AlertmanagerGroup[]>((groupings, alert) => {\n      const alertContainsGroupings = groupBy.every((groupByLabel) => Object.keys(alert.labels).includes(groupByLabel));\n\n      if (alertContainsGroupings) {\n        // We need to create a group for each receiver. This is how Alertmanager groups alerts.\n        // Alertmanager not only does grouping by labels but also by receiver.\n        const receiverAlertGroups = alert.receivers.map<AlertmanagerGroup>((receiver) => ({\n          alerts: [alert],\n          labels: groupBy.reduce<Labels>((acc, key) => {\n            acc = { ...acc, [key]: alert.labels[key] };\n            return acc;\n          }, {}),\n          receiver,\n        }));\n\n        // Merge the same groupings - groupings are the same if they have the same labels and receiver\n        receiverAlertGroups.forEach((receiverAlertGroup) => {\n          const existingGroup = groupings.find((grouping) => {\n            return (\n              Object.keys(receiverAlertGroup.labels).every(\n                (key) => grouping.labels[key] === receiverAlertGroup.labels[key]\n              ) && grouping.receiver.name === receiverAlertGroup.receiver.name\n            );\n          });\n\n          if (existingGroup) {\n            existingGroup.alerts.push(alert);\n          } else {\n            groupings.push(receiverAlertGroup);\n          }\n        });\n      } else {\n        const noGroupingGroup = groupings.find((group) => Object.keys(group.labels).length === 0);\n        if (!noGroupingGroup) {\n          groupings.push({ alerts: [alert], labels: {}, receiver: { name: 'NONE' } });\n        } else {\n          noGroupingGroup.alerts.push(alert);\n        }\n      }\n\n      return groupings;\n    }, []);\n  }, [groups, groupBy]);\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { useDispatch } from 'app/types';\n\nimport { AlertmanagerChoice } from '../../../plugins/datasource/alertmanager/types';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { AlertGroup } from './components/alert-groups/AlertGroup';\nimport { AlertGroupFilter } from './components/alert-groups/AlertGroupFilter';\nimport { useFilteredAmGroups } from './hooks/useFilteredAmGroups';\nimport { useGroupedAlerts } from './hooks/useGroupedAlerts';\nimport { useUnifiedAlertingSelector } from './hooks/useUnifiedAlertingSelector';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { fetchAlertGroupsAction } from './state/actions';\nimport { NOTIFICATIONS_POLL_INTERVAL_MS } from './utils/constants';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { getFiltersFromUrlParams } from './utils/misc';\nimport { initialAsyncRequestState } from './utils/redux';\n\nconst AlertGroups = () => {\n  const { useGetAlertmanagerChoiceStatusQuery } = alertmanagerApi;\n\n  const { selectedAlertmanager } = useAlertmanager();\n  const dispatch = useDispatch();\n  const [queryParams] = useQueryParams();\n  const { groupBy = [] } = getFiltersFromUrlParams(queryParams);\n  const styles = useStyles2(getStyles);\n\n  const { currentData: amConfigStatus } = useGetAlertmanagerChoiceStatusQuery();\n\n  const alertGroups = useUnifiedAlertingSelector((state) => state.amAlertGroups);\n  const { loading, error, result: results = [] } = alertGroups[selectedAlertmanager || ''] ?? initialAsyncRequestState;\n\n  const groupedAlerts = useGroupedAlerts(results, groupBy);\n  const filteredAlertGroups = useFilteredAmGroups(groupedAlerts);\n\n  const grafanaAmDeliveryDisabled =\n    selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME &&\n    amConfigStatus?.alertmanagersChoice === AlertmanagerChoice.External;\n\n  useEffect(() => {\n    function fetchNotifications() {\n      if (selectedAlertmanager) {\n        dispatch(fetchAlertGroupsAction(selectedAlertmanager));\n      }\n    }\n    fetchNotifications();\n    const interval = setInterval(fetchNotifications, NOTIFICATIONS_POLL_INTERVAL_MS);\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch, selectedAlertmanager]);\n\n  return (\n    <>\n      <AlertGroupFilter groups={results} />\n      {loading && <LoadingPlaceholder text=\"Loading notifications\" />}\n      {error && !loading && (\n        <Alert title={'Error loading notifications'} severity={'error'}>\n          {error.message || 'Unknown error'}\n        </Alert>\n      )}\n\n      {grafanaAmDeliveryDisabled && (\n        <Alert title=\"Grafana alerts are not delivered to Grafana Alertmanager\">\n          Grafana is configured to send alerts to external alertmanagers only. No alerts are expected to be available\n          here for the selected Alertmanager.\n        </Alert>\n      )}\n\n      {results &&\n        filteredAlertGroups.map((group, index) => {\n          return (\n            <React.Fragment key={`${JSON.stringify(group.labels)}-group-${index}`}>\n              {((index === 1 && Object.keys(filteredAlertGroups[0].labels).length === 0) ||\n                (index === 0 && Object.keys(group.labels).length > 0)) && (\n                <p className={styles.groupingBanner}>Grouped by: {Object.keys(group.labels).join(', ')}</p>\n              )}\n              <AlertGroup alertManagerSourceName={selectedAlertmanager || ''} group={group} />\n            </React.Fragment>\n          );\n        })}\n      {results && !filteredAlertGroups.length && <p>No results.</p>}\n    </>\n  );\n};\n\nconst AlertGroupsPage = () => (\n  <AlertmanagerPageWrapper navId=\"groups\" accessType=\"instance\">\n    <AlertGroups />\n  </AlertmanagerPageWrapper>\n);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  groupingBanner: css`\n    margin: ${theme.spacing(2, 0)};\n  `,\n});\n\nexport default AlertGroupsPage;\n","import { chain, filter } from 'lodash';\nimport React, { PropsWithChildren } from 'react';\n\nimport {\n  Abilities,\n  Action,\n  AlertingAction,\n  AlertmanagerAction,\n  useAlertingAbilities,\n  useAllAlertmanagerAbilities,\n} from '../hooks/useAbilities';\n\ninterface AuthorizeProps extends PropsWithChildren {\n  actions: AlertmanagerAction[] | AlertingAction[];\n}\n\nexport const Authorize = ({ actions, children }: AuthorizeProps) => {\n  const alertmanagerActions = filter(actions, isAlertmanagerAction) as AlertmanagerAction[];\n  const alertSourceActions = filter(actions, isAlertingAction) as AlertingAction[];\n\n  if (alertmanagerActions.length) {\n    return <AuthorizeAlertmanager actions={alertmanagerActions}>{children}</AuthorizeAlertmanager>;\n  }\n\n  if (alertSourceActions.length) {\n    return <AuthorizeAlertsource actions={alertSourceActions}>{children}</AuthorizeAlertsource>;\n  }\n\n  return null;\n};\n\ninterface ActionsProps<T extends Action> extends PropsWithChildren {\n  actions: T[];\n}\n\nconst AuthorizeAlertmanager = ({ actions, children }: ActionsProps<AlertmanagerAction>) => {\n  const alertmanagerAbilties = useAllAlertmanagerAbilities();\n  const allowed = actionsAllowed(alertmanagerAbilties, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\nconst AuthorizeAlertsource = ({ actions, children }: ActionsProps<AlertingAction>) => {\n  const alertSourceAbilities = useAlertingAbilities();\n  const allowed = actionsAllowed(alertSourceAbilities, actions);\n\n  if (allowed) {\n    return <>{children}</>;\n  } else {\n    return null;\n  }\n};\n\n// TODO add some authorize helper components for alert source and individual alert rules\n\n// check if some action is allowed from the abilities\nfunction actionsAllowed<T extends Action>(abilities: Abilities<T>, actions: T[]) {\n  return chain(abilities)\n    .pick(actions)\n    .values()\n    .value()\n    .some(([_supported, allowed]) => allowed === true);\n}\n\nfunction isAlertmanagerAction(action: AlertmanagerAction) {\n  return Object.values(AlertmanagerAction).includes(action);\n}\n\nfunction isAlertingAction(action: AlertingAction) {\n  return Object.values(AlertingAction).includes(action);\n}\n","import React, { HTMLAttributes } from 'react';\n\nimport { IconSize, Button } from '@grafana/ui';\n\ninterface Props extends HTMLAttributes<HTMLButtonElement> {\n  isCollapsed: boolean;\n  onToggle: (isCollapsed: boolean) => void;\n  // Todo: this should be made compulsory for a11y purposes\n  idControlled?: string;\n  size?: IconSize;\n  className?: string;\n  text?: string;\n}\n\nexport const CollapseToggle = ({\n  isCollapsed,\n  onToggle,\n  idControlled,\n  className,\n  text,\n  size = 'xl',\n  ...restOfProps\n}: Props) => {\n  return (\n    <Button\n      type=\"button\"\n      fill=\"text\"\n      variant=\"secondary\"\n      aria-expanded={!isCollapsed}\n      aria-controls={idControlled}\n      className={className}\n      icon={isCollapsed ? 'angle-right' : 'angle-down'}\n      onClick={() => onToggle(!isCollapsed)}\n      {...restOfProps}\n    >\n      {text}\n    </Button>\n  );\n};\n","import React from 'react';\n\nimport { useTheme2 } from '@grafana/ui';\n\ninterface Props {}\n\nconst Strong = ({ children }: React.PropsWithChildren<Props>) => {\n  const theme = useTheme2();\n  return <strong style={{ color: theme.colors.text.primary }}>{children}</strong>;\n};\n\nexport { Strong };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nexport const getNotificationsTextColors = (theme: GrafanaTheme2) => ({\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.text};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.text};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.text};\n  `,\n});\n","import pluralize from 'pluralize';\nimport React from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getNotificationsTextColors } from '../../styles/notifications';\n\ninterface Props {\n  group: AlertmanagerGroup;\n}\n\nexport const AlertGroupHeader = ({ group }: Props) => {\n  const textStyles = useStyles2(getNotificationsTextColors);\n  const total = group.alerts.length;\n  const countByStatus = group.alerts.reduce(\n    (statusObj, alert) => {\n      if (statusObj[alert.status.state]) {\n        statusObj[alert.status.state] += 1;\n      } else {\n        statusObj[alert.status.state] = 1;\n      }\n      return statusObj;\n    },\n    {} as Record<AlertState, number>\n  );\n\n  return (\n    <div>\n      {`${total} ${pluralize('alert', total)}: `}\n      {Object.entries(countByStatus).map(([state, count], index) => {\n        return (\n          <span\n            key={`${JSON.stringify(group.labels)}-notifications-${index}`}\n            className={textStyles[state as AlertState]}\n          >\n            {index > 0 && ', '}\n            {`${count} ${state}`}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\nimport { Strong } from '../Strong';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to <Strong>{group.receiver.name}</Strong>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  summary: css({}),\n  [AlertState.Active]: css({\n    color: theme.colors.error.main,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.main,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.main,\n  }),\n});\n","import React from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag = ({ state }: Props) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n"],"names":["AlertStateFilter","onStateFilterChange","stateFilter","alertStateOptions","labelA","labelB","label","state","Label","RadioButtonGroup","GroupBy","groups","groupBy","onGroupingChange","labelKeyOptions","group","labels","key","Icon","items","value","AlertGroupFilter","filterKey","setFilterKey","queryParams","setQueryParams","useQueryParams","queryString","alertState","matcherFilterKey","styles","getStyles","clearFilters","showClearButton","MatcherFilter","keys","Button","theme","useFilteredAmGroups","filters","matchers","filteredGroup","alerts","status","labelsMatch","filtersMatch","useGroupedAlerts","combinedGroups","noGroupingGroup","alert","groupings","groupByLabel","receiver","acc","receiverAlertGroup","existingGroup","grouping","AlertGroups","useGetAlertmanagerChoiceStatusQuery","alertmanagerApi","selectedAlertmanager","dispatch","amConfigStatus","alertGroups","useUnifiedAlertingSelector","loading","error","results","groupedAlerts","filteredAlertGroups","grafanaAmDeliveryDisabled","fetchNotifications","interval","LoadingPlaceholder","Alert","index","AlertGroup","AlertGroupsPage","Authorize","actions","children","alertmanagerActions","isAlertmanagerAction","alertSourceActions","isAlertingAction","AuthorizeAlertmanager","AuthorizeAlertsource","alertmanagerAbilties","actionsAllowed","alertSourceAbilities","abilities","_supported","allowed","action","CollapseToggle","isCollapsed","onToggle","idControlled","className","text","size","restOfProps","Strong","AlertDetails","alertManagerSourceName","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","name","AlertGroupAlertsTable","columns","AmAlertStateTag","AlertLabels","DynamicTableWithGuidelines","getNotificationsTextColors","AlertGroupHeader","textStyles","total","countByStatus","statusObj","count","setIsCollapsed","receiverInGroup","Stack","MetaText","alertStateToState"],"sourceRoot":""}