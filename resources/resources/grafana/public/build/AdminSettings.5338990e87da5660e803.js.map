{"version":3,"file":"AdminSettings.5338990e87da5660e803.js","mappings":"uMAWA,MAAMA,EAA8B,CAAC,CAAE,SAAAC,CAAS,IAE5C,gBAAC,SAAM,UAAU,gBACf,gBAAC,aACE,OAAO,QAAQA,CAAQ,EAAE,IAAI,CAAC,CAACC,EAAaC,CAAe,EAAGC,IAC7D,gBAAC,YAAe,IAAK,WAAWA,CAAC,IAC/B,gBAAC,UACC,gBAAC,MAAG,UAAU,0BAA0BF,CAAY,EACpD,gBAAC,SAAG,CACN,EACC,OAAO,QAAQC,CAAe,EAAE,IAAI,CAAC,CAACE,EAAaC,CAAY,EAAGC,IACjE,gBAAC,MAAG,IAAK,YAAYA,CAAC,IACpB,gBAAC,MAAG,MAAO,CAAE,YAAa,MAAO,GAAIF,CAAY,EACjD,gBAAC,MAAG,MAAO,CAAE,WAAY,cAAe,GAAIC,CAAa,CAC3D,CACD,CACH,CACD,CACH,CACF,EAKEE,EAAe,IAAI,MAAM,EAAE,EAAE,KAAK,IAAI,EAAE,IAAI,IAAM,KAAK,OAAO,CAAC,EAE/DC,EAAgD,CAAC,CAAE,UAAAC,CAAU,IAE/D,gBAAC,SAAM,UAAU,eAAgB,GAAGA,CAAA,EAClC,gBAAC,aACEF,EAAa,IAAI,CAACG,EAAaC,IAAU,CACxC,MAAMC,EAAYD,IAAU,GAAKD,EAAc,GAE/C,OACE,gBAAC,YAAe,IAAKC,CAAA,EAClBC,GACC,gBAAC,UACC,gBAAC,MAAG,UAAU,0BACZ,gBAAC,IAAQ,CAAC,MAAOC,EAAiB,GAAI,GAAIH,CAAW,EAAG,CAC1D,EACA,gBAAC,SAAG,CACN,EAEF,gBAAC,UACC,gBAAC,MAAG,MAAO,CAAE,YAAa,MAAO,GAC/B,gBAAC,IAAQ,CAAC,MAAOG,EAAiB,GAAI,IAAKH,CAAW,EAAG,CAC3D,EACA,gBAAC,UACC,gBAAC,IAAQ,CAAC,MAAOG,EAAiB,GAAI,IAAKH,CAAW,EAAG,CAC3D,CACF,CACF,CAEJ,CAAC,CACH,CACF,EAIJ,SAASG,EAAiBC,EAAaC,EAAaC,EAAoB,CACtE,OAAOA,GAAcD,EAAMD,GAAOA,CACpC,CAEO,MAAMG,KAAqB,KAAelB,EAA6BS,CAA0B,EChExG,SAASU,GAAgB,CACvB,KAAM,CAAE,QAAAC,EAAS,MAAOnB,CAAS,KAAIoB,EAAA,GAAS,OAAM,MAAc,EAAE,IAAc,qBAAqB,EAAG,CAAC,CAAC,EAE5G,OACE,gBAACC,EAAA,EAAI,CAAC,MAAM,mBACV,gBAACA,EAAA,EAAK,SAAL,KACC,gBAAC,OAAI,UAAU,yBAAyB,MAAO,CAAE,OAAQ,eAAgB,GAAG,yJAG5E,EAECF,GAAW,gBAACF,EAAmB,SAAnB,IAA4B,EAExCjB,GAAY,gBAACiB,EAAkB,CAAC,SAAAjB,CAAA,CAAoB,CACvD,CACF,CAEJ,CAEA,QAAekB,C","sources":["webpack://grafana/./public/app/features/admin/AdminSettingsTable.tsx","webpack://grafana/./public/app/features/admin/AdminSettings.tsx"],"sourcesContent":["import React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { SkeletonComponent, attachSkeleton } from '@grafana/ui/src/unstable';\n\nimport { Settings } from './AdminSettings';\n\ninterface Props {\n  settings: Settings;\n}\n\nconst AdminSettingsTableComponent = ({ settings }: Props) => {\n  return (\n    <table className=\"filter-table\">\n      <tbody>\n        {Object.entries(settings).map(([sectionName, sectionSettings], i) => (\n          <React.Fragment key={`section-${i}`}>\n            <tr>\n              <td className=\"admin-settings-section\">{sectionName}</td>\n              <td />\n            </tr>\n            {Object.entries(sectionSettings).map(([settingName, settingValue], j) => (\n              <tr key={`property-${j}`}>\n                <td style={{ paddingLeft: '25px' }}>{settingName}</td>\n                <td style={{ whiteSpace: 'break-spaces' }}>{settingValue}</td>\n              </tr>\n            ))}\n          </React.Fragment>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\n// note: don't want to put this in render function else it will get regenerated\nconst randomValues = new Array(50).fill(null).map(() => Math.random());\n\nconst AdminSettingsTableSkeleton: SkeletonComponent = ({ rootProps }) => {\n  return (\n    <table className=\"filter-table\" {...rootProps}>\n      <tbody>\n        {randomValues.map((randomValue, index) => {\n          const isSection = index === 0 || randomValue > 0.9;\n\n          return (\n            <React.Fragment key={index}>\n              {isSection && (\n                <tr>\n                  <td className=\"admin-settings-section\">\n                    <Skeleton width={getRandomInRange(40, 80, randomValue)} />\n                  </td>\n                  <td />\n                </tr>\n              )}\n              <tr>\n                <td style={{ paddingLeft: '25px' }}>\n                  <Skeleton width={getRandomInRange(60, 100, randomValue)} />\n                </td>\n                <td>\n                  <Skeleton width={getRandomInRange(80, 320, randomValue)} />\n                </td>\n              </tr>\n            </React.Fragment>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n\nfunction getRandomInRange(min: number, max: number, randomSeed: number) {\n  return randomSeed * (max - min) + min;\n}\n\nexport const AdminSettingsTable = attachSkeleton(AdminSettingsTableComponent, AdminSettingsTableSkeleton);\n","import React from 'react';\nimport { useAsync } from 'react-use';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { AdminSettingsTable } from './AdminSettingsTable';\n\nexport type Settings = { [key: string]: { [key: string]: string } };\n\nfunction AdminSettings() {\n  const { loading, value: settings } = useAsync(() => getBackendSrv().get<Settings>('/api/admin/settings'), []);\n\n  return (\n    <Page navId=\"server-settings\">\n      <Page.Contents>\n        <div className=\"grafana-info-box span8\" style={{ margin: '20px 0 25px 0' }}>\n          These system settings are defined in grafana.ini or custom.ini (or overridden in ENV variables). To change\n          these you currently need to restart Grafana.\n        </div>\n\n        {loading && <AdminSettingsTable.Skeleton />}\n\n        {settings && <AdminSettingsTable settings={settings} />}\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default AdminSettings;\n"],"names":["AdminSettingsTableComponent","settings","sectionName","sectionSettings","i","settingName","settingValue","j","randomValues","AdminSettingsTableSkeleton","rootProps","randomValue","index","isSection","getRandomInRange","min","max","randomSeed","AdminSettingsTable","AdminSettings","loading","useAsync","Page"],"sourceRoot":""}