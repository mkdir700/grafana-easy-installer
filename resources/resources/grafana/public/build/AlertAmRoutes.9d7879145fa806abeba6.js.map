{"version":3,"file":"AlertAmRoutes.9d7879145fa806abeba6.js","mappings":"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","sources":["webpack://grafana/./public/app/core/hooks/useCleanup.ts","webpack://grafana/./public/app/features/alerting/unified/api/receiversApi.ts","webpack://grafana/./public/app/features/alerting/unified/components/EmptyAreaWithCTA.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaMuteTimingsExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Filters.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/grafanaApp.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/AlertGroupsSummary.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditDefaultPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useMuteTimingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/EditNotificationPolicyForm.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaPoliciesExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Policy.tsx","webpack://grafana/./public/app/features/alerting/unified/NotificationPolicies.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertDetails.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupAlertsTable.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/notifications.ts","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroupHeader.tsx","webpack://grafana/./public/app/features/alerting/unified/components/alert-groups/AlertGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/util.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/Matchers.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationDocs.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/PromDurationInput.tsx","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/formStyles.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/routeTimingsFields.ts","webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/timingOptions.ts","webpack://grafana/./public/app/features/alerting/unified/components/silences/AmAlertStateTag.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/createRouteGroupsMatcherWorker.ts","webpack://grafana/./public/app/features/alerting/unified/useRouteGroupsMatcher.ts","webpack://grafana/./public/app/features/alerting/unified/utils/amroutes.ts","webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts","webpack://grafana/./public/app/features/alerting/unified/utils/routeTree.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nimport { useDispatch } from 'app/types';\n\nimport { cleanUpAction, CleanUpAction } from '../actions/cleanUp';\n\nexport function useCleanup(cleanupAction: CleanUpAction) {\n  const dispatch = useDispatch();\n  //bit of a hack to unburden user from having to wrap stateSelcetor in a useCallback. Otherwise cleanup would happen on every render\n  const selectorRef = useRef(cleanupAction);\n  selectorRef.current = cleanupAction;\n  useEffect(() => {\n    return () => {\n      dispatch(cleanUpAction({ cleanupAction: selectorRef.current }));\n    };\n  }, [dispatch]);\n}\n","import { ContactPointsState } from 'app/types';\n\nimport { CONTACT_POINTS_STATE_INTERVAL_MS } from '../utils/constants';\n\nimport { alertingApi } from './alertingApi';\nimport { fetchContactPointsState } from './grafana';\n\nexport const receiversApi = alertingApi.injectEndpoints({\n  endpoints: (build) => ({\n    contactPointsState: build.query<ContactPointsState, { amSourceName: string }>({\n      queryFn: async ({ amSourceName }) => {\n        try {\n          const contactPointsState = await fetchContactPointsState(amSourceName);\n          return { data: contactPointsState };\n        } catch (error) {\n          return { error: error };\n        }\n      },\n    }),\n  }),\n});\n\nexport const useGetContactPointsState = (alertManagerSourceName: string) => {\n  const contactPointsStateEmpty: ContactPointsState = { receivers: {}, errorCount: 0 };\n  const { currentData: contactPointsState } = receiversApi.useContactPointsStateQuery(\n    { amSourceName: alertManagerSourceName ?? '' },\n    {\n      skip: !alertManagerSourceName,\n      pollingInterval: CONTACT_POINTS_STATE_INTERVAL_MS,\n    }\n  );\n  return contactPointsState ?? contactPointsStateEmpty;\n};\n","import { css } from '@emotion/css';\nimport React, { ButtonHTMLAttributes } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ButtonVariant, IconName, LinkButton, useStyles2 } from '@grafana/ui';\n\nimport { EmptyArea } from './EmptyArea';\n\nexport interface EmptyAreaWithCTAProps {\n  buttonLabel: string;\n  href?: string;\n  onButtonClick?: ButtonHTMLAttributes<HTMLButtonElement>['onClick'];\n  text: string;\n\n  buttonIcon?: IconName;\n  buttonSize?: 'xs' | 'sm' | 'md' | 'lg';\n  buttonVariant?: ButtonVariant;\n  showButton?: boolean;\n}\n\nexport const EmptyAreaWithCTA = ({\n  buttonIcon,\n  buttonLabel,\n  buttonSize = 'lg',\n  buttonVariant = 'primary',\n  onButtonClick,\n  text,\n  href,\n  showButton = true,\n}: EmptyAreaWithCTAProps) => {\n  const styles = useStyles2(getStyles);\n\n  const commonProps = {\n    className: styles.button,\n    icon: buttonIcon,\n    size: buttonSize,\n    variant: buttonVariant,\n  };\n\n  return (\n    <EmptyArea>\n      <>\n        <p className={styles.text}>{text}</p>\n        {showButton &&\n          (href ? (\n            <LinkButton href={href} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </LinkButton>\n          ) : (\n            <Button onClick={onButtonClick} type=\"button\" {...commonProps}>\n              {buttonLabel}\n            </Button>\n          ))}\n      </>\n    </EmptyArea>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n    text: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    button: css`\n      margin: ${theme.spacing(2, 0, 1)};\n    `,\n  };\n};\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface MuteTimingsExporterPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaMuteTimingsExporterPreview = ({ exportFormat, onClose }: MuteTimingsExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingsQuery({\n    format: exportFormat,\n  });\n  const downloadFileName = `mute-timings-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaMuteTimingExporterPreviewProps extends MuteTimingsExporterPreviewProps {\n  muteTimingName: string;\n}\nconst GrafanaMuteTimingExporterPreview = ({\n  exportFormat,\n  onClose,\n  muteTimingName,\n}: GrafanaMuteTimingExporterPreviewProps) => {\n  const { currentData: muteTimingsDefinition = '', isFetching } = alertRuleApi.useExportMuteTimingQuery({\n    format: exportFormat,\n    muteTiming: muteTimingName,\n  });\n  const downloadFileName = `mute-timing-${muteTimingName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={muteTimingsDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\ninterface GrafanaMuteTimingsExporterProps {\n  onClose: () => void;\n  muteTimingName?: string;\n}\n\nexport const GrafanaMuteTimingsExporter = ({ onClose, muteTimingName }: GrafanaMuteTimingsExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      {muteTimingName ? (\n        <GrafanaMuteTimingExporterPreview exportFormat={activeTab} onClose={onClose} muteTimingName={muteTimingName} />\n      ) : (\n        <GrafanaMuteTimingsExporterPreview exportFormat={activeTab} onClose={onClose} />\n      )}\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Badge, Button, ConfirmModal, IconButton, Link, LinkButton, Menu, Stack, useStyles2 } from '@grafana/ui';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types/store';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { deleteMuteTimingAction } from '../../state/actions';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { isDisabled } from '../../utils/mute-timings';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EmptyAreaWithCTA } from '../EmptyAreaWithCTA';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { GrafanaMuteTimingsExporter } from '../export/GrafanaMuteTimingsExporter';\n\nimport { mergeTimeIntervals, renderTimeIntervals } from './util';\n\nconst ALL_MUTE_TIMINGS = Symbol('all mute timings');\n\ntype ExportProps = [JSX.Element | null, (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void];\n\nconst useExportMuteTiming = (): ExportProps => {\n  const [muteTimingName, setMuteTimingName] = useState<string | typeof ALL_MUTE_TIMINGS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n\n  const handleClose = useCallback(() => {\n    setMuteTimingName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (receiverName: string | typeof ALL_MUTE_TIMINGS) => {\n    setMuteTimingName(receiverName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!muteTimingName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (muteTimingName === ALL_MUTE_TIMINGS) {\n      // use this drawer when we want to export all mute timings\n      return <GrafanaMuteTimingsExporter onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single mute timing\n      return <GrafanaMuteTimingsExporter muteTimingName={muteTimingName} onClose={handleClose} />;\n    }\n  }, [isExportDrawerOpen, handleClose, muteTimingName]);\n\n  return [drawer, handleOpen];\n};\n\ninterface MuteTimingsTableProps {\n  alertManagerSourceName: string;\n  muteTimingNames?: string[];\n  hideActions?: boolean;\n}\n\nexport const MuteTimingsTable = ({ alertManagerSourceName, muteTimingNames, hideActions }: MuteTimingsTableProps) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const { currentData } = useAlertmanagerConfig(alertManagerSourceName, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n  const config = currentData?.alertmanager_config;\n\n  const [muteTimingName, setMuteTimingName] = useState<string>('');\n  const items = useMemo((): Array<DynamicTableItemProps<MuteTimeInterval>> => {\n    // merge both fields mute_time_intervals and time_intervals to support both old and new config\n    const muteTimings = config ? mergeTimeIntervals(config) : [];\n    const muteTimingsProvenances = config?.muteTimeProvenances ?? {};\n\n    return muteTimings\n      .filter(({ name }) => (muteTimingNames ? muteTimingNames.includes(name) : true))\n      .map((mute) => {\n        return {\n          id: mute.name,\n          data: {\n            ...mute,\n            provenance: muteTimingsProvenances[mute.name],\n          },\n        };\n      });\n  }, [muteTimingNames, config]);\n\n  const [_, allowedToCreateMuteTiming] = useAlertmanagerAbility(AlertmanagerAction.CreateMuteTiming);\n\n  const [ExportDrawer, showExportDrawer] = useExportMuteTiming();\n  const [exportMuteTimingsSupported, exportMuteTimingsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportMuteTimings\n  );\n  const columns = useColumns(alertManagerSourceName, hideActions, setMuteTimingName, showExportDrawer);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"row\" alignItems=\"center\">\n        <span>\n          Enter specific time intervals when not to send notifications or freeze notifications for recurring periods of\n          time.\n        </span>\n        <Spacer />\n        {!hideActions && items.length > 0 && (\n          <Authorize actions={[AlertmanagerAction.CreateMuteTiming]}>\n            <LinkButton\n              className={styles.muteTimingsButtons}\n              icon=\"plus\"\n              variant=\"primary\"\n              href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n            >\n              Add mute timing\n            </LinkButton>\n          </Authorize>\n        )}\n        {exportMuteTimingsSupported && (\n          <Button\n            icon=\"download-alt\"\n            className={styles.muteTimingsButtons}\n            variant=\"secondary\"\n            aria-label=\"export all\"\n            disabled={!exportMuteTimingsAllowed}\n            onClick={() => showExportDrawer(ALL_MUTE_TIMINGS)}\n          >\n            Export all\n          </Button>\n        )}\n      </Stack>\n      {items.length > 0 ? (\n        <DynamicTable items={items} cols={columns} pagination={{ itemsPerPage: 25 }} />\n      ) : !hideActions ? (\n        <EmptyAreaWithCTA\n          text=\"You haven't created any mute timings yet\"\n          buttonLabel=\"Add mute timing\"\n          buttonIcon=\"plus\"\n          buttonSize=\"lg\"\n          href={makeAMLink('alerting/routes/mute-timing/new', alertManagerSourceName)}\n          showButton={allowedToCreateMuteTiming}\n        />\n      ) : (\n        <EmptyAreaWithCTA text=\"No mute timings configured\" buttonLabel={''} showButton={false} />\n      )}\n      {!hideActions && (\n        <ConfirmModal\n          isOpen={!!muteTimingName}\n          title=\"Delete mute timing\"\n          body={`Are you sure you would like to delete \"${muteTimingName}\"`}\n          confirmText=\"Delete\"\n          onConfirm={() => {\n            dispatch(deleteMuteTimingAction(alertManagerSourceName, muteTimingName));\n            setMuteTimingName('');\n          }}\n          onDismiss={() => setMuteTimingName('')}\n        />\n      )}\n      {ExportDrawer}\n    </div>\n  );\n};\n\nfunction useColumns(\n  alertManagerSourceName: string,\n  hideActions = false,\n  setMuteTimingName: (name: string) => void,\n  openExportDrawer: (muteTiming: string | typeof ALL_MUTE_TIMINGS) => void\n) {\n  const [[_editSupported, allowedToEdit], [_deleteSupported, allowedToDelete]] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateMuteTiming,\n    AlertmanagerAction.DeleteMuteTiming,\n  ]);\n  const showActions = !hideActions && (allowedToEdit || allowedToDelete);\n\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportMuteTimings);\n  const styles = useStyles2(getStyles);\n\n  return useMemo((): Array<DynamicTableColumnProps<MuteTimeInterval>> => {\n    const columns: Array<DynamicTableColumnProps<MuteTimeInterval>> = [\n      {\n        id: 'name',\n        label: 'Name',\n        renderCell: function renderName({ data }) {\n          return (\n            <>\n              {data.name} {data.provenance && <ProvisioningBadge />}\n            </>\n          );\n        },\n        size: '250px',\n      },\n      {\n        id: 'timeRange',\n        label: 'Time range',\n        renderCell: ({ data }) => {\n          return renderTimeIntervals(data);\n        },\n      },\n    ];\n    if (showActions) {\n      columns.push({\n        id: 'actions',\n        label: '',\n        renderCell: function renderActions({ data }) {\n          return (\n            <ActionsAndBadge\n              muteTiming={data}\n              alertManagerSourceName={alertManagerSourceName}\n              setMuteTimingName={setMuteTimingName}\n            />\n          );\n        },\n        size: '150px',\n        className: styles.actionsColumn,\n      });\n    }\n    if (exportSupported) {\n      columns.push({\n        id: 'actions',\n        label: '',\n        renderCell: function renderActions({ data }) {\n          return (\n            <div>\n              <Menu.Item\n                icon=\"download-alt\"\n                label=\"Export\"\n                ariaLabel=\"export\"\n                disabled={!exportAllowed}\n                data-testid=\"export\"\n                onClick={() => openExportDrawer(data.name)}\n              />\n            </div>\n          );\n        },\n        size: '100px',\n      });\n    }\n    return columns;\n  }, [\n    alertManagerSourceName,\n    setMuteTimingName,\n    showActions,\n    exportSupported,\n    exportAllowed,\n    openExportDrawer,\n    styles.actionsColumn,\n  ]);\n}\n\ninterface ActionsAndBadgeProps {\n  muteTiming: MuteTimeInterval;\n  alertManagerSourceName: string;\n  setMuteTimingName: (name: string) => void;\n}\n\nfunction ActionsAndBadge({ muteTiming, alertManagerSourceName, setMuteTimingName }: ActionsAndBadgeProps) {\n  const styles = useStyles2(getStyles);\n  const isGrafanaDataSource = alertManagerSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  if (muteTiming.provenance) {\n    return (\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n        {isDisabled(muteTiming) && !isGrafanaDataSource && (\n          <Badge text=\"Disabled\" color=\"orange\" className={styles.disabledBadge} />\n        )}\n        <Link\n          href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n            muteName: muteTiming.name,\n          })}\n        >\n          <IconButton name=\"file-alt\" tooltip=\"View mute timing\" />\n        </Link>\n      </Stack>\n    );\n  }\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"flex-end\">\n      {isDisabled(muteTiming) && !isGrafanaDataSource && (\n        <Badge text=\"Disabled\" color=\"orange\" className={styles.disabledBadge} />\n      )}\n      <Authorize actions={[AlertmanagerAction.UpdateMuteTiming]}>\n        <Link\n          href={makeAMLink(`/alerting/routes/mute-timing/edit`, alertManagerSourceName, {\n            muteName: muteTiming.name,\n          })}\n        >\n          <IconButton name=\"edit\" tooltip=\"Edit mute timing\" className={styles.editButton} />\n        </Link>\n      </Authorize>\n      <Authorize actions={[AlertmanagerAction.DeleteMuteTiming]}>\n        <IconButton name=\"trash-alt\" tooltip=\"Delete mute timing\" onClick={() => setMuteTimingName(muteTiming.name)} />\n      </Authorize>\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    display: flex;\n    flex-flow: column nowrap;\n  `,\n  muteTimingsButtons: css`\n    margin-bottom: ${theme.spacing(2)};\n    align-self: flex-end;\n  `,\n  disabledBadge: css({\n    height: 'fit-content',\n  }),\n  editButton: css({\n    display: 'flex',\n  }),\n  actionsColumn: css({\n    justifyContent: 'flex-end',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { debounce, isEqual } from 'lodash';\nimport React, { useCallback, useEffect, useRef } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Button, Field, Icon, Input, Label, Select, Stack, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { ObjectMatcher, Receiver, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { matcherToObjectMatcher, parseMatchers } from '../../utils/alertmanager';\nimport { normalizeMatchers } from '../../utils/matchers';\n\ninterface NotificationPoliciesFilterProps {\n  receivers: Receiver[];\n  onChangeMatchers: (labels: ObjectMatcher[]) => void;\n  onChangeReceiver: (receiver: string | undefined) => void;\n  matchingCount: number;\n}\n\nconst NotificationPoliciesFilter = ({\n  receivers,\n  onChangeReceiver,\n  onChangeMatchers,\n  matchingCount,\n}: NotificationPoliciesFilterProps) => {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n  const searchInputRef = useRef<HTMLInputElement | null>(null);\n  const { queryString, contactPoint } = getNotificationPoliciesFilters(searchParams);\n  const styles = useStyles2(getStyles);\n\n  const handleChangeLabels = useCallback(() => debounce(onChangeMatchers, 500), [onChangeMatchers]);\n\n  useEffect(() => {\n    onChangeReceiver(contactPoint);\n  }, [contactPoint, onChangeReceiver]);\n\n  useEffect(() => {\n    const matchers = parseMatchers(queryString ?? '').map(matcherToObjectMatcher);\n    handleChangeLabels()(matchers);\n  }, [handleChangeLabels, queryString]);\n\n  const clearFilters = useCallback(() => {\n    if (searchInputRef.current) {\n      searchInputRef.current.value = '';\n    }\n    setSearchParams({ contactPoint: undefined, queryString: undefined });\n  }, [setSearchParams]);\n\n  const receiverOptions: Array<SelectableValue<string>> = receivers.map(toOption);\n  const selectedContactPoint = receiverOptions.find((option) => option.value === contactPoint) ?? null;\n\n  const hasFilters = queryString || contactPoint;\n  const inputInvalid = queryString && queryString.length > 3 ? parseMatchers(queryString).length === 0 : false;\n\n  return (\n    <Stack direction=\"row\" alignItems=\"flex-end\" gap={1}>\n      <Field\n        className={styles.noBottom}\n        label={\n          <Label>\n            <Stack gap={0.5}>\n              <span>Search by matchers</span>\n              <Tooltip\n                content={\n                  <div>\n                    Filter silences by matchers using a comma separated list of matchers, ie:\n                    <pre>{`severity=critical, instance=~cluster-us-.+`}</pre>\n                  </div>\n                }\n              >\n                <Icon name=\"info-circle\" size=\"sm\" />\n              </Tooltip>\n            </Stack>\n          </Label>\n        }\n        invalid={inputInvalid}\n        error={inputInvalid ? 'Query must use valid matcher syntax' : null}\n      >\n        <Input\n          ref={searchInputRef}\n          data-testid=\"search-query-input\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchParams({ queryString: event.currentTarget.value });\n          }}\n          defaultValue={queryString}\n        />\n      </Field>\n      <Field label=\"Search by contact point\" style={{ marginBottom: 0 }}>\n        <Select\n          id=\"receiver\"\n          aria-label=\"Search by contact point\"\n          value={selectedContactPoint}\n          options={receiverOptions}\n          onChange={(option) => {\n            setSearchParams({ contactPoint: option?.value });\n          }}\n          width={28}\n          isClearable\n        />\n      </Field>\n      {hasFilters && (\n        <Stack alignItems=\"center\">\n          <Button variant=\"secondary\" icon=\"times\" onClick={clearFilters}>\n            Clear filters\n          </Button>\n          <Text variant=\"bodySmall\" color=\"secondary\">\n            {matchingCount === 0 && 'No policies matching filters.'}\n            {matchingCount === 1 && `${matchingCount} policy matches the filters.`}\n            {matchingCount > 1 && `${matchingCount} policies match the filters.`}\n          </Text>\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n\n/**\n * Find a list of route IDs that match given input filters\n */\ntype FilterPredicate = (route: RouteWithID) => boolean;\n\n/**\n * Find routes int the tree that match the given predicate function\n * @param routeTree the route tree to search\n * @param predicateFn the predicate function to match routes\n * @returns\n * - matches: list of routes that match the predicate\n * - matchingRouteIdsWithPath: map with routeids that are part of the path of a matching route\n *  key is the route id, value is an array of route ids that are part of its path\n */\nexport function findRoutesMatchingPredicate(\n  routeTree: RouteWithID,\n  predicateFn: FilterPredicate\n): Map<RouteWithID, RouteWithID[]> {\n  // map with routids that are part of the path of a matching route\n  // key is the route id, value is an array of route ids that are part of the path\n  const matchingRouteIdsWithPath = new Map<RouteWithID, RouteWithID[]>();\n\n  function findMatch(route: RouteWithID, path: RouteWithID[]) {\n    const newPath = [...path, route];\n\n    if (predicateFn(route)) {\n      // if the route matches the predicate, we need to add the path to the map of matching routes\n      const previousPath = matchingRouteIdsWithPath.get(route) ?? [];\n      // add the current route id to the map with its path\n      matchingRouteIdsWithPath.set(route, [...previousPath, ...newPath]);\n    }\n\n    // if the route has subroutes, call findMatch recursively\n    route.routes?.forEach((route) => findMatch(route, newPath));\n  }\n\n  findMatch(routeTree, []);\n\n  return matchingRouteIdsWithPath;\n}\n\nexport function findRoutesByMatchers(route: RouteWithID, labelMatchersFilter: ObjectMatcher[]): boolean {\n  const routeMatchers = normalizeMatchers(route);\n\n  return labelMatchersFilter.every((filter) => routeMatchers.some((matcher) => isEqual(filter, matcher)));\n}\n\nconst toOption = (receiver: Receiver) => ({\n  label: receiver.name,\n  value: receiver.name,\n});\n\nconst getNotificationPoliciesFilters = (searchParams: URLSearchParams) => ({\n  queryString: searchParams.get('queryString') ?? undefined,\n  contactPoint: searchParams.get('contactPoint') ?? undefined,\n});\n\nconst getStyles = () => ({\n  noBottom: css({\n    marginBottom: 0,\n  }),\n});\n\nexport { NotificationPoliciesFilter };\n","import { Receiver } from 'app/plugins/datasource/alertmanager/types';\n\nimport { onCallApi } from '../../../api/onCallApi';\nimport { usePluginBridge } from '../../../hooks/usePluginBridge';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\n\nimport { isOnCallReceiver } from './onCall/onCall';\nimport { AmRouteReceiver } from './types';\n\nexport const useGetGrafanaReceiverTypeChecker = () => {\n  const { installed: isOnCallEnabled } = usePluginBridge(SupportedPlugin.OnCall);\n  const { data } = onCallApi.useGrafanaOnCallIntegrationsQuery(undefined, {\n    skip: !isOnCallEnabled,\n  });\n  const getGrafanaReceiverType = (receiver: Receiver): SupportedPlugin | undefined => {\n    //CHECK FOR ONCALL PLUGIN\n    const onCallIntegrations = data ?? [];\n    if (isOnCallEnabled && isOnCallReceiver(receiver, onCallIntegrations)) {\n      return SupportedPlugin.OnCall;\n    }\n    //WE WILL ADD IN HERE IF THERE ARE MORE TYPES TO CHECK\n    return undefined;\n  };\n\n  return getGrafanaReceiverType;\n};\n\nexport const useGetAmRouteReceiverWithGrafanaAppTypes = (receivers: Receiver[]) => {\n  const getGrafanaReceiverType = useGetGrafanaReceiverTypeChecker();\n  const receiverToSelectableContactPointValue = (receiver: Receiver): AmRouteReceiver => {\n    const amRouteReceiverValue: AmRouteReceiver = {\n      label: receiver.name,\n      value: receiver.name,\n      grafanaAppReceiverType: getGrafanaReceiverType(receiver),\n    };\n    return amRouteReceiverValue;\n  };\n\n  return receivers.map(receiverToSelectableContactPointValue);\n};\n","import pluralize from 'pluralize';\nimport React, { Fragment } from 'react';\n\nimport { Badge, Stack } from '@grafana/ui';\n\ninterface Props {\n  active?: number;\n  suppressed?: number;\n  unprocessed?: number;\n}\n\nexport const AlertGroupsSummary = ({ active = 0, suppressed = 0, unprocessed = 0 }: Props) => {\n  const statsComponents: React.ReactNode[] = [];\n  const total = active + suppressed + unprocessed;\n\n  if (active) {\n    statsComponents.push(<Badge color=\"red\" key=\"firing\" text={`${active} firing`} />);\n  }\n\n  if (suppressed) {\n    statsComponents.push(<Badge color=\"blue\" key=\"suppressed\" text={`${suppressed} suppressed`} />);\n  }\n\n  if (unprocessed) {\n    statsComponents.push(<Badge color=\"orange\" key=\"unprocessed\" text={`${unprocessed} unprocessed`} />);\n  }\n\n  // if we only have one category it's not really necessary to repeat the total\n  if (statsComponents.length > 1) {\n    statsComponents.unshift(\n      <Fragment key=\"total\">\n        {total} {pluralize('instance', total)}\n      </Fragment>\n    );\n  }\n\n  const hasStats = Boolean(statsComponents.length);\n\n  return hasStats ? <Stack gap={0.5}>{statsComponents}</Stack> : null;\n};\n","import React, { ReactNode, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\n\nimport { Collapse, Field, Link, MultiSelect, Select, useStyles2 } from '@grafana/ui';\nimport { RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringsToSelectableValues,\n  stringToSelectableValue,\n} from '../../utils/amroutes';\nimport { makeAMLink } from '../../utils/misc';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { TIMING_OPTIONS_DEFAULTS } from './timingOptions';\n\nexport interface AmRootRouteFormProps {\n  alertManagerSourceName: string;\n  actionButtons: ReactNode;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  receivers: AmRouteReceiver[];\n  route: RouteWithID;\n}\n\nexport const AmRootRouteForm = ({\n  actionButtons,\n  alertManagerSourceName,\n  onSubmit,\n  receivers,\n  route,\n}: AmRootRouteFormProps) => {\n  const styles = useStyles2(getFormStyles);\n  const [isTimingOptionsExpanded, setIsTimingOptionsExpanded] = useState(false);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route.group_by));\n\n  const defaultValues = amRouteToFormAmRoute(route);\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n    setValue,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues: {\n      ...defaultValues,\n      overrideTimings: true,\n      overrideGrouping: true,\n    },\n  });\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <Field label=\"Default contact point\" invalid={!!errors.receiver} error={errors.receiver?.message}>\n        <>\n          <div className={styles.container} data-testid=\"am-receiver-select\">\n            <Controller\n              render={({ field: { onChange, ref, ...field } }) => (\n                <Select\n                  aria-label=\"Default contact point\"\n                  {...field}\n                  className={styles.input}\n                  onChange={(value) => onChange(mapSelectValueToString(value))}\n                  options={receivers}\n                />\n              )}\n              control={control}\n              name=\"receiver\"\n              rules={{ required: { value: true, message: 'Required.' } }}\n            />\n            <span>or</span>\n            <Link\n              className={styles.linkText}\n              href={makeAMLink('/alerting/notifications/receivers/new', alertManagerSourceName)}\n            >\n              Create a contact point\n            </Link>\n          </div>\n        </>\n      </Field>\n      <Field\n        label=\"Group by\"\n        description=\"Group alerts when you receive a notification based on labels.\"\n        data-testid=\"am-group-select\"\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label=\"Group by\"\n              {...field}\n              allowCustomValue\n              className={styles.input}\n              onCreateOption={(opt: string) => {\n                setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                setValue('groupBy', [...(field.value || []), opt]);\n              }}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={[...commonGroupByOptions, ...groupByOptions]}\n            />\n          )}\n          control={control}\n          name=\"groupBy\"\n        />\n      </Field>\n      <Collapse\n        collapsible\n        className={styles.collapse}\n        isOpen={isTimingOptionsExpanded}\n        label=\"Timing options\"\n        onToggle={setIsTimingOptionsExpanded}\n      >\n        <div className={styles.timingFormContainer}>\n          <Field\n            label=\"Group wait\"\n            description=\"The waiting time until the initial notification is sent for a new group created by an incoming alert. Default 30 seconds.\"\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n            data-testid=\"am-group-wait\"\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_wait}\n              className={styles.promDurationInput}\n              aria-label=\"Group wait\"\n            />\n          </Field>\n          <Field\n            label=\"Group interval\"\n            description=\"The waiting time to send a batch of new alerts for that group after the first notification was sent. Default 5 minutes.\"\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n            data-testid=\"am-group-interval\"\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.group_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Group interval\"\n            />\n          </Field>\n          <Field\n            label=\"Repeat interval\"\n            description=\"The waiting time to resend an alert after they have successfully been sent. Default 4 hours. Should be a multiple of Group interval.\"\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n            data-testid=\"am-repeat-interval\"\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value: string) => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              placeholder={TIMING_OPTIONS_DEFAULTS.repeat_interval}\n              className={styles.promDurationInput}\n              aria-label=\"Repeat interval\"\n            />\n          </Field>\n        </div>\n      </Collapse>\n      <div className={styles.container}>{actionButtons}</div>\n    </form>\n  );\n};\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\n\nimport { mergeTimeIntervals } from '../components/mute-timings/util';\nimport { useAlertmanager } from '../state/AlertmanagerContext';\nimport { timeIntervalToString } from '../utils/alertmanager';\n\nimport { useAlertmanagerConfig } from './useAlertmanagerConfig';\n\nexport function useMuteTimingOptions(): Array<SelectableValue<string>> {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { currentData } = useAlertmanagerConfig(selectedAlertmanager);\n  const config = currentData?.alertmanager_config;\n\n  return useMemo(() => {\n    const time_intervals = config ? mergeTimeIntervals(config) : [];\n    const muteTimingsOptions: Array<SelectableValue<string>> =\n      time_intervals?.map((value) => ({\n        value: value.name,\n        label: value.name,\n        description: value.time_intervals.map((interval) => timeIntervalToString(interval)).join(', AND '),\n      })) ?? [];\n\n    return muteTimingsOptions;\n  }, [config]);\n}\n","import { css } from '@emotion/css';\nimport React, { ReactNode, useState } from 'react';\nimport { useForm, Controller, useFieldArray } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  Badge,\n  Button,\n  Field,\n  FieldValidationMessage,\n  IconButton,\n  Input,\n  MultiSelect,\n  Select,\n  Stack,\n  Switch,\n  useStyles2,\n} from '@grafana/ui';\nimport { MatcherOperator, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { useMuteTimingOptions } from '../../hooks/useMuteTimingOptions';\nimport { FormAmRoute } from '../../types/amroutes';\nimport { SupportedPlugin } from '../../types/pluginBridges';\nimport { matcherFieldOptions } from '../../utils/alertmanager';\nimport {\n  amRouteToFormAmRoute,\n  commonGroupByOptions,\n  emptyArrayFieldMatcher,\n  mapMultiSelectValueToStrings,\n  mapSelectValueToString,\n  promDurationValidator,\n  repeatIntervalValidator,\n  stringToSelectableValue,\n  stringsToSelectableValues,\n} from '../../utils/amroutes';\nimport { AmRouteReceiver } from '../receivers/grafanaAppReceivers/types';\n\nimport { PromDurationInput } from './PromDurationInput';\nimport { getFormStyles } from './formStyles';\nimport { routeTimingsFields } from './routeTimingsFields';\n\nexport interface AmRoutesExpandedFormProps {\n  receivers: AmRouteReceiver[];\n  route?: RouteWithID;\n  onSubmit: (route: Partial<FormAmRoute>) => void;\n  actionButtons: ReactNode;\n  defaults?: Partial<FormAmRoute>;\n}\n\nexport const AmRoutesExpandedForm = ({\n  actionButtons,\n  receivers,\n  route,\n  onSubmit,\n  defaults,\n}: AmRoutesExpandedFormProps) => {\n  const styles = useStyles2(getStyles);\n  const formStyles = useStyles2(getFormStyles);\n  const [groupByOptions, setGroupByOptions] = useState(stringsToSelectableValues(route?.group_by));\n  const muteTimingOptions = useMuteTimingOptions();\n  const emptyMatcher = [{ name: '', operator: MatcherOperator.equal, value: '' }];\n\n  const receiversWithOnCallOnTop = receivers.sort(onCallFirst);\n\n  const formAmRoute = {\n    ...amRouteToFormAmRoute(route),\n    ...defaults,\n  };\n\n  const defaultValues: Omit<FormAmRoute, 'routes'> = {\n    ...formAmRoute,\n    // if we're adding a new route, show at least one empty matcher\n    object_matchers: route ? formAmRoute.object_matchers : emptyMatcher,\n  };\n\n  const {\n    handleSubmit,\n    control,\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n    getValues,\n  } = useForm<FormAmRoute>({\n    defaultValues,\n  });\n  const { fields, append, remove } = useFieldArray({\n    control,\n    name: 'object_matchers',\n  });\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)}>\n      <input type=\"hidden\" {...register('id')} />\n      <Stack direction=\"column\" alignItems=\"flex-start\">\n        <div>Matching labels</div>\n        {fields.length === 0 && (\n          <Badge\n            color=\"orange\"\n            className={styles.noMatchersWarning}\n            icon=\"exclamation-triangle\"\n            text=\"If no matchers are specified, this notification policy will handle all alert instances.\"\n          />\n        )}\n        {fields.length > 0 && (\n          <div className={styles.matchersContainer}>\n            {fields.map((field, index) => {\n              return (\n                <Stack direction=\"row\" key={field.id} alignItems=\"center\">\n                  <Field\n                    label=\"Label\"\n                    invalid={!!errors.object_matchers?.[index]?.name}\n                    error={errors.object_matchers?.[index]?.name?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.name`, { required: 'Field is required' })}\n                      defaultValue={field.name}\n                      placeholder=\"label\"\n                      autoFocus\n                    />\n                  </Field>\n                  <Field label={'Operator'}>\n                    <Controller\n                      render={({ field: { onChange, ref, ...field } }) => (\n                        <Select\n                          {...field}\n                          className={styles.matchersOperator}\n                          onChange={(value) => onChange(value?.value)}\n                          options={matcherFieldOptions}\n                          aria-label=\"Operator\"\n                        />\n                      )}\n                      defaultValue={field.operator}\n                      control={control}\n                      name={`object_matchers.${index}.operator`}\n                      rules={{ required: { value: true, message: 'Required.' } }}\n                    />\n                  </Field>\n                  <Field\n                    label=\"Value\"\n                    invalid={!!errors.object_matchers?.[index]?.value}\n                    error={errors.object_matchers?.[index]?.value?.message}\n                  >\n                    <Input\n                      {...register(`object_matchers.${index}.value`)}\n                      defaultValue={field.value}\n                      placeholder=\"value\"\n                    />\n                  </Field>\n                  <IconButton tooltip=\"Remove matcher\" name={'trash-alt'} onClick={() => remove(index)}>\n                    Remove\n                  </IconButton>\n                </Stack>\n              );\n            })}\n          </div>\n        )}\n        <Button\n          className={styles.addMatcherBtn}\n          icon=\"plus\"\n          onClick={() => append(emptyArrayFieldMatcher)}\n          variant=\"secondary\"\n          type=\"button\"\n        >\n          Add matcher\n        </Button>\n      </Stack>\n\n      <Field label=\"Contact point\">\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <Select\n              aria-label=\"Contact point\"\n              {...field}\n              className={formStyles.input}\n              onChange={(value) => onChange(mapSelectValueToString(value))}\n              options={receiversWithOnCallOnTop}\n              isClearable\n            />\n          )}\n          control={control}\n          name=\"receiver\"\n        />\n      </Field>\n      <Field label=\"Continue matching subsequent sibling nodes\">\n        <Switch id=\"continue-toggle\" {...register('continue')} />\n      </Field>\n      <Field label=\"Override grouping\">\n        <Switch id=\"override-grouping-toggle\" {...register('overrideGrouping')} />\n      </Field>\n      {watch().overrideGrouping && (\n        <Field\n          label=\"Group by\"\n          description=\"Group alerts when you receive a notification based on labels. If empty it will be inherited from the parent policy.\"\n        >\n          <Controller\n            rules={{\n              validate: (value) => {\n                if (!value || value.length === 0) {\n                  return 'At least one group by option is required.';\n                }\n                return true;\n              },\n            }}\n            render={({ field: { onChange, ref, ...field }, fieldState: { error } }) => (\n              <>\n                <MultiSelect\n                  aria-label=\"Group by\"\n                  {...field}\n                  invalid={Boolean(error)}\n                  allowCustomValue\n                  className={formStyles.input}\n                  onCreateOption={(opt: string) => {\n                    setGroupByOptions((opts) => [...opts, stringToSelectableValue(opt)]);\n                    setValue('groupBy', [...(field.value || []), opt]);\n                  }}\n                  onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n                  options={[...commonGroupByOptions, ...groupByOptions]}\n                />\n                {error && <FieldValidationMessage>{error.message}</FieldValidationMessage>}\n              </>\n            )}\n            control={control}\n            name=\"groupBy\"\n          />\n        </Field>\n      )}\n      <Field label=\"Override general timings\">\n        <Switch id=\"override-timings-toggle\" {...register('overrideTimings')} />\n      </Field>\n      {watch().overrideTimings && (\n        <>\n          <Field\n            label={routeTimingsFields.groupWait.label}\n            description={routeTimingsFields.groupWait.description}\n            invalid={!!errors.groupWaitValue}\n            error={errors.groupWaitValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupWaitValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupWait.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.groupInterval.label}\n            description={routeTimingsFields.groupInterval.description}\n            invalid={!!errors.groupIntervalValue}\n            error={errors.groupIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('groupIntervalValue', { validate: promDurationValidator })}\n              aria-label={routeTimingsFields.groupInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n          <Field\n            label={routeTimingsFields.repeatInterval.label}\n            description={routeTimingsFields.repeatInterval.description}\n            invalid={!!errors.repeatIntervalValue}\n            error={errors.repeatIntervalValue?.message}\n          >\n            <PromDurationInput\n              {...register('repeatIntervalValue', {\n                validate: (value = '') => {\n                  const groupInterval = getValues('groupIntervalValue');\n                  return repeatIntervalValidator(value, groupInterval);\n                },\n              })}\n              aria-label={routeTimingsFields.repeatInterval.ariaLabel}\n              className={formStyles.promDurationInput}\n            />\n          </Field>\n        </>\n      )}\n      <Field\n        label=\"Mute timings\"\n        data-testid=\"am-mute-timing-select\"\n        description=\"Add mute timing to policy\"\n        invalid={!!errors.muteTimeIntervals}\n      >\n        <Controller\n          render={({ field: { onChange, ref, ...field } }) => (\n            <MultiSelect\n              aria-label=\"Mute timings\"\n              {...field}\n              className={formStyles.input}\n              onChange={(value) => onChange(mapMultiSelectValueToStrings(value))}\n              options={muteTimingOptions}\n            />\n          )}\n          control={control}\n          name=\"muteTimeIntervals\"\n        />\n      </Field>\n      {actionButtons}\n    </form>\n  );\n};\n\nfunction onCallFirst(receiver: AmRouteReceiver) {\n  if (receiver.grafanaAppReceiverType === SupportedPlugin.OnCall) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  const commonSpacing = theme.spacing(3.5);\n\n  return {\n    addMatcherBtn: css`\n      margin-bottom: ${commonSpacing};\n    `,\n    matchersContainer: css`\n      background-color: ${theme.colors.background.secondary};\n      padding: ${theme.spacing(1.5)} ${theme.spacing(2)};\n      padding-bottom: 0;\n      width: fit-content;\n    `,\n    matchersOperator: css`\n      min-width: 120px;\n    `,\n    noMatchersWarning: css`\n      padding: ${theme.spacing(1)} ${theme.spacing(2)};\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n};\n","import { groupBy } from 'lodash';\nimport React, { FC, useCallback, useMemo, useState } from 'react';\n\nimport { Button, Icon, Modal, ModalProps, Spinner, Stack } from '@grafana/ui';\nimport {\n  AlertmanagerGroup,\n  AlertState,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../../types/amroutes';\nimport { MatcherFormatter } from '../../utils/matchers';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { AlertGroup } from '../alert-groups/AlertGroup';\nimport { useGetAmRouteReceiverWithGrafanaAppTypes } from '../receivers/grafanaAppReceivers/grafanaApp';\n\nimport { AlertGroupsSummary } from './AlertGroupsSummary';\nimport { AmRootRouteForm } from './EditDefaultPolicyForm';\nimport { AmRoutesExpandedForm } from './EditNotificationPolicyForm';\nimport { Matchers } from './Matchers';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\ntype AddModalHook<T = undefined> = [JSX.Element, (item: T, position: InsertPosition) => void, () => void];\ntype EditModalHook = [JSX.Element, (item: RouteWithID, isDefaultRoute?: boolean) => void, () => void];\n\nconst useAddPolicyModal = (\n  receivers: Receiver[] = [],\n  handleAdd: (route: Partial<FormAmRoute>, referenceRoute: RouteWithID, position: InsertPosition) => void,\n  loading: boolean\n): AddModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [insertPosition, setInsertPosition] = useState<InsertPosition | undefined>(undefined);\n  const [referenceRoute, setReferenceRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setReferenceRoute(undefined);\n    setInsertPosition(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((referenceRoute: RouteWithID, position: InsertPosition) => {\n    setReferenceRoute(referenceRoute);\n    setInsertPosition(position);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Add notification policy\"\n        >\n          <AmRoutesExpandedForm\n            receivers={AmRouteReceivers}\n            defaults={{\n              groupBy: referenceRoute?.group_by,\n            }}\n            onSubmit={(newRoute) => {\n              if (referenceRoute && insertPosition) {\n                handleAdd(newRoute, referenceRoute, insertPosition);\n              }\n            }}\n            actionButtons={\n              <Modal.ButtonRow>\n                <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\">Save policy</Button>\n              </Modal.ButtonRow>\n            }\n          />\n        </Modal>\n      ),\n    [AmRouteReceivers, handleAdd, handleDismiss, insertPosition, loading, referenceRoute, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useEditPolicyModal = (\n  alertManagerSourceName: string,\n  receivers: Receiver[],\n  handleSave: (route: Partial<FormAmRoute>) => void,\n  loading: boolean\n): EditModalHook => {\n  const [showModal, setShowModal] = useState(false);\n  const [isDefaultPolicy, setIsDefaultPolicy] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n  const AmRouteReceivers = useGetAmRouteReceiverWithGrafanaAppTypes(receivers);\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, []);\n\n  const handleShow = useCallback((route: RouteWithID, isDefaultPolicy?: boolean) => {\n    setIsDefaultPolicy(isDefaultPolicy ?? false);\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Edit notification policy\"\n        >\n          {isDefaultPolicy && route && (\n            <AmRootRouteForm\n              // TODO *sigh* this alertmanagersourcename should come from context or something\n              // passing it down all the way here is a code smell\n              alertManagerSourceName={alertManagerSourceName}\n              onSubmit={handleSave}\n              receivers={AmRouteReceivers}\n              route={route}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update default policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n          {!isDefaultPolicy && (\n            <AmRoutesExpandedForm\n              receivers={AmRouteReceivers}\n              route={route}\n              onSubmit={handleSave}\n              actionButtons={\n                <Modal.ButtonRow>\n                  <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} fill=\"outline\">\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\">Update policy</Button>\n                </Modal.ButtonRow>\n              }\n            />\n          )}\n        </Modal>\n      ),\n    [AmRouteReceivers, alertManagerSourceName, handleDismiss, handleSave, isDefaultPolicy, loading, route, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useDeletePolicyModal = (handleDelete: (route: RouteWithID) => void, loading: boolean): ModalHook<RouteWithID> => {\n  const [showModal, setShowModal] = useState(false);\n  const [route, setRoute] = useState<RouteWithID>();\n\n  const handleDismiss = useCallback(() => {\n    setRoute(undefined);\n    setShowModal(false);\n  }, [setRoute]);\n\n  const handleShow = useCallback((route: RouteWithID) => {\n    setRoute(route);\n    setShowModal(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (route) {\n      handleDelete(route);\n    }\n  }, [handleDelete, route]);\n\n  const modalElement = useMemo(\n    () =>\n      loading ? (\n        <UpdatingModal isOpen={showModal} />\n      ) : (\n        <Modal\n          isOpen={showModal}\n          onDismiss={handleDismiss}\n          closeOnBackdropClick={true}\n          closeOnEscape={true}\n          title=\"Delete notification policy\"\n        >\n          <p>Deleting this notification policy will permanently remove it.</p>\n          <p>Are you sure you want to delete this policy?</p>\n\n          <Modal.ButtonRow>\n            <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit}>\n              Yes, delete policy\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n              Cancel\n            </Button>\n          </Modal.ButtonRow>\n        </Modal>\n      ),\n    [handleDismiss, handleSubmit, loading, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst useAlertGroupsModal = (): [\n  JSX.Element,\n  (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[]) => void,\n  () => void,\n] => {\n  const [showModal, setShowModal] = useState(false);\n  const [alertGroups, setAlertGroups] = useState<AlertmanagerGroup[]>([]);\n  const [matchers, setMatchers] = useState<ObjectMatcher[]>([]);\n  const [formatter, setFormatter] = useState<MatcherFormatter>('default');\n\n  const handleDismiss = useCallback(() => {\n    setShowModal(false);\n    setAlertGroups([]);\n    setMatchers([]);\n  }, []);\n\n  const handleShow = useCallback(\n    (alertGroups: AlertmanagerGroup[], matchers?: ObjectMatcher[], formatter?: MatcherFormatter) => {\n      setAlertGroups(alertGroups);\n      if (matchers) {\n        setMatchers(matchers);\n      }\n      if (formatter) {\n        setFormatter(formatter);\n      }\n      setShowModal(true);\n    },\n    []\n  );\n\n  const instancesByState = useMemo(() => {\n    const instances = alertGroups.flatMap((group) => group.alerts);\n    return groupBy(instances, (instance) => instance.status.state);\n  }, [alertGroups]);\n\n  const modalElement = useMemo(\n    () => (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={true}\n        closeOnEscape={true}\n        title={\n          <Stack direction=\"row\" alignItems=\"center\" gap={1} wrap={'wrap'}>\n            <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n              <Icon name=\"x\" /> Matchers\n            </Stack>\n            <Matchers matchers={matchers} formatter={formatter} />\n          </Stack>\n        }\n      >\n        <Stack direction=\"column\">\n          <AlertGroupsSummary\n            active={instancesByState[AlertState.Active]?.length}\n            suppressed={instancesByState[AlertState.Suppressed]?.length}\n            unprocessed={instancesByState[AlertState.Unprocessed]?.length}\n          />\n          <div>\n            {alertGroups.map((group, index) => (\n              <AlertGroup key={index} alertManagerSourceName={''} group={group} />\n            ))}\n          </div>\n        </Stack>\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    ),\n    [alertGroups, handleDismiss, instancesByState, matchers, formatter, showModal]\n  );\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\nconst UpdatingModal: FC<Pick<ModalProps, 'isOpen'>> = ({ isOpen }) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={() => {}}\n    closeOnBackdropClick={false}\n    closeOnEscape={false}\n    title={\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        Updating... <Spinner inline />\n      </Stack>\n    }\n  >\n    Please wait while we update your notification policies.\n  </Modal>\n);\n\nexport { useAddPolicyModal, useDeletePolicyModal, useEditPolicyModal, useAlertGroupsModal };\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\ninterface GrafanaPoliciesPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n}\n\nconst GrafanaPoliciesExporterPreview = ({ exportFormat, onClose }: GrafanaPoliciesPreviewProps) => {\n  const { currentData: policiesDefinition = '', isFetching } = alertRuleApi.useExportPoliciesQuery({\n    format: exportFormat,\n  });\n\n  const downloadFileName = `policies-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={policiesDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaPoliciesExporterProps {\n  onClose: () => void;\n}\n\nexport const GrafanaPoliciesExporter = ({ onClose }: GrafanaPoliciesExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaPoliciesExporterPreview exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport { defaults, groupBy, isArray, sumBy, uniqueId, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { FC, Fragment, ReactNode, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useToggle } from 'react-use';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  Badge,\n  Button,\n  Dropdown,\n  Icon,\n  IconButton,\n  Menu,\n  Stack,\n  Text,\n  Tooltip,\n  getTagColorsFromName,\n  useStyles2,\n} from '@grafana/ui';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport {\n  AlertmanagerGroup,\n  MatcherOperator,\n  ObjectMatcher,\n  Receiver,\n  RouteWithID,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { ReceiversState } from 'app/types';\n\nimport { RoutesMatchingFilters } from '../../NotificationPolicies';\nimport { AlertmanagerAction, useAlertmanagerAbilities, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { getAmMatcherFormatter } from '../../utils/alertmanager';\nimport { MatcherFormatter, normalizeMatchers } from '../../utils/matchers';\nimport { createContactPointLink, createMuteTimingLink } from '../../utils/misc';\nimport { InheritableProperties, getInheritedProperties } from '../../utils/notification-policies';\nimport { InsertPosition } from '../../utils/routeTree';\nimport { Authorize } from '../Authorize';\nimport { HoverCard } from '../HoverCard';\nimport { Label } from '../Label';\nimport { MetaText } from '../MetaText';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { Strong } from '../Strong';\nimport { GrafanaPoliciesExporter } from '../export/GrafanaPoliciesExporter';\n\nimport { Matchers } from './Matchers';\nimport { TIMING_OPTIONS_DEFAULTS, TimingOptions } from './timingOptions';\n\ninterface PolicyComponentProps {\n  receivers?: Receiver[];\n  alertGroups?: AlertmanagerGroup[];\n  contactPointsState?: ReceiversState;\n  readOnly?: boolean;\n  provisioned?: boolean;\n  inheritedProperties?: Partial<InheritableProperties>;\n  routesMatchingFilters?: RoutesMatchingFilters;\n\n  matchingInstancesPreview?: {\n    groupsMap?: Map<string, AlertmanagerGroup[]>;\n    enabled: boolean;\n  };\n\n  routeTree: RouteWithID;\n  currentRoute: RouteWithID;\n  alertManagerSourceName: string;\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, isAutogenerated?: boolean) => void;\n  onAddPolicy: (route: RouteWithID, position: InsertPosition) => void;\n  onDeletePolicy: (route: RouteWithID) => void;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n  isAutoGenerated?: boolean;\n}\n\nconst Policy = (props: PolicyComponentProps) => {\n  const {\n    receivers = [],\n    contactPointsState,\n    readOnly = false,\n    provisioned = false,\n    alertGroups = [],\n    alertManagerSourceName,\n    currentRoute,\n    routeTree,\n    inheritedProperties,\n    routesMatchingFilters = {\n      filtersApplied: false,\n      matchedRoutesWithPath: new Map<RouteWithID, RouteWithID[]>(),\n    },\n    matchingInstancesPreview = { enabled: false },\n    onEditPolicy,\n    onAddPolicy,\n    onDeletePolicy,\n    onShowAlertInstances,\n    isAutoGenerated = false,\n  } = props;\n\n  const styles = useStyles2(getStyles);\n\n  const isDefaultPolicy = currentRoute === routeTree;\n\n  const contactPoint = currentRoute.receiver;\n  const continueMatching = currentRoute.continue ?? false;\n\n  const matchers = normalizeMatchers(currentRoute);\n  const hasMatchers = Boolean(matchers && matchers.length);\n\n  const { filtersApplied, matchedRoutesWithPath } = routesMatchingFilters;\n  const matchedRoutes = Array.from(matchedRoutesWithPath.keys());\n\n  // check if this route matches the filters\n  const hasFocus = filtersApplied && matchedRoutes.some((route) => route.id === currentRoute.id);\n\n  // check if this route belongs to a path that matches the filters\n  const routesPath = Array.from(matchedRoutesWithPath.values()).flat();\n  const belongsToMatchPath = routesPath.some((route: RouteWithID) => route.id === currentRoute.id);\n\n  // gather errors here\n  const errors: ReactNode[] = [];\n\n  // if the route has no matchers, is not the default policy (that one has none) and it does not continue\n  // then we should warn the user that it's a suspicious setup\n  const showMatchesAllLabelsWarning = !hasMatchers && !isDefaultPolicy && !continueMatching;\n\n  // if the receiver / contact point has any errors show it on the policy\n  const actualContactPoint = contactPoint ?? inheritedProperties?.receiver ?? '';\n  const contactPointErrors = contactPointsState ? getContactPointErrors(actualContactPoint, contactPointsState) : [];\n\n  const allChildPolicies = currentRoute.routes ?? [];\n\n  // filter child policies that match\n  const childPolicies = filtersApplied\n    ? // filter by the ones that belong to the path that matches the filters\n      allChildPolicies.filter((policy) => routesPath.some((route: RouteWithID) => route.id === policy.id))\n    : allChildPolicies;\n\n  const hasChildPolicies = childPolicies.length > 0;\n\n  const [showExportDrawer, toggleShowExportDrawer] = useToggle(false);\n  const matchingAlertGroups = matchingInstancesPreview?.groupsMap?.get(currentRoute.id);\n\n  // sum all alert instances for all groups we're handling\n  const numberOfAlertInstances = matchingAlertGroups\n    ? sumBy(matchingAlertGroups, (group) => group.alerts.length)\n    : undefined;\n\n  // simplified routing permissions\n  const [isSupportedToSeeAutogeneratedChunk, isAllowedToSeeAutogeneratedChunk] = useAlertmanagerAbility(\n    AlertmanagerAction.ViewAutogeneratedPolicyTree\n  );\n\n  // we collapse the auto-generated policies by default\n  const isAutogeneratedPolicyRoot = isAutoGeneratedRootAndSimplifiedEnabled(currentRoute);\n  const [showPolicyChildren, togglePolicyChildren] = useToggle(isAutogeneratedPolicyRoot ? false : true);\n\n  const groupBy = currentRoute.group_by;\n  const muteTimings = currentRoute.mute_time_intervals ?? [];\n\n  const timingOptions: TimingOptions = {\n    group_wait: currentRoute.group_wait,\n    group_interval: currentRoute.group_interval,\n    repeat_interval: currentRoute.repeat_interval,\n  };\n\n  contactPointErrors.forEach((error) => {\n    errors.push(error);\n  });\n\n  const POLICIES_PER_PAGE = 20;\n\n  const [visibleChildPolicies, setVisibleChildPolicies] = useState(POLICIES_PER_PAGE);\n\n  // build the menu actions for our policy\n  const dropdownMenuActions: JSX.Element[] = useCreateDropdownMenuActions(\n    isAutoGenerated,\n    isDefaultPolicy,\n    provisioned,\n    onEditPolicy,\n    currentRoute,\n    toggleShowExportDrawer,\n    onDeletePolicy\n  );\n\n  // check if this policy should be visible. If it's autogenerated and the user is not allowed to see autogenerated\n  // policies then we should not show it. Same if the user is not supported to see autogenerated policies.\n  const hideCurrentPolicy =\n    isAutoGenerated && (!isAllowedToSeeAutogeneratedChunk || !isSupportedToSeeAutogeneratedChunk);\n  const hideCurrentPolicyForFilters = filtersApplied && !belongsToMatchPath;\n\n  if (hideCurrentPolicy || hideCurrentPolicyForFilters) {\n    return null;\n  }\n\n  const isImmutablePolicy = isDefaultPolicy || isAutogeneratedPolicyRoot;\n  // TODO dead branch detection, warnings for all sort of configs that won't work or will never be activated\n\n  const childPoliciesBelongingToMatchPath = childPolicies.filter((child) =>\n    routesPath.some((route: RouteWithID) => route.id === child.id)\n  );\n\n  // child policies to render are the ones that belong to the path that matches the filters\n  const childPoliciesToRender = filtersApplied ? childPoliciesBelongingToMatchPath : childPolicies;\n  const pageOfChildren = childPoliciesToRender.slice(0, visibleChildPolicies);\n\n  const moreCount = childPoliciesToRender.length - pageOfChildren.length;\n  const showMore = moreCount > 0;\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={1.5}>\n        <div\n          className={styles.policyWrapper(hasFocus)}\n          data-testid={isDefaultPolicy ? 'am-root-route-container' : 'am-route-container'}\n        >\n          {/* continueMatching and showMatchesAllLabelsWarning are mutually exclusive so the icons can't overlap */}\n          {continueMatching && <ContinueMatchingIndicator />}\n          {showMatchesAllLabelsWarning && <AllMatchesIndicator />}\n\n          <div className={styles.policyItemWrapper}>\n            <Stack direction=\"column\" gap={1}>\n              {/* Matchers and actions */}\n              <div>\n                <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n                  {hasChildPolicies ? (\n                    <IconButton\n                      name={showPolicyChildren ? 'angle-down' : 'angle-right'}\n                      onClick={togglePolicyChildren}\n                      aria-label={showPolicyChildren ? 'Collapse' : 'Expand'}\n                    />\n                  ) : null}\n                  {isImmutablePolicy ? (\n                    isAutogeneratedPolicyRoot ? (\n                      <AutogeneratedRootIndicator />\n                    ) : (\n                      <DefaultPolicyIndicator />\n                    )\n                  ) : hasMatchers ? (\n                    <Matchers matchers={matchers ?? []} formatter={getAmMatcherFormatter(alertManagerSourceName)} />\n                  ) : (\n                    <span className={styles.metadata}>No matchers</span>\n                  )}\n                  <Spacer />\n                  {/* TODO maybe we should move errors to the gutter instead? */}\n                  {errors.length > 0 && <Errors errors={errors} />}\n                  {provisioned && <ProvisioningBadge />}\n                  <Stack direction=\"row\" gap={0.5}>\n                    {!isAutoGenerated && !readOnly && (\n                      <Authorize actions={[AlertmanagerAction.CreateNotificationPolicy]}>\n                        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n                          {isDefaultPolicy ? (\n                            <Button\n                              variant=\"secondary\"\n                              icon=\"plus\"\n                              size=\"sm\"\n                              disabled={provisioned}\n                              type=\"button\"\n                              onClick={() => onAddPolicy(currentRoute, 'child')}\n                            >\n                              New child policy\n                            </Button>\n                          ) : (\n                            <Dropdown\n                              overlay={\n                                <Menu>\n                                  <Menu.Item\n                                    label=\"Insert above\"\n                                    icon=\"arrow-up\"\n                                    onClick={() => onAddPolicy(currentRoute, 'above')}\n                                  />\n                                  <Menu.Item\n                                    label=\"Insert below\"\n                                    icon=\"arrow-down\"\n                                    onClick={() => onAddPolicy(currentRoute, 'below')}\n                                  />\n                                  <Menu.Divider />\n                                  <Menu.Item\n                                    label=\"New child policy\"\n                                    icon=\"plus\"\n                                    onClick={() => onAddPolicy(currentRoute, 'child')}\n                                  />\n                                </Menu>\n                              }\n                            >\n                              <Button\n                                size=\"sm\"\n                                variant=\"secondary\"\n                                disabled={provisioned}\n                                icon=\"angle-down\"\n                                type=\"button\"\n                              >\n                                Add new policy\n                              </Button>\n                            </Dropdown>\n                          )}\n                        </ConditionalWrap>\n                      </Authorize>\n                    )}\n                    {dropdownMenuActions.length > 0 && (\n                      <Dropdown overlay={<Menu>{dropdownMenuActions}</Menu>}>\n                        <Button\n                          icon=\"ellipsis-h\"\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          type=\"button\"\n                          aria-label=\"more-actions\"\n                          data-testid=\"more-actions\"\n                        />\n                      </Dropdown>\n                    )}\n                  </Stack>\n                </Stack>\n              </div>\n\n              {/* Metadata row */}\n              <MetadataRow\n                matchingInstancesPreview={matchingInstancesPreview}\n                numberOfAlertInstances={numberOfAlertInstances}\n                contactPoint={contactPoint ?? undefined}\n                groupBy={groupBy}\n                muteTimings={muteTimings}\n                timingOptions={timingOptions}\n                inheritedProperties={inheritedProperties}\n                alertManagerSourceName={alertManagerSourceName}\n                receivers={receivers}\n                matchingAlertGroups={matchingAlertGroups}\n                matchers={matchers}\n                isDefaultPolicy={isDefaultPolicy}\n                onShowAlertInstances={onShowAlertInstances}\n              />\n            </Stack>\n          </div>\n        </div>\n        <div className={styles.childPolicies}>\n          {showPolicyChildren && (\n            <>\n              {pageOfChildren.map((child) => {\n                const childInheritedProperties = getInheritedProperties(currentRoute, child, inheritedProperties);\n                // This child is autogenerated if it's the autogenerated root or if it's a child of an autogenerated policy.\n                const isThisChildAutoGenerated = isAutoGeneratedRootAndSimplifiedEnabled(child) || isAutoGenerated;\n                /* pass the \"readOnly\" prop from the parent, because for any child policy , if its parent it's not editable,\n                then the child policy should not be editable either */\n                const isThisChildReadOnly = readOnly || provisioned || isAutoGenerated;\n\n                return (\n                  <Policy\n                    key={child.id}\n                    routeTree={routeTree}\n                    currentRoute={child}\n                    receivers={receivers}\n                    contactPointsState={contactPointsState}\n                    readOnly={isThisChildReadOnly}\n                    inheritedProperties={childInheritedProperties}\n                    onAddPolicy={onAddPolicy}\n                    onEditPolicy={onEditPolicy}\n                    onDeletePolicy={onDeletePolicy}\n                    onShowAlertInstances={onShowAlertInstances}\n                    alertManagerSourceName={alertManagerSourceName}\n                    alertGroups={alertGroups}\n                    routesMatchingFilters={routesMatchingFilters}\n                    matchingInstancesPreview={matchingInstancesPreview}\n                    isAutoGenerated={isThisChildAutoGenerated}\n                    provisioned={provisioned}\n                  />\n                );\n              })}\n              {showMore && (\n                <Button\n                  size=\"sm\"\n                  icon=\"angle-down\"\n                  variant=\"secondary\"\n                  className={styles.moreButtons}\n                  onClick={() => setVisibleChildPolicies(visibleChildPolicies + POLICIES_PER_PAGE)}\n                >\n                  {moreCount} additional {pluralize('policy', moreCount)}\n                </Button>\n              )}\n            </>\n          )}\n        </div>\n        {showExportDrawer && <GrafanaPoliciesExporter onClose={toggleShowExportDrawer} />}\n      </Stack>\n    </>\n  );\n};\n\ninterface MetadataRowProps {\n  matchingInstancesPreview: { groupsMap?: Map<string, AlertmanagerGroup[]>; enabled: boolean };\n  numberOfAlertInstances?: number;\n  contactPoint?: string;\n  groupBy?: string[];\n  muteTimings?: string[];\n  timingOptions?: TimingOptions;\n  inheritedProperties?: Partial<InheritableProperties>;\n  alertManagerSourceName: string;\n  receivers: Receiver[];\n  matchingAlertGroups?: AlertmanagerGroup[];\n  matchers?: ObjectMatcher[];\n  isDefaultPolicy: boolean;\n  onShowAlertInstances: (\n    alertGroups: AlertmanagerGroup[],\n    matchers?: ObjectMatcher[],\n    formatter?: MatcherFormatter\n  ) => void;\n}\n\nfunction MetadataRow({\n  numberOfAlertInstances,\n  isDefaultPolicy,\n  timingOptions,\n  groupBy,\n  muteTimings = [],\n  matchingInstancesPreview,\n  inheritedProperties,\n  matchingAlertGroups,\n  onShowAlertInstances,\n  matchers,\n  contactPoint,\n  alertManagerSourceName,\n  receivers,\n}: MetadataRowProps) {\n  const styles = useStyles2(getStyles);\n\n  const inheritedGrouping = inheritedProperties && inheritedProperties.group_by;\n  const hasInheritedProperties = inheritedProperties && Object.keys(inheritedProperties).length > 0;\n\n  const noGrouping = isArray(groupBy) && groupBy[0] === '...';\n  const customGrouping = !noGrouping && isArray(groupBy) && groupBy.length > 0;\n  const singleGroup = isDefaultPolicy && isArray(groupBy) && groupBy.length === 0;\n\n  const hasMuteTimings = Boolean(muteTimings.length);\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {matchingInstancesPreview.enabled && (\n          <MetaText\n            icon=\"layers-alt\"\n            onClick={() => {\n              matchingAlertGroups &&\n                onShowAlertInstances(matchingAlertGroups, matchers, getAmMatcherFormatter(alertManagerSourceName));\n            }}\n            data-testid=\"matching-instances\"\n          >\n            <Strong>{numberOfAlertInstances ?? '-'}</Strong>\n            <span>{pluralize('instance', numberOfAlertInstances)}</span>\n          </MetaText>\n        )}\n        {contactPoint && (\n          <MetaText icon=\"at\" data-testid=\"contact-point\">\n            <span>Delivered to</span>\n            <ContactPointsHoverDetails\n              alertManagerSourceName={alertManagerSourceName}\n              receivers={receivers}\n              contactPoint={contactPoint}\n            />\n          </MetaText>\n        )}\n        {!inheritedGrouping && (\n          <>\n            {customGrouping && (\n              <MetaText icon=\"layer-group\" data-testid=\"grouping\">\n                <span>Grouped by</span>\n                <Strong>{groupBy.join(', ')}</Strong>\n              </MetaText>\n            )}\n            {singleGroup && (\n              <MetaText icon=\"layer-group\">\n                <span>Single group</span>\n              </MetaText>\n            )}\n            {noGrouping && (\n              <MetaText icon=\"layer-group\">\n                <span>Not grouping</span>\n              </MetaText>\n            )}\n          </>\n        )}\n        {hasMuteTimings && (\n          <MetaText icon=\"calendar-slash\" data-testid=\"mute-timings\">\n            <span>Muted when</span>\n            <MuteTimings timings={muteTimings} alertManagerSourceName={alertManagerSourceName} />\n          </MetaText>\n        )}\n        {timingOptions && (\n          // for the default policy we will also merge the default timings, that way a user can observe what the timing options would be\n          <TimingOptionsMeta\n            timingOptions={isDefaultPolicy ? defaults(timingOptions, TIMING_OPTIONS_DEFAULTS) : timingOptions}\n          />\n        )}\n        {hasInheritedProperties && (\n          <>\n            <MetaText icon=\"corner-down-right-alt\" data-testid=\"inherited-properties\">\n              <span>Inherited</span>\n              <InheritedProperties properties={inheritedProperties} />\n            </MetaText>\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nexport const useCreateDropdownMenuActions = (\n  isAutoGenerated: boolean,\n  isDefaultPolicy: boolean,\n  provisioned: boolean,\n  onEditPolicy: (route: RouteWithID, isDefault?: boolean, readOnly?: boolean) => void,\n  currentRoute: RouteWithID,\n  toggleShowExportDrawer: (nextValue?: any) => void,\n  onDeletePolicy: (route: RouteWithID) => void\n) => {\n  const [\n    [updatePoliciesSupported, updatePoliciesAllowed],\n    [deletePolicySupported, deletePolicyAllowed],\n    [exportPoliciesSupported, exportPoliciesAllowed],\n  ] = useAlertmanagerAbilities([\n    AlertmanagerAction.UpdateNotificationPolicyTree,\n    AlertmanagerAction.DeleteNotificationPolicy,\n    AlertmanagerAction.ExportNotificationPolicies,\n  ]);\n  const dropdownMenuActions = [];\n  const showExportAction = exportPoliciesAllowed && exportPoliciesSupported && isDefaultPolicy && !isAutoGenerated;\n  const showEditAction = updatePoliciesSupported && updatePoliciesAllowed;\n  const showDeleteAction = deletePolicySupported && deletePolicyAllowed && !isDefaultPolicy && !isAutoGenerated;\n\n  if (showEditAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"edit-policy\">\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            icon=\"edit\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Edit\"\n            onClick={() => onEditPolicy(currentRoute, isDefaultPolicy)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n\n  if (showExportAction) {\n    dropdownMenuActions.push(\n      <Menu.Item key=\"export-policy\" icon=\"download-alt\" label=\"Export\" onClick={toggleShowExportDrawer} />\n    );\n  }\n\n  if (showDeleteAction) {\n    dropdownMenuActions.push(\n      <Fragment key=\"delete-policy\">\n        <Menu.Divider />\n        <ConditionalWrap shouldWrap={provisioned} wrap={ProvisionedTooltip}>\n          <Menu.Item\n            destructive\n            icon=\"trash-alt\"\n            disabled={provisioned || isAutoGenerated}\n            label=\"Delete\"\n            onClick={() => onDeletePolicy(currentRoute)}\n          />\n        </ConditionalWrap>\n      </Fragment>\n    );\n  }\n  return dropdownMenuActions;\n};\n\nexport const AUTOGENERATED_ROOT_LABEL_NAME = '__grafana_autogenerated__';\n\nexport function isAutoGeneratedRootAndSimplifiedEnabled(route: RouteWithID) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_ROOT_LABEL_NAME &&\n        objectMatcher[1] === MatcherOperator.equal &&\n        objectMatcher[2] === 'true'\n      );\n    }) ?? false\n  );\n  // return simplifiedRoutingToggleEnabled && route.receiver === 'contact_point_5';\n}\n\nconst ProvisionedTooltip = (children: ReactNode) => (\n  <Tooltip content=\"Provisioned items cannot be edited in the UI\" placement=\"top\">\n    <span>{children}</span>\n  </Tooltip>\n);\n\nconst Errors: FC<{ errors: React.ReactNode[] }> = ({ errors }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"column\" gap={0.5}>\n        {errors.map((error) => (\n          <Fragment key={uniqueId()}>{error}</Fragment>\n        ))}\n      </Stack>\n    }\n  >\n    <span>\n      <Badge icon=\"exclamation-circle\" color=\"red\" text={pluralize('error', errors.length, true)} />\n    </span>\n  </HoverCard>\n);\n\nconst ContinueMatchingIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This route will continue matching other policies\">\n      <div className={styles.gutterIcon} data-testid=\"continue-matching\">\n        <Icon name=\"arrow-down\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nconst AllMatchesIndicator: FC = () => {\n  const styles = useStyles2(getStyles);\n  return (\n    <Tooltip placement=\"top\" content=\"This policy matches all labels\">\n      <div className={styles.gutterIcon} data-testid=\"matches-all\">\n        <Icon name=\"exclamation-triangle\" />\n      </div>\n    </Tooltip>\n  );\n};\n\nfunction DefaultPolicyIndicator() {\n  const styles = useStyles2(getStyles);\n  return (\n    <>\n      <strong>Default policy</strong>\n      <span className={styles.metadata}>\n        All alert instances will be handled by the default policy if no other matching policies are found.\n      </span>\n    </>\n  );\n}\n\nfunction AutogeneratedRootIndicator() {\n  return <strong> Auto-generated policies</strong>;\n}\n\nconst InheritedProperties: FC<{ properties: InheritableProperties }> = ({ properties }) => (\n  <HoverCard\n    arrow\n    placement=\"top\"\n    content={\n      <Stack direction=\"row\" gap={0.5}>\n        {Object.entries(properties).map(([key, value]) => {\n          if (!value) {\n            return null;\n          }\n\n          return (\n            <Label\n              key={key}\n              label={routePropertyToLabel(key)}\n              value={<Strong>{routePropertyToValue(key, value)}</Strong>}\n            />\n          );\n        })}\n      </Stack>\n    }\n  >\n    <div>\n      <Strong>{pluralize('property', Object.keys(properties).length, true)}</Strong>\n    </div>\n  </HoverCard>\n);\n\nconst MuteTimings: FC<{ timings: string[]; alertManagerSourceName: string }> = ({\n  timings,\n  alertManagerSourceName,\n}) => {\n  /* TODO make a better mute timing overview, allow combining multiple in to one overview */\n  /*\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={<MetaText icon=\"calendar-slash\">Mute Timings</MetaText>}\n      content={\n        // TODO show a combined view of all mute timings here, combining the weekdays, years, months, etc\n        <Stack direction=\"row\" gap={0.5}>\n          <Label label=\"Weekdays\" value=\"Saturday and Sunday\" />\n        </Stack>\n      }\n    >\n      <div>\n        <Strong>{muteTimings.join(', ')}</Strong>\n      </div>\n    </HoverCard>\n  */\n  return (\n    <div>\n      <Strong>\n        {timings.map((timing) => (\n          <Link key={timing} to={createMuteTimingLink(timing, alertManagerSourceName)}>\n            {timing}\n          </Link>\n        ))}\n      </Strong>\n    </div>\n  );\n};\n\nconst TimingOptionsMeta: FC<{ timingOptions: TimingOptions }> = ({ timingOptions }) => {\n  const groupWait = timingOptions.group_wait;\n  const groupInterval = timingOptions.group_interval;\n\n  // we don't have any timing options to show – we're inheriting everything from the parent\n  // and those show up in a separate \"inherited properties\" component\n  if (!groupWait && !groupInterval) {\n    return null;\n  }\n\n  return (\n    <MetaText icon=\"hourglass\" data-testid=\"timing-options\">\n      <span>Wait</span>\n      {groupWait && (\n        <Tooltip\n          placement=\"top\"\n          content=\"How long to initially wait to send a notification for a group of alert instances.\"\n        >\n          <span>\n            <Strong>{groupWait}</Strong> <span>to group instances</span>\n            {groupWait && groupInterval && ','}\n          </span>\n        </Tooltip>\n      )}\n      {groupInterval && (\n        <Tooltip\n          placement=\"top\"\n          content=\"How long to wait before sending a notification about new alerts that are added to a group of alerts for which an initial notification has already been sent.\"\n        >\n          <span>\n            <Strong>{groupInterval}</Strong> <span>before sending updates</span>\n          </span>\n        </Tooltip>\n      )}\n    </MetaText>\n  );\n};\n\ninterface ContactPointDetailsProps {\n  alertManagerSourceName: string;\n  contactPoint: string;\n  receivers: Receiver[];\n}\n\n// @TODO make this work for cloud AMs too\nconst ContactPointsHoverDetails: FC<ContactPointDetailsProps> = ({\n  alertManagerSourceName,\n  contactPoint,\n  receivers,\n}) => {\n  const details = receivers.find((receiver) => receiver.name === contactPoint);\n  if (!details) {\n    return (\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    );\n  }\n\n  const integrations = details.grafana_managed_receiver_configs;\n  if (!integrations) {\n    return (\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    );\n  }\n\n  const groupedIntegrations = groupBy(details.grafana_managed_receiver_configs, (config) => config.type);\n\n  return (\n    <HoverCard\n      arrow\n      placement=\"top\"\n      header={\n        <MetaText icon=\"at\">\n          <div>Contact Point</div>\n          <Strong>{contactPoint}</Strong>\n        </MetaText>\n      }\n      key={uniqueId()}\n      content={\n        <Stack direction=\"row\" gap={0.5}>\n          {/* use \"label\" to indicate how many of that type we have in the contact point */}\n          {Object.entries(groupedIntegrations).map(([type, integrations]) => (\n            <Label\n              key={uniqueId()}\n              label={integrations.length > 1 ? integrations.length : undefined}\n              icon={INTEGRATION_ICONS[type]}\n              value={upperFirst(type)}\n            />\n          ))}\n        </Stack>\n      }\n    >\n      <Link to={createContactPointLink(contactPoint, alertManagerSourceName)}>\n        <Strong>{contactPoint}</Strong>\n      </Link>\n    </HoverCard>\n  );\n};\n\nfunction getContactPointErrors(contactPoint: string, contactPointsState: ReceiversState): JSX.Element[] {\n  const notifierStates = Object.entries(contactPointsState[contactPoint]?.notifiers ?? []);\n  const contactPointErrors = notifierStates.reduce((acc: JSX.Element[] = [], [_, notifierStatuses]) => {\n    const notifierErrors = notifierStatuses\n      .filter((status) => status.lastNotifyAttemptError)\n      .map((status) => (\n        <Label\n          icon=\"at\"\n          key={uniqueId()}\n          label={`Contact Point › ${status.name}`}\n          value={status.lastNotifyAttemptError}\n        />\n      ));\n\n    return acc.concat(notifierErrors);\n  }, []);\n\n  return contactPointErrors;\n}\n\nconst routePropertyToLabel = (key: keyof InheritableProperties | string): string => {\n  switch (key) {\n    case 'receiver':\n      return 'Contact Point';\n    case 'group_by':\n      return 'Group by';\n    case 'group_interval':\n      return 'Group interval';\n    case 'group_wait':\n      return 'Group wait';\n    case 'repeat_interval':\n      return 'Repeat interval';\n    default:\n      return key;\n  }\n};\n\nconst routePropertyToValue = (key: keyof InheritableProperties | string, value: string | string[]): React.ReactNode => {\n  const isNotGrouping = key === 'group_by' && Array.isArray(value) && value[0] === '...';\n  const isSingleGroup = key === 'group_by' && Array.isArray(value) && value.length === 0;\n\n  if (isNotGrouping) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Not grouping\n      </Text>\n    );\n  }\n\n  if (isSingleGroup) {\n    return (\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        Single group\n      </Text>\n    );\n  }\n\n  return Array.isArray(value) ? value.join(', ') : value;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css({\n        color: '#fff',\n        background: color,\n        padding: `${theme.spacing(0.33)} ${theme.spacing(0.66)}`,\n        fontSize: theme.typography.bodySmall.fontSize,\n        border: `solid 1px ${borderColor}`,\n        borderRadius: theme.shape.radius.default,\n      }),\n    };\n  },\n  childPolicies: css({\n    marginLeft: theme.spacing(4),\n    position: 'relative',\n    '&:before': {\n      content: '\"\"',\n      position: 'absolute',\n      height: 'calc(100% - 10px)',\n      borderLeft: `solid 1px ${theme.colors.border.weak}`,\n      marginTop: 0,\n      marginLeft: '-20px',\n    },\n  }),\n  policyItemWrapper: css({\n    padding: theme.spacing(1.5),\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: theme.shape.borderRadius(2),\n    borderBottomRightRadius: theme.shape.borderRadius(2),\n  }),\n  policyWrapper: (hasFocus = false) =>\n    css({\n      flex: 1,\n      position: 'relative',\n      background: theme.colors.background.secondary,\n      borderRadius: theme.shape.radius.default,\n      border: `solid 1px ${theme.colors.border.weak}`,\n      ...(hasFocus && {\n        borderColor: theme.colors.primary.border,\n        background: theme.colors.primary.transparent,\n      }),\n    }),\n  metadata: css({\n    color: theme.colors.text.secondary,\n    fontSize: theme.typography.bodySmall.fontSize,\n    fontWeight: theme.typography.bodySmall.fontWeight,\n  }),\n  break: css({\n    width: '100%',\n    height: 0,\n    marginBottom: theme.spacing(2),\n  }),\n  gutterIcon: css({\n    position: 'absolute',\n    top: 0,\n    transform: 'translateY(50%)',\n    left: `-${theme.spacing(4)}`,\n    color: theme.colors.text.secondary,\n    background: theme.colors.background.primary,\n    width: '25px',\n    height: '25px',\n    textAlign: 'center',\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderRadius: theme.shape.radius.default,\n    padding: 0,\n  }),\n  moreButtons: css({\n    marginTop: theme.spacing(0.5),\n    marginBottom: theme.spacing(1.5),\n  }),\n});\n\nexport { Policy };\n","import { css } from '@emotion/css';\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { useAsyncFn } from 'react-use';\n\nimport { GrafanaTheme2, UrlQueryMap } from '@grafana/data';\nimport { Alert, LoadingPlaceholder, Stack, Tab, TabContent, TabsBar, useStyles2, withErrorBoundary } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useCleanup } from '../../../core/hooks/useCleanup';\n\nimport { alertmanagerApi } from './api/alertmanagerApi';\nimport { useGetContactPointsState } from './api/receiversApi';\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport { GrafanaAlertmanagerDeliveryWarning } from './components/GrafanaAlertmanagerDeliveryWarning';\nimport { MuteTimingsTable } from './components/mute-timings/MuteTimingsTable';\nimport { mergeTimeIntervals } from './components/mute-timings/util';\nimport {\n  NotificationPoliciesFilter,\n  findRoutesByMatchers,\n  findRoutesMatchingPredicate,\n} from './components/notification-policies/Filters';\nimport {\n  useAddPolicyModal,\n  useAlertGroupsModal,\n  useDeletePolicyModal,\n  useEditPolicyModal,\n} from './components/notification-policies/Modals';\nimport { Policy } from './components/notification-policies/Policy';\nimport { useAlertmanagerConfig } from './hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from './state/AlertmanagerContext';\nimport { updateAlertManagerConfigAction } from './state/actions';\nimport { FormAmRoute } from './types/amroutes';\nimport { useRouteGroupsMatcher } from './useRouteGroupsMatcher';\nimport { addUniqueIdentifierToRoute } from './utils/amroutes';\nimport { computeInheritedTree } from './utils/notification-policies';\nimport { initialAsyncRequestState } from './utils/redux';\nimport {\n  InsertPosition,\n  addRouteToReferenceRoute,\n  cleanRouteIDs,\n  mergePartialAmRouteWithRouteTree,\n  omitRouteFromRouteTree,\n} from './utils/routeTree';\n\nenum ActiveTab {\n  NotificationPolicies = 'notification_policies',\n  MuteTimings = 'mute_timings',\n}\n\nconst AmRoutes = () => {\n  const dispatch = useDispatch();\n  const styles = useStyles2(getStyles);\n\n  const { useGetAlertmanagerAlertGroupsQuery } = alertmanagerApi;\n\n  const [queryParams, setQueryParams] = useQueryParams();\n  const { tab } = getActiveTabFromUrl(queryParams);\n\n  const [activeTab, setActiveTab] = useState<ActiveTab>(tab);\n  const [updatingTree, setUpdatingTree] = useState<boolean>(false);\n  const [contactPointFilter, setContactPointFilter] = useState<string | undefined>();\n  const [labelMatchersFilter, setLabelMatchersFilter] = useState<ObjectMatcher[]>([]);\n\n  const { selectedAlertmanager, hasConfigurationAPI, isGrafanaAlertmanager } = useAlertmanager();\n  const { getRouteGroupsMap } = useRouteGroupsMatcher();\n\n  const contactPointsState = useGetContactPointsState(selectedAlertmanager ?? '');\n\n  const {\n    currentData: result,\n    isLoading: resultLoading,\n    error: resultError,\n  } = useAlertmanagerConfig(selectedAlertmanager, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n\n  const config = result?.alertmanager_config;\n\n  const { currentData: alertGroups, refetch: refetchAlertGroups } = useGetAlertmanagerAlertGroupsQuery(\n    { amSourceName: selectedAlertmanager ?? '' },\n    { skip: !selectedAlertmanager }\n  );\n\n  const receivers = config?.receivers ?? [];\n\n  const rootRoute = useMemo(() => {\n    if (config?.route) {\n      return addUniqueIdentifierToRoute(config.route);\n    }\n    return;\n  }, [config?.route]);\n\n  // useAsync could also work but it's hard to wait until it's done in the tests\n  // Combining with useEffect gives more predictable results because the condition is in useEffect\n  const [{ value: routeAlertGroupsMap, error: instancesPreviewError }, triggerGetRouteGroupsMap] = useAsyncFn(\n    getRouteGroupsMap,\n    [getRouteGroupsMap]\n  );\n\n  useEffect(() => {\n    if (rootRoute && alertGroups) {\n      triggerGetRouteGroupsMap(rootRoute, alertGroups, { unquoteMatchers: !isGrafanaAlertmanager });\n    }\n  }, [rootRoute, alertGroups, triggerGetRouteGroupsMap, isGrafanaAlertmanager]);\n\n  // these are computed from the contactPoint and labels matchers filter\n  const routesMatchingFilters = useMemo(() => {\n    if (!rootRoute) {\n      const emptyResult: RoutesMatchingFilters = {\n        filtersApplied: false,\n        matchedRoutesWithPath: new Map(),\n      };\n\n      return emptyResult;\n    }\n\n    return findRoutesMatchingFilters(rootRoute, { contactPointFilter, labelMatchersFilter });\n  }, [contactPointFilter, labelMatchersFilter, rootRoute]);\n\n  const isProvisioned = Boolean(config?.route?.provenance);\n\n  function handleSave(partialRoute: Partial<FormAmRoute>) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = mergePartialAmRouteWithRouteTree(selectedAlertmanager ?? '', partialRoute, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleDelete(route: RouteWithID) {\n    if (!rootRoute) {\n      return;\n    }\n    const newRouteTree = omitRouteFromRouteTree(route, rootRoute);\n    updateRouteTree(newRouteTree);\n  }\n\n  function handleAdd(partialRoute: Partial<FormAmRoute>, referenceRoute: RouteWithID, insertPosition: InsertPosition) {\n    if (!rootRoute) {\n      return;\n    }\n\n    const newRouteTree = addRouteToReferenceRoute(\n      selectedAlertmanager ?? '',\n      partialRoute,\n      referenceRoute,\n      rootRoute,\n      insertPosition\n    );\n    updateRouteTree(newRouteTree);\n  }\n\n  function updateRouteTree(routeTree: Route | RouteWithID) {\n    if (!result) {\n      return;\n    }\n\n    // make sure we omit all IDs from our routes\n    const newRouteTree = cleanRouteIDs(routeTree);\n\n    setUpdatingTree(true);\n\n    dispatch(\n      updateAlertManagerConfigAction({\n        newConfig: {\n          ...result,\n          alertmanager_config: {\n            ...result.alertmanager_config,\n            route: newRouteTree,\n          },\n        },\n        oldConfig: result,\n        alertManagerSourceName: selectedAlertmanager!,\n        successMessage: 'Updated notification policies',\n      })\n    )\n      .unwrap()\n      .then(() => {\n        if (selectedAlertmanager) {\n          refetchAlertGroups();\n        }\n        closeEditModal();\n        closeAddModal();\n        closeDeleteModal();\n      })\n      .finally(() => {\n        setUpdatingTree(false);\n      });\n  }\n\n  // edit, add, delete modals\n  const [addModal, openAddModal, closeAddModal] = useAddPolicyModal(receivers, handleAdd, updatingTree);\n  const [editModal, openEditModal, closeEditModal] = useEditPolicyModal(\n    selectedAlertmanager ?? '',\n    receivers,\n    handleSave,\n    updatingTree\n  );\n  const [deleteModal, openDeleteModal, closeDeleteModal] = useDeletePolicyModal(handleDelete, updatingTree);\n  const [alertInstancesModal, showAlertGroupsModal] = useAlertGroupsModal();\n\n  useCleanup((state) => (state.unifiedAlerting.saveAMConfig = initialAsyncRequestState));\n\n  if (!selectedAlertmanager) {\n    return null;\n  }\n  const time_intervals = result?.alertmanager_config ? mergeTimeIntervals(result?.alertmanager_config) : [];\n\n  const numberOfMuteTimings = time_intervals.length;\n  const haveData = result && !resultError && !resultLoading;\n  const isFetching = !result && resultLoading;\n  const haveError = resultError && !resultLoading;\n\n  const muteTimingsTabActive = activeTab === ActiveTab.MuteTimings;\n  const policyTreeTabActive = activeTab === ActiveTab.NotificationPolicies;\n\n  return (\n    <>\n      <TabsBar>\n        <Tab\n          label={'Notification Policies'}\n          active={policyTreeTabActive}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.NotificationPolicies);\n            setQueryParams({ tab: ActiveTab.NotificationPolicies });\n          }}\n        />\n        <Tab\n          label={'Mute Timings'}\n          active={muteTimingsTabActive}\n          counter={numberOfMuteTimings}\n          onChangeTab={() => {\n            setActiveTab(ActiveTab.MuteTimings);\n            setQueryParams({ tab: ActiveTab.MuteTimings });\n          }}\n        />\n      </TabsBar>\n      <TabContent className={styles.tabContent}>\n        {isFetching && <LoadingPlaceholder text=\"Loading Alertmanager config...\" />}\n        {haveError && (\n          <Alert severity=\"error\" title=\"Error loading Alertmanager config\">\n            {resultError.message || 'Unknown error.'}\n          </Alert>\n        )}\n        {haveData && (\n          <>\n            {policyTreeTabActive && (\n              <>\n                <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager} />\n                <Stack direction=\"column\" gap={1}>\n                  {rootRoute && (\n                    <NotificationPoliciesFilter\n                      receivers={receivers}\n                      onChangeMatchers={setLabelMatchersFilter}\n                      onChangeReceiver={setContactPointFilter}\n                      matchingCount={routesMatchingFilters.matchedRoutesWithPath.size}\n                    />\n                  )}\n                  {rootRoute && (\n                    <Policy\n                      receivers={receivers}\n                      routeTree={rootRoute}\n                      currentRoute={rootRoute}\n                      alertGroups={alertGroups ?? []}\n                      contactPointsState={contactPointsState.receivers}\n                      readOnly={!hasConfigurationAPI}\n                      provisioned={isProvisioned}\n                      alertManagerSourceName={selectedAlertmanager}\n                      onAddPolicy={openAddModal}\n                      onEditPolicy={openEditModal}\n                      onDeletePolicy={openDeleteModal}\n                      onShowAlertInstances={showAlertGroupsModal}\n                      routesMatchingFilters={routesMatchingFilters}\n                      matchingInstancesPreview={{ groupsMap: routeAlertGroupsMap, enabled: !instancesPreviewError }}\n                      isAutoGenerated={false}\n                    />\n                  )}\n                </Stack>\n                {addModal}\n                {editModal}\n                {deleteModal}\n                {alertInstancesModal}\n              </>\n            )}\n            {muteTimingsTabActive && (\n              <MuteTimingsTable alertManagerSourceName={selectedAlertmanager} hideActions={!hasConfigurationAPI} />\n            )}\n          </>\n        )}\n      </TabContent>\n    </>\n  );\n};\n\ntype RouteFilters = {\n  contactPointFilter?: string;\n  labelMatchersFilter?: ObjectMatcher[];\n};\n\ntype FilterResult = Map<RouteWithID, RouteWithID[]>;\n\nexport interface RoutesMatchingFilters {\n  filtersApplied: boolean;\n  matchedRoutesWithPath: FilterResult;\n}\n\nexport const findRoutesMatchingFilters = (rootRoute: RouteWithID, filters: RouteFilters): RoutesMatchingFilters => {\n  const { contactPointFilter, labelMatchersFilter = [] } = filters;\n  const hasFilter = contactPointFilter || labelMatchersFilter.length > 0;\n  const havebothFilters = Boolean(contactPointFilter) && labelMatchersFilter.length > 0;\n\n  // if filters are empty we short-circuit this function\n  if (!hasFilter) {\n    return { filtersApplied: false, matchedRoutesWithPath: new Map() };\n  }\n\n  // we'll collect all of the routes matching the filters\n  // we track an array of matching routes, each item in the array is for 1 type of filter\n  //\n  // [contactPointMatches, labelMatcherMatches] -> [[{ a: [], b: [] }], [{ a: [], c: [] }]]\n  // later we'll use intersection to find results in all sets of filter matchers\n  let matchedRoutes: RouteWithID[][] = [];\n\n  // compute fully inherited tree so all policies have their inherited receiver\n  const fullRoute = computeInheritedTree(rootRoute);\n\n  // find all routes for our contact point filter\n  const matchingRoutesForContactPoint = contactPointFilter\n    ? findRoutesMatchingPredicate(fullRoute, (route) => route.receiver === contactPointFilter)\n    : new Map();\n\n  const routesMatchingContactPoint = Array.from(matchingRoutesForContactPoint.keys());\n  if (routesMatchingContactPoint) {\n    matchedRoutes.push(routesMatchingContactPoint);\n  }\n\n  // find all routes matching our label matchers\n  const matchingRoutesForLabelMatchers = labelMatchersFilter.length\n    ? findRoutesMatchingPredicate(fullRoute, (route) => findRoutesByMatchers(route, labelMatchersFilter))\n    : new Map();\n\n  const routesMatchingLabelFilters = Array.from(matchingRoutesForLabelMatchers.keys());\n  if (matchingRoutesForLabelMatchers.size > 0) {\n    matchedRoutes.push(routesMatchingLabelFilters);\n  }\n\n  // now that we have our maps for all filters, we just need to find the intersection of all maps by route if we have both filters\n  const routesForAllFilterResults = havebothFilters\n    ? findMapIntersection(matchingRoutesForLabelMatchers, matchingRoutesForContactPoint)\n    : new Map([...matchingRoutesForLabelMatchers, ...matchingRoutesForContactPoint]);\n\n  return {\n    filtersApplied: true,\n    matchedRoutesWithPath: routesForAllFilterResults,\n  };\n};\n\n// this function takes multiple maps and creates a new map with routes that exist in all maps\n//\n// map 1: { a: [], b: [] }\n// map 2: { a: [], c: [] }\n// return: { a: [] }\nfunction findMapIntersection(...matchingRoutes: FilterResult[]): FilterResult {\n  const result = new Map<RouteWithID, RouteWithID[]>();\n\n  // Iterate through the keys of the first map'\n  for (const key of matchingRoutes[0].keys()) {\n    // Check if the key exists in all other maps\n    if (matchingRoutes.every((map) => map.has(key))) {\n      // If yes, add the key to the result map\n      // @ts-ignore\n      result.set(key, matchingRoutes[0].get(key));\n    }\n  }\n\n  return result;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabContent: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n});\n\ninterface QueryParamValues {\n  tab: ActiveTab;\n}\n\nfunction getActiveTabFromUrl(queryParams: UrlQueryMap): QueryParamValues {\n  let tab = ActiveTab.NotificationPolicies; // default tab\n\n  if (queryParams['tab'] === ActiveTab.NotificationPolicies) {\n    tab = ActiveTab.NotificationPolicies;\n  }\n\n  if (queryParams['tab'] === ActiveTab.MuteTimings) {\n    tab = ActiveTab.MuteTimings;\n  }\n\n  return {\n    tab,\n  };\n}\n\nconst NotificationPoliciesPage = () => (\n  <AlertmanagerPageWrapper navId=\"am-routes\" accessType=\"notification\">\n    <AmRoutes />\n  </AlertmanagerPageWrapper>\n);\n\nexport default withErrorBoundary(NotificationPoliciesPage, { style: 'page' });\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LinkButton, useStyles2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { AlertmanagerAlert, AlertState } from 'app/plugins/datasource/alertmanager/types';\nimport { AccessControlAction } from 'app/types';\n\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { makeAMLink, makeLabelBasedSilenceLink } from '../../utils/misc';\nimport { AnnotationDetailsField } from '../AnnotationDetailsField';\nimport { Authorize } from '../Authorize';\n\ninterface AmNotificationsAlertDetailsProps {\n  alertManagerSourceName: string;\n  alert: AlertmanagerAlert;\n}\n\nexport const AlertDetails = ({ alert, alertManagerSourceName }: AmNotificationsAlertDetailsProps) => {\n  const styles = useStyles2(getStyles);\n\n  // For Grafana Managed alerts the Generator URL redirects to the alert rule edit page, so update permission is required\n  // For external alert manager the Generator URL redirects to an external service which we don't control\n  const isGrafanaSource = isGrafanaRulesSource(alertManagerSourceName);\n  const isSeeSourceButtonEnabled = isGrafanaSource\n    ? contextSrv.hasPermission(AccessControlAction.AlertingRuleRead)\n    : true;\n\n  return (\n    <>\n      <div className={styles.actionsRow}>\n        {alert.status.state === AlertState.Suppressed && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence, AlertmanagerAction.UpdateSilence]}>\n            <LinkButton\n              href={`${makeAMLink(\n                '/alerting/silences',\n                alertManagerSourceName\n              )}&silenceIds=${alert.status.silencedBy.join(',')}`}\n              className={styles.button}\n              icon={'bell'}\n              size={'sm'}\n            >\n              Manage silences\n            </LinkButton>\n          </Authorize>\n        )}\n        {alert.status.state === AlertState.Active && (\n          <Authorize actions={[AlertmanagerAction.CreateSilence]}>\n            <LinkButton\n              href={makeLabelBasedSilenceLink(alertManagerSourceName, alert.labels)}\n              className={styles.button}\n              icon={'bell-slash'}\n              size={'sm'}\n            >\n              Silence\n            </LinkButton>\n          </Authorize>\n        )}\n        {isSeeSourceButtonEnabled && alert.generatorURL && (\n          <LinkButton className={styles.button} href={alert.generatorURL} icon={'chart-line'} size={'sm'}>\n            See source\n          </LinkButton>\n        )}\n      </div>\n      {Object.entries(alert.annotations).map(([annotationKey, annotationValue]) => (\n        <AnnotationDetailsField key={annotationKey} annotationKey={annotationKey} value={annotationValue} />\n      ))}\n      <div className={styles.receivers}>\n        Receivers:{' '}\n        {alert.receivers\n          .map(({ name }) => name)\n          .filter((name) => !!name)\n          .join(', ')}\n      </div>\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  button: css`\n    & + & {\n      margin-left: ${theme.spacing(1)};\n    }\n  `,\n  actionsRow: css`\n    padding: ${theme.spacing(2, 0)} !important;\n    border-bottom: 1px solid ${theme.colors.border.medium};\n  `,\n  receivers: css`\n    padding: ${theme.spacing(1, 0)};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2, intervalToAbbreviatedDurationString } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerAlert } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { DynamicTableWithGuidelines } from '../DynamicTableWithGuidelines';\nimport { AmAlertStateTag } from '../silences/AmAlertStateTag';\n\nimport { AlertDetails } from './AlertDetails';\n\ninterface Props {\n  alerts: AlertmanagerAlert[];\n  alertManagerSourceName: string;\n}\n\ntype AlertGroupAlertsTableColumnProps = DynamicTableColumnProps<AlertmanagerAlert>;\ntype AlertGroupAlertsTableItemProps = DynamicTableItemProps<AlertmanagerAlert>;\n\nexport const AlertGroupAlertsTable = ({ alerts, alertManagerSourceName }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const columns = useMemo(\n    (): AlertGroupAlertsTableColumnProps[] => [\n      {\n        id: 'state',\n        label: 'State',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: alert }) => (\n          <>\n            <AmAlertStateTag state={alert.status.state} />\n            <span className={styles.duration}>\n              for{' '}\n              {intervalToAbbreviatedDurationString({\n                start: new Date(alert.startsAt),\n                end: new Date(alert.endsAt),\n              })}\n            </span>\n          </>\n        ),\n        size: '220px',\n      },\n      {\n        id: 'labels',\n        label: 'Labels',\n        // eslint-disable-next-line react/display-name\n        renderCell: ({ data: { labels } }) => <AlertLabels labels={labels} size=\"sm\" />,\n        size: 1,\n      },\n    ],\n    [styles]\n  );\n\n  const items = useMemo(\n    (): AlertGroupAlertsTableItemProps[] =>\n      alerts.map((alert) => ({\n        id: alert.fingerprint,\n        data: alert,\n      })),\n    [alerts]\n  );\n\n  return (\n    <div className={styles.tableWrapper} data-testid=\"alert-group-table\">\n      <DynamicTableWithGuidelines\n        cols={columns}\n        items={items}\n        isExpandable={true}\n        renderExpandedContent={({ data: alert }) => (\n          <AlertDetails alert={alert} alertManagerSourceName={alertManagerSourceName} />\n        )}\n      />\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tableWrapper: css`\n    margin-top: ${theme.spacing(3)};\n    ${theme.breakpoints.up('md')} {\n      margin-left: ${theme.spacing(4.5)};\n    }\n  `,\n  duration: css`\n    margin-left: ${theme.spacing(1)};\n    font-size: ${theme.typography.bodySmall.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nexport const getNotificationsTextColors = (theme: GrafanaTheme2) => ({\n  [AlertState.Active]: css`\n    color: ${theme.colors.error.text};\n  `,\n  [AlertState.Suppressed]: css`\n    color: ${theme.colors.primary.text};\n  `,\n  [AlertState.Unprocessed]: css`\n    color: ${theme.colors.secondary.text};\n  `,\n});\n","import pluralize from 'pluralize';\nimport React from 'react';\n\nimport { useStyles2 } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { getNotificationsTextColors } from '../../styles/notifications';\n\ninterface Props {\n  group: AlertmanagerGroup;\n}\n\nexport const AlertGroupHeader = ({ group }: Props) => {\n  const textStyles = useStyles2(getNotificationsTextColors);\n  const total = group.alerts.length;\n  const countByStatus = group.alerts.reduce(\n    (statusObj, alert) => {\n      if (statusObj[alert.status.state]) {\n        statusObj[alert.status.state] += 1;\n      } else {\n        statusObj[alert.status.state] = 1;\n      }\n      return statusObj;\n    },\n    {} as Record<AlertState, number>\n  );\n\n  return (\n    <div>\n      {`${total} ${pluralize('alert', total)}: `}\n      {Object.entries(countByStatus).map(([state, count], index) => {\n        return (\n          <span\n            key={`${JSON.stringify(group.labels)}-notifications-${index}`}\n            className={textStyles[state as AlertState]}\n          >\n            {index > 0 && ', '}\n            {`${count} ${state}`}\n          </span>\n        );\n      })}\n    </div>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2, Stack } from '@grafana/ui';\nimport { AlertmanagerGroup, AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertLabels } from '../AlertLabels';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { MetaText } from '../MetaText';\nimport { Strong } from '../Strong';\n\nimport { AlertGroupAlertsTable } from './AlertGroupAlertsTable';\nimport { AlertGroupHeader } from './AlertGroupHeader';\n\ninterface Props {\n  group: AlertmanagerGroup;\n  alertManagerSourceName: string;\n}\n\nexport const AlertGroup = ({ alertManagerSourceName, group }: Props) => {\n  const [isCollapsed, setIsCollapsed] = useState<boolean>(true);\n  const styles = useStyles2(getStyles);\n  // When group is grouped, receiver.name is 'NONE' as it can contain multiple receivers\n  const receiverInGroup = group.receiver.name !== 'NONE';\n  return (\n    <div className={styles.wrapper}>\n      <div className={styles.header}>\n        <div className={styles.group} data-testid=\"alert-group\">\n          <CollapseToggle\n            size=\"sm\"\n            isCollapsed={isCollapsed}\n            onToggle={() => setIsCollapsed(!isCollapsed)}\n            data-testid=\"alert-group-collapse-toggle\"\n          />\n          {Object.keys(group.labels).length ? (\n            <Stack direction=\"row\" alignItems=\"center\">\n              <AlertLabels labels={group.labels} size=\"sm\" />\n              {receiverInGroup && (\n                <MetaText icon=\"at\">\n                  Delivered to <Strong>{group.receiver.name}</Strong>\n                </MetaText>\n              )}\n            </Stack>\n          ) : (\n            <span>No grouping</span>\n          )}\n        </div>\n        <AlertGroupHeader group={group} />\n      </div>\n      {!isCollapsed && <AlertGroupAlertsTable alertManagerSourceName={alertManagerSourceName} alerts={group.alerts} />}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  wrapper: css({\n    '& + &': {\n      marginTop: theme.spacing(2),\n    },\n  }),\n  header: css({\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    padding: `${theme.spacing(1)} ${theme.spacing(1)} ${theme.spacing(1)} 0`,\n    backgroundColor: theme.colors.background.secondary,\n    width: '100%',\n  }),\n  group: css({\n    display: 'flex',\n    flexDirection: 'row',\n    alignItems: 'center',\n  }),\n  summary: css({}),\n  [AlertState.Active]: css({\n    color: theme.colors.error.main,\n  }),\n  [AlertState.Suppressed]: css({\n    color: theme.colors.primary.main,\n  }),\n  [AlertState.Unprocessed]: css({\n    color: theme.colors.secondary.main,\n  }),\n});\n","import moment from 'moment';\nimport React from 'react';\n\nimport { AlertmanagerConfig, MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport {\n  getDaysOfMonthString,\n  getMonthsString,\n  getTimeString,\n  getWeekdayString,\n  getYearsString,\n} from '../../utils/alertmanager';\n\n// https://github.com/prometheus/alertmanager/blob/9de8ef36755298a68b6ab20244d4369d38bdea99/timeinterval/timeinterval.go#L443\nconst TIME_RANGE_REGEX = /^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)/;\n\nconst isvalidTimeFormat = (timeString: string): boolean => {\n  return timeString ? TIME_RANGE_REGEX.test(timeString) : true;\n};\n\n// merge both fields mute_time_intervals and time_intervals to support both old and new config\nexport const mergeTimeIntervals = (alertManagerConfig: AlertmanagerConfig) => {\n  return [...(alertManagerConfig.mute_time_intervals ?? []), ...(alertManagerConfig.time_intervals ?? [])];\n};\n\n// Usage\nconst isValidStartAndEndTime = (startTime?: string, endTime?: string): boolean => {\n  // empty time range is perfactly valid for a mute timing\n  if (!startTime && !endTime) {\n    return true;\n  }\n\n  if ((!startTime && endTime) || (startTime && !endTime)) {\n    return false;\n  }\n\n  const timeUnit = 'HH:mm';\n  // @ts-ignore typescript types here incorrect, sigh\n  const startDate = moment().startOf('day').add(startTime, timeUnit);\n  // @ts-ignore typescript types here incorrect, sigh\n  const endDate = moment().startOf('day').add(endTime, timeUnit);\n\n  if (startTime && endTime && startDate.isBefore(endDate)) {\n    return true;\n  }\n\n  if (startTime && endTime && endDate.isAfter(startDate)) {\n    return true;\n  }\n\n  return false;\n};\n\nfunction renderTimeIntervals(muteTiming: MuteTimeInterval) {\n  const timeIntervals = muteTiming.time_intervals;\n\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years, location } = interval;\n    const timeString = getTimeString(times, location);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nexport { isValidStartAndEndTime, isvalidTimeFormat, renderTimeIntervals };\n","import { css } from '@emotion/css';\nimport { take, takeRight, uniqueId } from 'lodash';\nimport React, { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { getTagColorsFromName, useStyles2, Stack } from '@grafana/ui';\nimport { ObjectMatcher } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MatcherFormatter, matcherFormatter } from '../../utils/matchers';\nimport { HoverCard } from '../HoverCard';\n\ntype MatchersProps = { matchers: ObjectMatcher[]; formatter?: MatcherFormatter };\n\n// renders the first N number of matchers\nconst Matchers: FC<MatchersProps> = ({ matchers, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  const NUM_MATCHERS = 5;\n\n  const firstFew = take(matchers, NUM_MATCHERS);\n  const rest = takeRight(matchers, matchers.length - NUM_MATCHERS);\n  const hasMoreMatchers = rest.length > 0;\n\n  return (\n    <span data-testid=\"label-matchers\">\n      <Stack direction=\"row\" gap={1} alignItems=\"center\" wrap={'wrap'}>\n        {firstFew.map((matcher) => (\n          <MatcherBadge key={uniqueId()} matcher={matcher} formatter={formatter} />\n        ))}\n        {/* TODO hover state to show all matchers we're not showing */}\n        {hasMoreMatchers && (\n          <HoverCard\n            arrow\n            placement=\"top\"\n            content={\n              <>\n                {rest.map((matcher) => (\n                  <MatcherBadge key={uniqueId()} matcher={matcher} />\n                ))}\n              </>\n            }\n          >\n            <span>\n              <div className={styles.metadata}>{`and ${rest.length} more`}</div>\n            </span>\n          </HoverCard>\n        )}\n      </Stack>\n    </span>\n  );\n};\n\ninterface MatcherBadgeProps {\n  matcher: ObjectMatcher;\n  formatter?: MatcherFormatter;\n}\n\nconst MatcherBadge: FC<MatcherBadgeProps> = ({ matcher, formatter = 'default' }) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.matcher(matcher[0]).wrapper}>\n      <Stack direction=\"row\" gap={0} alignItems=\"baseline\">\n        {matcherFormatter[formatter](matcher)}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  matcher: (label: string) => {\n    const { color, borderColor } = getTagColorsFromName(label);\n\n    return {\n      wrapper: css`\n        color: #fff;\n        background: ${color};\n        padding: ${theme.spacing(0.33)} ${theme.spacing(0.66)};\n        font-size: ${theme.typography.bodySmall.fontSize};\n\n        border: solid 1px ${borderColor};\n        border-radius: ${theme.shape.borderRadius(2)};\n      `,\n    };\n  },\n  metadata: css`\n    color: ${theme.colors.text.secondary};\n\n    font-size: ${theme.typography.bodySmall.fontSize};\n    font-weight: ${theme.typography.bodySmall.fontWeight};\n  `,\n});\n\nexport { Matchers };\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { TimeOptions } from '../../types/time';\n\nexport function PromDurationDocs() {\n  const styles = useStyles2(getPromDurationStyles);\n  return (\n    <div>\n      Prometheus duration format consist of a number followed by a time unit.\n      <br />\n      Different units can be combined for more granularity.\n      <hr />\n      <div className={styles.list}>\n        <div className={styles.header}>\n          <div>Symbol</div>\n          <div>Time unit</div>\n          <div>Example</div>\n        </div>\n        <PromDurationDocsTimeUnit unit={TimeOptions.seconds} name=\"seconds\" example=\"20s\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.minutes} name=\"minutes\" example=\"10m\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.hours} name=\"hours\" example=\"4h\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.days} name=\"days\" example=\"3d\" />\n        <PromDurationDocsTimeUnit unit={TimeOptions.weeks} name=\"weeks\" example=\"2w\" />\n        <div className={styles.examples}>\n          <div>Multiple units combined</div>\n          <code>1m30s, 2h30m20s, 1w2d</code>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction PromDurationDocsTimeUnit({ unit, name, example }: { unit: TimeOptions; name: string; example: string }) {\n  const styles = useStyles2(getPromDurationStyles);\n\n  return (\n    <>\n      <div className={styles.unit}>{unit}</div>\n      <div>{name}</div>\n      <code>{example}</code>\n    </>\n  );\n}\n\nconst getPromDurationStyles = (theme: GrafanaTheme2) => ({\n  unit: css`\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  list: css`\n    display: grid;\n    grid-template-columns: max-content 1fr 2fr;\n    gap: ${theme.spacing(1, 3)};\n  `,\n  header: css`\n    display: contents;\n    font-weight: ${theme.typography.fontWeightBold};\n  `,\n  examples: css`\n    display: contents;\n    & > div {\n      grid-column: 1 / span 2;\n    }\n  `,\n});\n","import React from 'react';\n\nimport { Icon, Input } from '@grafana/ui';\n\nimport { HoverCard } from '../HoverCard';\n\nimport { PromDurationDocs } from './PromDurationDocs';\n\nexport const PromDurationInput = React.forwardRef<HTMLInputElement, React.ComponentProps<typeof Input>>(\n  (props, ref) => {\n    return (\n      <Input\n        suffix={\n          <HoverCard content={<PromDurationDocs />} disabled={false}>\n            <Icon name=\"info-circle\" size=\"lg\" />\n          </HoverCard>\n        }\n        {...props}\n        ref={ref}\n      />\n    );\n  }\n);\n\nPromDurationInput.displayName = 'PromDurationInput';\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getFormStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      align-items: center;\n      display: flex;\n      flex-flow: row nowrap;\n\n      & > * + * {\n        margin-left: ${theme.spacing(1)};\n      }\n    `,\n    input: css`\n      flex: 1;\n    `,\n    promDurationInput: css`\n      max-width: ${theme.spacing(32)};\n    `,\n    timingFormContainer: css`\n      padding: ${theme.spacing(1)};\n    `,\n    linkText: css`\n      text-decoration: underline;\n    `,\n    collapse: css`\n      border: none;\n      background: none;\n      color: ${theme.colors.text.primary};\n    `,\n  };\n};\n","export const routeTimingsFields = {\n  groupWait: {\n    label: 'Group wait',\n    description:\n      'The waiting time until the initial notification is sent for a new group created by an incoming alert. If empty it will be inherited from the parent policy.',\n    ariaLabel: 'Group wait value',\n  },\n  groupInterval: {\n    label: 'Group interval',\n    description:\n      'The waiting time to send a batch of new alerts for that group after the first notification was sent. If empty it will be inherited from the parent policy.',\n    ariaLabel: 'Group interval value',\n  },\n  repeatInterval: {\n    label: 'Repeat interval',\n    description: 'The waiting time to resend an alert after they have successfully been sent.',\n    ariaLabel: 'Repeat interval value',\n  },\n};\n","export type TimingOptions = {\n  group_wait?: string;\n  group_interval?: string;\n  repeat_interval?: string;\n};\n\nexport const TIMING_OPTIONS_DEFAULTS: Required<TimingOptions> = {\n  group_wait: '30s',\n  group_interval: '5m',\n  repeat_interval: '4h',\n};\n","import React from 'react';\n\nimport { AlertState } from 'app/plugins/datasource/alertmanager/types';\n\nimport { State, StateTag } from '../StateTag';\n\nconst alertStateToState: Record<AlertState, State> = {\n  [AlertState.Active]: 'bad',\n  [AlertState.Unprocessed]: 'neutral',\n  [AlertState.Suppressed]: 'info',\n};\n\ninterface Props {\n  state: AlertState;\n}\n\nexport const AmAlertStateTag = ({ state }: Props) => <StateTag state={alertStateToState[state]}>{state}</StateTag>;\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { CorsWorker as Worker } from 'app/core/utils/CorsWorker';\n\n// CorsWorker is needed as a workaround for CORS issue caused\n// by static assets served from an url different from origin\nexport const createWorker = () => new Worker(new URL('./routeGroupsMatcher.worker.ts', import.meta.url));\n","import * as comlink from 'comlink';\nimport { useCallback, useEffect } from 'react';\n\nimport { AlertmanagerGroup, RouteWithID } from '../../../plugins/datasource/alertmanager/types';\nimport { Labels } from '../../../types/unified-alerting-dto';\n\nimport { logError, logInfo } from './Analytics';\nimport { createWorker } from './createRouteGroupsMatcherWorker';\nimport type { MatchOptions, RouteGroupsMatcher } from './routeGroupsMatcher';\n\nlet routeMatcher: comlink.Remote<RouteGroupsMatcher> | undefined;\n\n// Load worker loads the worker if it's not loaded yet\n// and returns a function to dispose of the worker\n// We do it to enable feature toggling. If the feature is disabled we don't wont to load the worker code at all\n// An alternative way would be to move all this code to the hook below, but it will create and terminate the worker much more often\nfunction loadWorker() {\n  let worker: Worker | undefined;\n\n  if (routeMatcher === undefined) {\n    try {\n      worker = createWorker();\n      routeMatcher = comlink.wrap<RouteGroupsMatcher>(worker);\n    } catch (e: unknown) {\n      if (e instanceof Error) {\n        logError(e);\n      }\n    }\n  }\n\n  const disposeWorker = () => {\n    if (worker && routeMatcher) {\n      routeMatcher[comlink.releaseProxy]();\n      worker.terminate();\n\n      routeMatcher = undefined;\n      worker = undefined;\n    }\n  };\n\n  return { disposeWorker };\n}\n\nfunction validateWorker(matcher: typeof routeMatcher): asserts matcher is comlink.Remote<RouteGroupsMatcher> {\n  if (!routeMatcher) {\n    throw new Error('Route Matcher has not been initialized');\n  }\n}\n\nexport function useRouteGroupsMatcher() {\n  useEffect(() => {\n    const { disposeWorker } = loadWorker();\n    return disposeWorker;\n  }, []);\n\n  const getRouteGroupsMap = useCallback(\n    async (rootRoute: RouteWithID, alertGroups: AlertmanagerGroup[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.getRouteGroupsMap(rootRoute, alertGroups, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Route Groups Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        alertGroupsCount: alertGroups.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  const matchInstancesToRoute = useCallback(\n    async (rootRoute: RouteWithID, instancesToMatch: Labels[], options?: MatchOptions) => {\n      validateWorker(routeMatcher);\n\n      const startTime = performance.now();\n\n      const result = await routeMatcher.matchInstancesToRoute(rootRoute, instancesToMatch, options);\n\n      const timeSpent = performance.now() - startTime;\n\n      logInfo(`Instances Matched in  ${timeSpent} ms`, {\n        matchingTime: timeSpent.toString(),\n        instancesToMatchCount: instancesToMatch.length.toString(),\n        // Counting all nested routes might be too time-consuming, so we only count the first level\n        topLevelRoutesCount: rootRoute.routes?.length.toString() ?? '0',\n      });\n\n      return result;\n    },\n    []\n  );\n\n  return { getRouteGroupsMap, matchInstancesToRoute };\n}\n","import { uniqueId } from 'lodash';\n\nimport { SelectableValue } from '@grafana/data';\nimport { MatcherOperator, ObjectMatcher, Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\nimport { MatcherFieldValue } from '../types/silence-form';\n\nimport { matcherToMatcherField } from './alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './datasource';\nimport { normalizeMatchers, parseMatcherToArray, quoteWithEscape, unquoteWithUnescape } from './matchers';\nimport { findExistingRoute } from './routeTree';\nimport { isValidPrometheusDuration, safeParseDurationstr } from './time';\n\nconst matchersToArrayFieldMatchers = (\n  matchers: Record<string, string> | undefined,\n  isRegex: boolean\n): MatcherFieldValue[] =>\n  Object.entries(matchers ?? {}).reduce<MatcherFieldValue[]>(\n    (acc, [name, value]) => [\n      ...acc,\n      {\n        name,\n        value,\n        operator: isRegex ? MatcherOperator.regex : MatcherOperator.equal,\n      },\n    ],\n    []\n  );\n\nconst selectableValueToString = (selectableValue: SelectableValue<string>): string => selectableValue.value!;\n\nconst selectableValuesToStrings = (arr: Array<SelectableValue<string>> | undefined): string[] =>\n  (arr ?? []).map(selectableValueToString);\n\nexport const emptyArrayFieldMatcher: MatcherFieldValue = {\n  name: '',\n  value: '',\n  operator: MatcherOperator.equal,\n};\n\n// Default route group_by labels for newly created routes.\nexport const defaultGroupBy = ['grafana_folder', 'alertname'];\n\n// Common route group_by options for multiselect drop-down\nexport const commonGroupByOptions = [\n  { label: 'grafana_folder', value: 'grafana_folder', isFixed: true },\n  { label: 'alertname', value: 'alertname', isFixed: true },\n  { label: 'Disable (...)', value: '...' },\n];\n\nexport const emptyRoute: FormAmRoute = {\n  id: '',\n  overrideGrouping: false,\n  groupBy: defaultGroupBy,\n  object_matchers: [],\n  routes: [],\n  continue: false,\n  receiver: '',\n  overrideTimings: false,\n  groupWaitValue: '',\n  groupIntervalValue: '',\n  repeatIntervalValue: '',\n  muteTimeIntervals: [],\n};\n\n// add unique identifiers to each route in the route tree, that way we can figure out what route we've edited / deleted\nexport function addUniqueIdentifierToRoute(route: Route): RouteWithID {\n  return {\n    id: uniqueId('route-'),\n    ...route,\n    routes: (route.routes ?? []).map(addUniqueIdentifierToRoute),\n  };\n}\n\n//returns route, and a record mapping id to existing route\nexport const amRouteToFormAmRoute = (route: RouteWithID | Route | undefined): FormAmRoute => {\n  if (!route) {\n    return emptyRoute;\n  }\n\n  const id = 'id' in route ? route.id : uniqueId('route-');\n\n  if (Object.keys(route).length === 0) {\n    const formAmRoute = { ...emptyRoute, id };\n    return formAmRoute;\n  }\n\n  const formRoutes: FormAmRoute[] = [];\n  route.routes?.forEach((subRoute) => {\n    const subFormRoute = amRouteToFormAmRoute(subRoute);\n    formRoutes.push(subFormRoute);\n  });\n\n  const objectMatchers =\n    route.object_matchers?.map((matcher) => ({ name: matcher[0], operator: matcher[1], value: matcher[2] })) ?? [];\n\n  const matchers =\n    route.matchers\n      ?.flatMap((matcher) => {\n        // parse the matcher to an array of matchers, PromQL-style matchers can contain more than one matcher (in a matcher, yes it's confusing)\n        return parseMatcherToArray(matcher).flatMap(matcherToMatcherField);\n      })\n      .map(({ name, operator, value }) => ({\n        name: unquoteWithUnescape(name),\n        operator,\n        value: unquoteWithUnescape(value),\n      })) ?? [];\n\n  return {\n    id,\n    // Frontend migration to use object_matchers instead of matchers, match, and match_re\n    object_matchers: [\n      ...matchers,\n      ...objectMatchers,\n      ...matchersToArrayFieldMatchers(route.match, false),\n      ...matchersToArrayFieldMatchers(route.match_re, true),\n    ],\n    continue: route.continue ?? false,\n    receiver: route.receiver ?? '',\n    overrideGrouping: Array.isArray(route.group_by) && route.group_by.length > 0,\n    groupBy: route.group_by ?? undefined,\n    overrideTimings: [route.group_wait, route.group_interval, route.repeat_interval].some(Boolean),\n    groupWaitValue: route.group_wait ?? '',\n    groupIntervalValue: route.group_interval ?? '',\n    repeatIntervalValue: route.repeat_interval ?? '',\n    routes: formRoutes,\n    muteTimeIntervals: route.mute_time_intervals ?? [],\n  };\n};\n\n// convert a FormAmRoute to a Route\nexport const formAmRouteToAmRoute = (\n  alertManagerSourceName: string,\n  formAmRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(formAmRoute.id ?? '', routeTree);\n\n  const {\n    overrideGrouping,\n    groupBy,\n    overrideTimings,\n    groupWaitValue,\n    groupIntervalValue,\n    repeatIntervalValue,\n    receiver,\n  } = formAmRoute;\n\n  // \"undefined\" means \"inherit from the parent policy\", currently supported by group_by, group_wait, group_interval, and repeat_interval\n  const INHERIT_FROM_PARENT = undefined;\n\n  const group_by = overrideGrouping ? groupBy : INHERIT_FROM_PARENT;\n\n  const overrideGroupWait = overrideTimings && groupWaitValue;\n  const group_wait = overrideGroupWait ? groupWaitValue : INHERIT_FROM_PARENT;\n\n  const overrideGroupInterval = overrideTimings && groupIntervalValue;\n  const group_interval = overrideGroupInterval ? groupIntervalValue : INHERIT_FROM_PARENT;\n\n  const overrideRepeatInterval = overrideTimings && repeatIntervalValue;\n  const repeat_interval = overrideRepeatInterval ? repeatIntervalValue : INHERIT_FROM_PARENT;\n\n  // Empty matcher values are valid. Such matchers require specified label to not exists\n  const object_matchers: ObjectMatcher[] | undefined = formAmRoute.object_matchers\n    ?.filter((route) => route.name && route.operator && route.value !== null && route.value !== undefined)\n    .map(({ name, operator, value }) => [name, operator, value]);\n\n  const routes = formAmRoute.routes?.map((subRoute) =>\n    formAmRouteToAmRoute(alertManagerSourceName, subRoute, routeTree)\n  );\n\n  const amRoute: Route = {\n    ...(existing ?? {}),\n    continue: formAmRoute.continue,\n    group_by: group_by,\n    object_matchers: object_matchers,\n    match: undefined, // DEPRECATED: Use matchers\n    match_re: undefined, // DEPRECATED: Use matchers\n    group_wait,\n    group_interval,\n    repeat_interval,\n    routes: routes,\n    mute_time_intervals: formAmRoute.muteTimeIntervals,\n    receiver: receiver,\n  };\n\n  // non-Grafana managed rules should use \"matchers\", Grafana-managed rules should use \"object_matchers\"\n  // Grafana maintains a fork of AM to support all utf-8 characters in the \"object_matchers\" property values but this\n  // does not exist in upstream AlertManager\n  if (alertManagerSourceName !== GRAFANA_RULES_SOURCE_NAME) {\n    amRoute.matchers = formAmRoute.object_matchers?.map(\n      ({ name, operator, value }) => `${quoteWithEscape(name)}${operator}${quoteWithEscape(value)}`\n    );\n    amRoute.object_matchers = undefined;\n  } else {\n    amRoute.object_matchers = normalizeMatchers(amRoute);\n    amRoute.matchers = undefined;\n  }\n\n  if (formAmRoute.receiver) {\n    amRoute.receiver = formAmRoute.receiver;\n  }\n\n  return amRoute;\n};\n\nexport const stringToSelectableValue = (str: string): SelectableValue<string> => ({\n  label: str,\n  value: str,\n});\n\nexport const stringsToSelectableValues = (arr: string[] | undefined): Array<SelectableValue<string>> =>\n  (arr ?? []).map(stringToSelectableValue);\n\nexport const mapSelectValueToString = (selectableValue: SelectableValue<string>): string | null => {\n  // this allows us to deal with cleared values\n  if (selectableValue === null) {\n    return null;\n  }\n\n  if (!selectableValue) {\n    return '';\n  }\n\n  return selectableValueToString(selectableValue) ?? '';\n};\n\nexport const mapMultiSelectValueToStrings = (\n  selectableValues: Array<SelectableValue<string>> | undefined\n): string[] => {\n  if (!selectableValues) {\n    return [];\n  }\n\n  return selectableValuesToStrings(selectableValues);\n};\n\nexport function promDurationValidator(duration?: string) {\n  if (!duration || duration.length === 0) {\n    return true;\n  }\n\n  return isValidPrometheusDuration(duration) || 'Invalid duration format. Must be {number}{time_unit}';\n}\n\n// function to convert ObjectMatchers to a array of strings\nexport const objectMatchersToString = (matchers: ObjectMatcher[]): string[] => {\n  return matchers.map((matcher) => {\n    const [name, operator, value] = matcher;\n    return `${name}${operator}${value}`;\n  });\n};\n\nexport const repeatIntervalValidator = (repeatInterval: string, groupInterval = '') => {\n  if (repeatInterval.length === 0) {\n    return true;\n  }\n\n  const validRepeatInterval = promDurationValidator(repeatInterval);\n  const validGroupInterval = promDurationValidator(groupInterval);\n\n  if (validRepeatInterval !== true) {\n    return validRepeatInterval;\n  }\n\n  if (validGroupInterval !== true) {\n    return validGroupInterval;\n  }\n\n  const repeatDuration = safeParseDurationstr(repeatInterval);\n  const groupDuration = safeParseDurationstr(groupInterval);\n\n  const isRepeatLowerThanGroupDuration = groupDuration !== 0 && repeatDuration < groupDuration;\n\n  return isRepeatLowerThanGroupDuration ? 'Repeat interval should be higher or equal to Group interval' : true;\n};\n","import { isUndefined, omitBy } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval, TimeRange } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n  location: '',\n  disable: false,\n};\n\nexport const validateArrayField = (\n  value: string | undefined,\n  validateValue: (input: string) => boolean,\n  invalidText: string\n) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str?: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years, location, disable }) => {\n      const interval = {\n        times: convertTimesToDto(times, disable),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n        location: location ? location : undefined,\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n\n/*\n * Convert times from form to dto, if disable is true, then return an empty array as times\n If the times array is empty and disable is false, then return undefined\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\nfunction convertTimesToDto(times: TimeRange[] | undefined, disable: boolean) {\n  if (disable) {\n    return [];\n  }\n  const timesToReturn = times?.filter(({ start_time, end_time }) => !!start_time && !!end_time);\n  return timesToReturn?.length ? timesToReturn : undefined;\n}\n\n/*\n * Get disable field from dto, if any of the lists is an empty array, then the disable field is true\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\n\nexport function isTimeIntervalDisabled(intervals: TimeInterval): boolean {\n  if (\n    intervals.times?.length === 0 ||\n    intervals.weekdays?.length === 0 ||\n    intervals.days_of_month?.length === 0 ||\n    intervals.months?.length === 0 ||\n    intervals.years?.length === 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/*\n   Return true if all the time intervals are disabled\n  * @param muteTimeInterval\n  * @returns MuteTimingFields\n  * */\nexport function isDisabled(muteTiming: MuteTimeInterval) {\n  return muteTiming.time_intervals.every((timeInterval) => isTimeIntervalDisabled(timeInterval));\n}\n","/**\n * Various helper functions to modify (immutably) the route tree, aka \"notification policies\"\n */\n\nimport { produce } from 'immer';\nimport { omit } from 'lodash';\n\nimport { insertAfterImmutably, insertBeforeImmutably } from '@grafana/data/src/utils/arrayUtils';\nimport { Route, RouteWithID } from 'app/plugins/datasource/alertmanager/types';\n\nimport { FormAmRoute } from '../types/amroutes';\n\nimport { formAmRouteToAmRoute } from './amroutes';\n\n// add a form submission to the route tree\nexport const mergePartialAmRouteWithRouteTree = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  routeTree: RouteWithID\n): Route => {\n  const existing = findExistingRoute(partialFormRoute.id ?? '', routeTree);\n  if (!existing) {\n    throw new Error(`No such route with ID '${partialFormRoute.id}'`);\n  }\n\n  function findAndReplace(currentRoute: RouteWithID): Route {\n    let updatedRoute: Route = currentRoute;\n\n    if (currentRoute.id === partialFormRoute.id) {\n      const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n      updatedRoute = {\n        ...currentRoute,\n        ...newRoute,\n      };\n    }\n\n    return {\n      ...updatedRoute,\n      routes: currentRoute.routes?.map(findAndReplace),\n    };\n  }\n\n  return findAndReplace(routeTree);\n};\n\n// remove a route from the policy tree, returns a new tree\n// make sure to omit the \"id\" because Prometheus / Loki / Mimir will reject the payload\nexport const omitRouteFromRouteTree = (findRoute: RouteWithID, routeTree: RouteWithID): RouteWithID => {\n  if (findRoute.id === routeTree.id) {\n    throw new Error('You cant remove the root policy');\n  }\n\n  function findAndOmit(currentRoute: RouteWithID): RouteWithID {\n    return {\n      ...currentRoute,\n      routes: currentRoute.routes?.reduce((acc: RouteWithID[] = [], route) => {\n        if (route.id === findRoute.id) {\n          return acc;\n        }\n\n        acc.push(findAndOmit(route));\n        return acc;\n      }, []),\n    };\n  }\n\n  return findAndOmit(routeTree);\n};\n\nexport type InsertPosition = 'above' | 'below' | 'child';\n\n// add a new route to a parent route\nexport const addRouteToReferenceRoute = (\n  alertManagerSourceName: string,\n  partialFormRoute: Partial<FormAmRoute>,\n  referenceRoute: RouteWithID,\n  routeTree: RouteWithID,\n  position: InsertPosition\n): RouteWithID => {\n  const newRoute = formAmRouteToAmRoute(alertManagerSourceName, partialFormRoute, routeTree);\n\n  return produce(routeTree, (draftTree) => {\n    const [routeInTree, parentRoute, positionInParent] = findRouteInTree(draftTree, referenceRoute);\n\n    if (routeInTree === undefined || parentRoute === undefined || positionInParent === undefined) {\n      throw new Error(`could not find reference route \"${referenceRoute.id}\" in tree`);\n    }\n\n    // if user wants to insert new child policy, append to the bottom of children\n    if (position === 'child') {\n      if (routeInTree.routes) {\n        routeInTree.routes.push(newRoute);\n      } else {\n        routeInTree.routes = [newRoute];\n      }\n    }\n\n    // insert new policy before / above the referenceRoute\n    if (position === 'above') {\n      parentRoute.routes = insertBeforeImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n\n    // insert new policy after / below the referenceRoute\n    if (position === 'below') {\n      parentRoute.routes = insertAfterImmutably(parentRoute.routes ?? [], newRoute, positionInParent);\n    }\n  });\n};\n\ntype RouteMatch = Route | undefined;\n\nexport function findRouteInTree(\n  routeTree: RouteWithID,\n  referenceRoute: RouteWithID\n): [matchingRoute: RouteMatch, parentRoute: RouteMatch, positionInParent: number | undefined] {\n  let matchingRoute: RouteMatch;\n  let matchingRouteParent: RouteMatch;\n  let matchingRoutePositionInParent: number | undefined;\n\n  // recurse through the tree to find the matching route, its parent and the position of the route in the parent\n  function findRouteInTree(currentRoute: RouteWithID, index: number, parentRoute: RouteWithID) {\n    if (matchingRoute) {\n      return;\n    }\n\n    if (currentRoute.id === referenceRoute.id) {\n      matchingRoute = currentRoute;\n      matchingRouteParent = parentRoute;\n      matchingRoutePositionInParent = index;\n    }\n\n    if (currentRoute.routes) {\n      currentRoute.routes.forEach((route, index) => findRouteInTree(route, index, currentRoute));\n    }\n  }\n\n  findRouteInTree(routeTree, 0, routeTree);\n\n  return [matchingRoute, matchingRouteParent, matchingRoutePositionInParent];\n}\n\nexport function cleanRouteIDs(route: Route | RouteWithID): Route {\n  return omit(\n    {\n      ...route,\n      routes: route.routes?.map((route) => cleanRouteIDs(route)),\n    },\n    'id'\n  );\n}\n\nexport function findExistingRoute(id: string, routeTree: RouteWithID): RouteWithID | undefined {\n  return routeTree.id === id ? routeTree : routeTree.routes?.find((route) => findExistingRoute(id, route));\n}\n"],"names":["useCleanup","cleanupAction","dispatch","selectorRef","receiversApi","alertingApi","build","amSourceName","error","useGetContactPointsState","alertManagerSourceName","contactPointsStateEmpty","contactPointsState","EmptyAreaWithCTA","buttonIcon","buttonLabel","buttonSize","buttonVariant","onButtonClick","text","href","showButton","styles","getStyles","commonProps","EmptyArea","Button","theme","GrafanaMuteTimingsExporterPreview","exportFormat","onClose","muteTimingsDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaMuteTimingExporterPreview","muteTimingName","GrafanaMuteTimingsExporter","activeTab","setActiveTab","GrafanaExportDrawer","ALL_MUTE_TIMINGS","useExportMuteTiming","setMuteTimingName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","handleClose","handleOpen","receiverName","MuteTimingsTable","muteTimingNames","hideActions","currentData","useAlertmanagerConfig","config","items","muteTimings","muteTimingsProvenances","name","mute","_","allowedToCreateMuteTiming","ExportDrawer","showExportDrawer","exportMuteTimingsSupported","exportMuteTimingsAllowed","columns","useColumns","Stack","Spacer","Authorize","DynamicTable","ConfirmModal","openExportDrawer","_editSupported","allowedToEdit","_deleteSupported","allowedToDelete","showActions","exportSupported","exportAllowed","data","Provisioning","ActionsAndBadge","Menu","muteTiming","isGrafanaDataSource","Badge","Link","IconButton","NotificationPoliciesFilter","receivers","onChangeReceiver","onChangeMatchers","matchingCount","searchParams","setSearchParams","useURLSearchParams","searchInputRef","queryString","contactPoint","getNotificationPoliciesFilters","handleChangeLabels","matchers","clearFilters","receiverOptions","toOption","selectedContactPoint","option","hasFilters","inputInvalid","Field","Label","Tooltip","Icon","Input","event","Select","Text","findRoutesMatchingPredicate","routeTree","predicateFn","matchingRouteIdsWithPath","findMatch","route","path","newPath","previousPath","findRoutesByMatchers","labelMatchersFilter","routeMatchers","filter","matcher","receiver","useGetGrafanaReceiverTypeChecker","isOnCallEnabled","usePluginBridge","onCallApi","onCallIntegrations","useGetAmRouteReceiverWithGrafanaAppTypes","getGrafanaReceiverType","receiverToSelectableContactPointValue","AlertGroupsSummary","active","suppressed","unprocessed","statsComponents","total","AmRootRouteForm","actionButtons","onSubmit","isTimingOptionsExpanded","setIsTimingOptionsExpanded","groupByOptions","setGroupByOptions","defaultValues","handleSubmit","register","control","errors","setValue","getValues","onChange","ref","field","value","opt","opts","Collapse","PromDurationInput","groupInterval","useMuteTimingOptions","selectedAlertmanager","interval","AmRoutesExpandedForm","defaults","formStyles","muteTimingOptions","emptyMatcher","receiversWithOnCallOnTop","onCallFirst","formAmRoute","watch","fields","append","remove","index","Switch","FieldValidationMessage","routeTimingsFields","commonSpacing","useAddPolicyModal","handleAdd","loading","showModal","setShowModal","insertPosition","setInsertPosition","referenceRoute","setReferenceRoute","AmRouteReceivers","handleDismiss","handleShow","position","UpdatingModal","Modal","newRoute","useEditPolicyModal","handleSave","isDefaultPolicy","setIsDefaultPolicy","setRoute","useDeletePolicyModal","handleDelete","useAlertGroupsModal","alertGroups","setAlertGroups","setMatchers","formatter","setFormatter","instancesByState","instances","group","instance","Matchers","AlertGroup","isOpen","Spinner","GrafanaPoliciesExporterPreview","policiesDefinition","GrafanaPoliciesExporter","Policy","props","readOnly","provisioned","currentRoute","inheritedProperties","routesMatchingFilters","matchingInstancesPreview","onEditPolicy","onAddPolicy","onDeletePolicy","onShowAlertInstances","isAutoGenerated","continueMatching","hasMatchers","filtersApplied","matchedRoutesWithPath","matchedRoutes","hasFocus","routesPath","belongsToMatchPath","showMatchesAllLabelsWarning","actualContactPoint","contactPointErrors","getContactPointErrors","allChildPolicies","childPolicies","policy","hasChildPolicies","matchingAlertGroups","numberOfAlertInstances","isSupportedToSeeAutogeneratedChunk","isAllowedToSeeAutogeneratedChunk","isAutogeneratedPolicyRoot","isAutoGeneratedRootAndSimplifiedEnabled","showPolicyChildren","togglePolicyChildren","groupBy","timingOptions","POLICIES_PER_PAGE","visibleChildPolicies","setVisibleChildPolicies","dropdownMenuActions","useCreateDropdownMenuActions","isImmutablePolicy","childPoliciesBelongingToMatchPath","child","childPoliciesToRender","pageOfChildren","moreCount","showMore","ContinueMatchingIndicator","AllMatchesIndicator","AutogeneratedRootIndicator","DefaultPolicyIndicator","Errors","ConditionalWrap","ProvisionedTooltip","Dropdown","MetadataRow","childInheritedProperties","isThisChildAutoGenerated","isThisChildReadOnly","inheritedGrouping","hasInheritedProperties","noGrouping","customGrouping","singleGroup","hasMuteTimings","MetaText","Strong","ContactPointsHoverDetails","MuteTimings","TimingOptionsMeta","InheritedProperties","updatePoliciesSupported","updatePoliciesAllowed","deletePolicySupported","deletePolicyAllowed","exportPoliciesSupported","exportPoliciesAllowed","showExportAction","showEditAction","showDeleteAction","AUTOGENERATED_ROOT_LABEL_NAME","objectMatcher","children","HoverCard","properties","key","routePropertyToLabel","routePropertyToValue","timings","timing","groupWait","details","groupedIntegrations","type","integrations","acc","notifierStatuses","notifierErrors","status","isNotGrouping","isSingleGroup","label","color","borderColor","ActiveTab","AmRoutes","useGetAlertmanagerAlertGroupsQuery","alertmanagerApi","queryParams","setQueryParams","useQueryParams","tab","getActiveTabFromUrl","updatingTree","setUpdatingTree","contactPointFilter","setContactPointFilter","setLabelMatchersFilter","hasConfigurationAPI","isGrafanaAlertmanager","getRouteGroupsMap","useRouteGroupsMatcher","result","resultLoading","resultError","refetchAlertGroups","rootRoute","routeAlertGroupsMap","instancesPreviewError","triggerGetRouteGroupsMap","useAsyncFn","findRoutesMatchingFilters","isProvisioned","partialRoute","newRouteTree","updateRouteTree","closeEditModal","closeAddModal","closeDeleteModal","addModal","openAddModal","editModal","openEditModal","deleteModal","openDeleteModal","alertInstancesModal","showAlertGroupsModal","state","numberOfMuteTimings","haveData","haveError","muteTimingsTabActive","policyTreeTabActive","TabsBar","Tab","TabContent","Alert","GrafanaAlertmanagerDeliveryWarning","filters","hasFilter","havebothFilters","fullRoute","matchingRoutesForContactPoint","routesMatchingContactPoint","matchingRoutesForLabelMatchers","routesMatchingLabelFilters","findMapIntersection","matchingRoutes","map","NotificationPoliciesPage","AlertDetails","alert","isSeeSourceButtonEnabled","annotationKey","annotationValue","AnnotationDetailsField","AlertGroupAlertsTable","alerts","AmAlertStateTag","labels","AlertLabels","DynamicTableWithGuidelines","getNotificationsTextColors","AlertGroupHeader","textStyles","countByStatus","statusObj","count","isCollapsed","setIsCollapsed","receiverInGroup","CollapseToggle","TIME_RANGE_REGEX","isvalidTimeFormat","timeString","mergeTimeIntervals","alertManagerConfig","isValidStartAndEndTime","startTime","endTime","timeUnit","startDate","endDate","renderTimeIntervals","times","weekdays","days_of_month","months","years","location","weekdayString","daysString","monthsString","yearsString","NUM_MATCHERS","firstFew","rest","hasMoreMatchers","MatcherBadge","PromDurationDocs","getPromDurationStyles","PromDurationDocsTimeUnit","unit","example","getFormStyles","TIMING_OPTIONS_DEFAULTS","alertStateToState","options","fetchConfig","createWorker","routeMatcher","loadWorker","worker","comlink","e","validateWorker","disposeWorker","timeSpent","matchInstancesToRoute","instancesToMatch","matchersToArrayFieldMatchers","isRegex","selectableValueToString","selectableValue","selectableValuesToStrings","arr","emptyArrayFieldMatcher","defaultGroupBy","commonGroupByOptions","emptyRoute","addUniqueIdentifierToRoute","amRouteToFormAmRoute","id","formRoutes","subRoute","subFormRoute","objectMatchers","operator","formAmRouteToAmRoute","existing","overrideGrouping","overrideTimings","groupWaitValue","groupIntervalValue","repeatIntervalValue","INHERIT_FROM_PARENT","group_by","group_wait","group_interval","repeat_interval","object_matchers","routes","amRoute","stringToSelectableValue","str","stringsToSelectableValues","mapSelectValueToString","mapMultiSelectValueToStrings","selectableValues","promDurationValidator","duration","objectMatchersToString","repeatIntervalValidator","repeatInterval","validRepeatInterval","validGroupInterval","repeatDuration","groupDuration","DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","validateArrayField","validateValue","invalidText","x","entry","convertStringToArray","s","createMuteTiming","timeIntervals","disable","convertTimesToDto","v","timesToReturn","start_time","end_time","isTimeIntervalDisabled","intervals","isDisabled","timeInterval","mergePartialAmRouteWithRouteTree","partialFormRoute","findExistingRoute","findAndReplace","updatedRoute","omitRouteFromRouteTree","findRoute","findAndOmit","addRouteToReferenceRoute","draftTree","routeInTree","parentRoute","positionInParent","findRouteInTree","matchingRoute","matchingRouteParent","matchingRoutePositionInParent","cleanRouteIDs"],"sourceRoot":""}