{"version":3,"file":"heatmapPanel.45deac0a3caf808d9902.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/ColorScale/ColorScale.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/renderHistogram.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapHoverViewOld.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/tooltip/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapTooltip.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/utils.ts","webpack://grafana/./public/app/plugins/panel/heatmap/fields.ts","webpack://grafana/./public/app/plugins/panel/heatmap/palettes.ts","webpack://grafana/./public/app/plugins/panel/heatmap/HeatmapPanel.tsx","webpack://grafana/./public/app/plugins/panel/heatmap/migrations.ts","webpack://grafana/./public/app/plugins/panel/heatmap/suggestions.ts","webpack://grafana/./public/app/plugins/panel/heatmap/module.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport React, { useState, useEffect } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\ntype Props = {\n  colorPalette: string[];\n  min: number;\n  max: number;\n\n  // Show a value as string -- when not defined, the raw values will not be shown\n  display?: (v: number) => string;\n  hoverValue?: number;\n  useStopsPercentage?: boolean;\n};\n\ntype HoverState = {\n  isShown: boolean;\n  value: number;\n};\n\nconst GRADIENT_STOPS = 10;\n\nexport const ColorScale = ({ colorPalette, min, max, display, hoverValue, useStopsPercentage }: Props) => {\n  const [colors, setColors] = useState<string[]>([]);\n  const [scaleHover, setScaleHover] = useState<HoverState>({ isShown: false, value: 0 });\n  const [percent, setPercent] = useState<number | null>(null); // 0-100 for CSS percentage\n\n  const theme = useTheme2();\n  const styles = getStyles(theme, colors);\n\n  useEffect(() => {\n    setColors(getGradientStops({ colorArray: colorPalette, stops: GRADIENT_STOPS, useStopsPercentage }));\n  }, [colorPalette, useStopsPercentage]);\n\n  const onScaleMouseMove = (event: React.MouseEvent<HTMLDivElement>) => {\n    const divOffset = event.nativeEvent.offsetX;\n    const offsetWidth = event.currentTarget.offsetWidth;\n    const normPercentage = Math.floor((divOffset * 100) / offsetWidth + 1);\n    const scaleValue = Math.floor(((max - min) * normPercentage) / 100 + min);\n\n    setScaleHover({ isShown: true, value: scaleValue });\n    setPercent(normPercentage);\n  };\n\n  const onScaleMouseLeave = () => {\n    setScaleHover({ isShown: false, value: 0 });\n  };\n\n  useEffect(() => {\n    setPercent(hoverValue == null ? null : clampPercent100((hoverValue - min) / (max - min)));\n  }, [hoverValue, min, max]);\n\n  return (\n    <div className={styles.scaleWrapper} onMouseMove={onScaleMouseMove} onMouseLeave={onScaleMouseLeave}>\n      <div className={styles.scaleGradient}>\n        {display && (scaleHover.isShown || hoverValue !== undefined) && (\n          <div className={styles.followerContainer}>\n            <div className={styles.follower} style={{ left: `${percent}%` }} />\n          </div>\n        )}\n      </div>\n      {display && (\n        <div className={styles.followerContainer}>\n          <div className={styles.legendValues}>\n            <span className={styles.disabled}>{display(min)}</span>\n            <span className={styles.disabled}>{display(max)}</span>\n          </div>\n          {percent != null && (scaleHover.isShown || hoverValue !== undefined) && (\n            <span className={styles.hoverValue} style={{ left: `${percent}%` }}>\n              {display(hoverValue ?? scaleHover.value)}\n            </span>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst getGradientStops = ({\n  colorArray,\n  stops,\n  useStopsPercentage = true,\n}: {\n  colorArray: string[];\n  stops: number;\n  useStopsPercentage?: boolean;\n}): string[] => {\n  const colorCount = colorArray.length;\n  if (useStopsPercentage && colorCount <= 20) {\n    const incr = (1 / colorCount) * 100;\n    let per = 0;\n    const stops: string[] = [];\n    for (const color of colorArray) {\n      if (per > 0) {\n        stops.push(`${color} ${per}%`);\n      } else {\n        stops.push(color);\n      }\n      per += incr;\n      stops.push(`${color} ${per}%`);\n    }\n    return stops;\n  }\n\n  const gradientEnd = colorArray[colorCount - 1];\n  const skip = Math.ceil(colorCount / stops);\n  const gradientStops = new Set<string>();\n\n  for (let i = 0; i < colorCount; i += skip) {\n    gradientStops.add(colorArray[i]);\n  }\n\n  gradientStops.add(gradientEnd);\n\n  return [...gradientStops];\n};\n\nfunction clampPercent100(v: number) {\n  if (v > 1) {\n    return 100;\n  }\n  if (v < 0) {\n    return 0;\n  }\n  return v * 100;\n}\n\nconst getStyles = (theme: GrafanaTheme2, colors: string[]) => ({\n  scaleWrapper: css({\n    width: '100%',\n    fontSize: '11px',\n    opacity: 1,\n  }),\n  scaleGradient: css({\n    background: `linear-gradient(90deg, ${colors.join()})`,\n    height: '9px',\n    pointerEvents: 'none',\n    borderRadius: theme.shape.radius.default,\n  }),\n  legendValues: css({\n    display: 'flex',\n    justifyContent: 'space-between',\n    pointerEvents: 'none',\n  }),\n  hoverValue: css({\n    position: 'absolute',\n    marginTop: '-14px',\n    padding: '3px 15px',\n    transform: 'translateX(-50%)',\n  }),\n  followerContainer: css({\n    position: 'relative',\n    pointerEvents: 'none',\n    whiteSpace: 'nowrap',\n  }),\n  follower: css({\n    position: 'absolute',\n    height: '13px',\n    width: '13px',\n    borderRadius: theme.shape.radius.default,\n    transform: 'translateX(-50%) translateY(-50%)',\n    border: `2px solid ${theme.colors.text.primary}`,\n    top: '5px',\n  }),\n  disabled: css({\n    color: theme.colors.text.disabled,\n  }),\n});\n","export function renderHistogram(\n  can: React.RefObject<HTMLCanvasElement>,\n  histCanWidth: number,\n  histCanHeight: number,\n  xVals: number[],\n  countVals: number[],\n  index: number,\n  yBucketCount: number\n) {\n  let histCtx = can.current?.getContext('2d');\n\n  if (histCtx != null) {\n    const barsGap = 1;\n    let fromIdx = index;\n\n    while (xVals[fromIdx - 1] === xVals[index]) {\n      fromIdx--;\n    }\n\n    let toIdx = fromIdx + yBucketCount;\n\n    let maxCount = 0;\n\n    let i = fromIdx;\n    while (i < toIdx) {\n      let c = countVals[i];\n      maxCount = Math.max(maxCount, c);\n      i++;\n    }\n\n    let pHov = new Path2D();\n    let pRest = new Path2D();\n\n    i = fromIdx;\n    let j = 0;\n    while (i < toIdx) {\n      let c = countVals[i];\n\n      if (c > 0) {\n        let pctY = c / maxCount;\n        let pctX = j / yBucketCount;\n\n        let p = i === index ? pHov : pRest;\n\n        const xCoord = histCanWidth * pctX + barsGap;\n        const width = histCanWidth / yBucketCount - barsGap;\n\n        p.rect(xCoord, Math.round(histCanHeight * (1 - pctY)), width, Math.round(histCanHeight * pctY));\n      }\n\n      i++;\n      j++;\n    }\n\n    histCtx.clearRect(0, 0, histCanWidth, histCanHeight);\n\n    histCtx.fillStyle = '#2E3036';\n    histCtx.fill(pRest);\n\n    histCtx.fillStyle = '#5794F2';\n    histCtx.fill(pHov);\n  }\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport uPlot from 'uplot';\n\nimport {\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  LinkModel,\n  TimeRange,\n  InterpolateFunction,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport { LinkButton, VerticalGroup } from '@grafana/ui';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { DataHoverView } from 'app/features/visualization/data-hover/DataHoverView';\n\nimport { getDataLinks } from '../status-history/utils';\n\nimport { HeatmapData } from './fields';\nimport { renderHistogram } from './renderHistogram';\nimport { HeatmapHoverEvent } from './utils';\n\ntype Props = {\n  data: HeatmapData;\n  hover: HeatmapHoverEvent;\n  showHistogram?: boolean;\n  timeRange: TimeRange;\n  replaceVars: InterpolateFunction;\n};\n\nexport const HeatmapHoverView = (props: Props) => {\n  if (props.hover.seriesIdx === 2) {\n    return <DataHoverView data={props.data.exemplars} rowIndex={props.hover.dataIdx} header={'Exemplar'} />;\n  }\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({ data, hover, showHistogram = false }: Props) => {\n  const index = hover.dataIdx;\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  const xField = data.heatmap?.fields[0];\n  const yField = data.heatmap?.fields[1];\n  const countField = data.heatmap?.fields[2];\n\n  const xDisp = (v: number) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField?.values;\n  const yVals = yField?.values;\n  const countVals = countField?.values;\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: string) => formattedValueToString(yField.display!(v)) : (v: string) => `${v}`;\n\n  const yValueIdx = index % (data.yBucketCount ?? 1);\n  const xValueIdx = Math.floor(index / (data.yBucketCount ?? 1));\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  if (meta.yOrdinalDisplay) {\n    const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n    const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n    yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n    yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n    // e.g. \"pod-xyz123\"\n    if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n      nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n    }\n  } else {\n    const value = yVals?.[yValueIdx];\n\n    if (data.yLayout === HeatmapCellLayout.le) {\n      yBucketMax = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) - 1 / data.yLogSplit!;\n        yBucketMin = `${data.yLog ** exp}`;\n      } else {\n        yBucketMin = `${value - data.yBucketSize!}`;\n      }\n    } else {\n      yBucketMin = `${value}`;\n\n      if (data.yLog) {\n        let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n        let exp = logFn(value) + 1 / data.yLogSplit!;\n        yBucketMax = `${data.yLog ** exp}`;\n      } else {\n        yBucketMax = `${value + data.yBucketSize!}`;\n      }\n    }\n  }\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  if (data.xLayout === HeatmapCellLayout.le) {\n    xBucketMax = xVals?.[index];\n    xBucketMin = xBucketMax - data.xBucketSize!;\n  } else {\n    xBucketMin = xVals?.[index];\n    xBucketMax = xBucketMin + data.xBucketSize!;\n  }\n\n  const count = countVals?.[index];\n\n  let links: Array<LinkModel<Field>> = [];\n\n  const linksField = data.series?.fields[yValueIdx + 1];\n\n  if (linksField != null) {\n    const visible = !Boolean(linksField.config.custom?.hideFrom?.tooltip);\n    const hasLinks = (linksField.config.links?.length ?? 0) > 0;\n\n    if (visible && hasLinks) {\n      links = getDataLinks(linksField, xValueIdx);\n    }\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 264;\n  let histCssHeight = 64;\n  let histCanWidth = Math.round(histCssWidth * uPlot.pxRatio);\n  let histCanHeight = Math.round(histCssHeight * uPlot.pxRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram && xVals != null && countVals != null) {\n        renderHistogram(can, histCanWidth, histCanHeight, xVals, countVals, index, data.yBucketCount!);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  if (isSparse) {\n    return (\n      <div>\n        <DataHoverView data={data.heatmap} rowIndex={index} />\n      </div>\n    );\n  }\n\n  const renderYBucket = () => {\n    if (nonNumericOrdinalDisplay) {\n      return <div>Name: {nonNumericOrdinalDisplay}</div>;\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return <div>{yDisp(yBucketMin)}</div>;\n    }\n    return (\n      <div>\n        Bucket: {yDisp(yBucketMin)} - {yDisp(yBucketMax)}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <div>\n        <div>{xDisp(xBucketMin)}</div>\n        {data.xLayout !== HeatmapCellLayout.unknown && <div>{xDisp(xBucketMax)}</div>}\n      </div>\n      {showHistogram && (\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCssWidth + 'px', height: histCssHeight + 'px' }}\n        />\n      )}\n      <div>\n        {renderYBucket()}\n        <div>\n          {getFieldDisplayName(countField!, data.heatmap)}: {data.display!(count)}\n        </div>\n      </div>\n      {links.length > 0 && (\n        <VerticalGroup>\n          {links.map((link, i) => (\n            <LinkButton\n              key={i}\n              icon={'external-link-alt'}\n              target={link.target}\n              href={link.href}\n              onClick={link.onClick}\n              fill=\"text\"\n              style={{ width: '100%' }}\n            >\n              {link.title}\n            </LinkButton>\n          ))}\n        </VerticalGroup>\n      )}\n    </>\n  );\n};\n","import { DataFrame, Field } from '@grafana/data';\n\nimport { HeatmapData } from '../fields';\n\ntype BucketsMinMax = {\n  xBucketMin: number;\n  xBucketMax: number;\n  yBucketMin: string;\n  yBucketMax: string;\n};\n\nexport const getHoverCellColor = (data: HeatmapData, index: number) => {\n  const colorPalette = data.heatmapColors?.palette!;\n  const colorIndex = data.heatmapColors?.values[index];\n\n  let cellColor: string | undefined = undefined;\n\n  if (colorIndex != null) {\n    cellColor = colorPalette[colorIndex];\n  }\n\n  return { cellColor, colorPalette };\n};\n\nconst conversions: Record<string, number> = {\n  year: 1000 * 60 * 60 * 24 * 365,\n  month: 1000 * 60 * 60 * 24 * 30,\n  week: 1000 * 60 * 60 * 24 * 7,\n  day: 1000 * 60 * 60 * 24,\n  h: 1000 * 60 * 60,\n  m: 1000 * 60,\n  s: 1000,\n  ms: 1,\n};\n\nconst noPluralize = new Set(['ms', 's', 'm', 'h']);\n\n// @TODO: display \"~ 1 year/month\"?\nexport const formatMilliseconds = (milliseconds: number) => {\n  let value = 1;\n  let unit = 'ms';\n\n  for (unit in conversions) {\n    if (milliseconds >= conversions[unit]) {\n      value = Math.floor(milliseconds / conversions[unit]);\n      break;\n    }\n  }\n\n  const plural = value !== 1 && !noPluralize.has(unit);\n  const unitString = plural ? unit + 's' : unit;\n\n  return `${value} ${unitString}`;\n};\n\nexport const getFieldFromData = (data: DataFrame, fieldType: string, isSparse: boolean) => {\n  let field: Field | undefined;\n\n  switch (fieldType) {\n    case 'x':\n      field = isSparse\n        ? data?.fields.find(({ name }) => name === 'x' || name === 'xMin' || name === 'xMax')\n        : data?.fields[0];\n      break;\n    case 'y':\n      field = isSparse\n        ? data?.fields.find(({ name }) => name === 'y' || name === 'yMin' || name === 'yMax')\n        : data?.fields[1];\n      break;\n    case 'count':\n      field = isSparse ? data?.fields.find(({ name }) => name === 'count') : data?.fields[2];\n      break;\n  }\n\n  return field;\n};\n\nexport const getSparseCellMinMax = (data: HeatmapData, index: number): BucketsMinMax => {\n  let fields = data.heatmap!.fields;\n\n  let xMax = fields.find((f) => f.name === 'xMax')!;\n  let yMin = fields.find((f) => f.name === 'yMin')!;\n  let yMax = fields.find((f) => f.name === 'yMax')!;\n\n  let interval = xMax.config.interval!;\n\n  return {\n    xBucketMin: xMax.values[index] - interval,\n    xBucketMax: xMax.values[index],\n    yBucketMin: yMin.values[index],\n    yBucketMax: yMax.values[index],\n  };\n};\n","import React, { ReactElement, useEffect, useRef, useState, ReactNode } from 'react';\nimport uPlot from 'uplot';\n\nimport {\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getFieldDisplayName,\n  LinkModel,\n  PanelData,\n} from '@grafana/data';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport { TooltipDisplayMode, useStyles2, useTheme2 } from '@grafana/ui';\nimport { VizTooltipContent } from '@grafana/ui/src/components/VizTooltip/VizTooltipContent';\nimport { VizTooltipFooter } from '@grafana/ui/src/components/VizTooltip/VizTooltipFooter';\nimport { VizTooltipHeader } from '@grafana/ui/src/components/VizTooltip/VizTooltipHeader';\nimport { ColorIndicator, ColorPlacement, VizTooltipItem } from '@grafana/ui/src/components/VizTooltip/types';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { getDashboardSrv } from 'app/features/dashboard/services/DashboardSrv';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { DataHoverView } from 'app/features/visualization/data-hover/DataHoverView';\n\nimport { getDataLinks } from '../status-history/utils';\nimport { getStyles } from '../timeseries/TimeSeriesTooltip';\n\nimport { HeatmapData } from './fields';\nimport { renderHistogram } from './renderHistogram';\nimport { formatMilliseconds, getFieldFromData, getHoverCellColor, getSparseCellMinMax } from './tooltip/utils';\n\ninterface HeatmapTooltipProps {\n  mode: TooltipDisplayMode;\n  dataIdxs: Array<number | null>;\n  seriesIdx: number | null | undefined;\n  dataRef: React.MutableRefObject<HeatmapData>;\n  showHistogram?: boolean;\n  showColorScale?: boolean;\n  isPinned: boolean;\n  dismiss: () => void;\n  panelData: PanelData;\n  annotate?: () => void;\n}\n\nexport const HeatmapTooltip = (props: HeatmapTooltipProps) => {\n  if (props.seriesIdx === 2) {\n    return (\n      <DataHoverView\n        data={props.dataRef.current!.exemplars}\n        rowIndex={props.dataIdxs[2]}\n        header={'Exemplar'}\n        padding={8}\n      />\n    );\n  }\n\n  return <HeatmapHoverCell {...props} />;\n};\n\nconst HeatmapHoverCell = ({\n  dataIdxs,\n  dataRef,\n  showHistogram,\n  isPinned,\n  showColorScale = false,\n  mode,\n  annotate,\n}: HeatmapTooltipProps) => {\n  const index = dataIdxs[1]!;\n  const data = dataRef.current;\n\n  const [isSparse] = useState(\n    () => data.heatmap?.meta?.type === DataFrameType.HeatmapCells && !isHeatmapCellsDense(data.heatmap)\n  );\n\n  const xField = getFieldFromData(data.heatmap!, 'x', isSparse)!;\n  const yField = getFieldFromData(data.heatmap!, 'y', isSparse)!;\n  const countField = getFieldFromData(data.heatmap!, 'count', isSparse)!;\n\n  const xDisp = (v: number) => {\n    if (xField?.display) {\n      return formattedValueToString(xField.display(v));\n    }\n    if (xField?.type === FieldType.time) {\n      const tooltipTimeFormat = 'YYYY-MM-DD HH:mm:ss';\n      const dashboard = getDashboardSrv().getCurrent();\n      return dashboard?.formatDate(v, tooltipTimeFormat);\n    }\n    return `${v}`;\n  };\n\n  const xVals = xField.values;\n  const yVals = yField.values;\n  const countVals = countField.values;\n\n  // labeled buckets\n  const meta = readHeatmapRowsCustomMeta(data.heatmap);\n  const yDisp = yField?.display ? (v: string) => formattedValueToString(yField.display!(v)) : (v: string) => `${v}`;\n\n  let interval = xField?.config.interval;\n\n  let yBucketMin: string;\n  let yBucketMax: string;\n\n  let xBucketMin: number;\n  let xBucketMax: number;\n\n  let nonNumericOrdinalDisplay: string | undefined = undefined;\n\n  let contentItems: VizTooltipItem[] = [];\n\n  const getYValueIndex = (idx: number) => {\n    return idx % (data.yBucketCount ?? 1);\n  };\n\n  let yValueIdx = getYValueIndex(index);\n  const xValueIdx = Math.floor(index / (data.yBucketCount ?? 1));\n\n  const getData = (idx: number = index) => {\n    if (meta.yOrdinalDisplay) {\n      const yMinIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx - 1 : yValueIdx;\n      const yMaxIdx = data.yLayout === HeatmapCellLayout.le ? yValueIdx : yValueIdx + 1;\n      yBucketMin = yMinIdx < 0 ? meta.yMinDisplay! : `${meta.yOrdinalDisplay[yMinIdx]}`;\n      yBucketMax = `${meta.yOrdinalDisplay[yMaxIdx]}`;\n\n      // e.g. \"pod-xyz123\"\n      if (!meta.yOrdinalLabel || Number.isNaN(+meta.yOrdinalLabel[0])) {\n        nonNumericOrdinalDisplay = data.yLayout === HeatmapCellLayout.le ? yBucketMax : yBucketMin;\n      }\n    } else {\n      const value = yVals?.[yValueIdx];\n\n      if (data.yLayout === HeatmapCellLayout.le) {\n        yBucketMax = `${value}`;\n\n        if (data.yLog) {\n          let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n          let exp = logFn(value) - 1 / data.yLogSplit!;\n          yBucketMin = `${data.yLog ** exp}`;\n        } else {\n          yBucketMin = `${value - data.yBucketSize!}`;\n        }\n      } else {\n        yBucketMin = `${value}`;\n\n        if (data.yLog) {\n          let logFn = data.yLog === 2 ? Math.log2 : Math.log10;\n          let exp = logFn(value) + 1 / data.yLogSplit!;\n          yBucketMax = `${data.yLog ** exp}`;\n        } else {\n          yBucketMax = `${value + data.yBucketSize!}`;\n        }\n      }\n    }\n\n    if (data.xLayout === HeatmapCellLayout.le) {\n      xBucketMax = xVals[idx];\n      xBucketMin = xBucketMax - data.xBucketSize!;\n    } else {\n      xBucketMin = xVals[idx];\n      xBucketMax = xBucketMin + data.xBucketSize!;\n    }\n  };\n\n  if (isSparse) {\n    ({ xBucketMin, xBucketMax, yBucketMin, yBucketMax } = getSparseCellMinMax(data!, index));\n  } else {\n    getData();\n  }\n\n  const { cellColor, colorPalette } = getHoverCellColor(data, index);\n\n  const getDisplayData = (fromIdx: number, toIdx: number) => {\n    let vals = [];\n    for (let idx = fromIdx; idx <= toIdx; idx++) {\n      if (!countVals?.[idx]) {\n        continue;\n      }\n\n      const color = getHoverCellColor(data, idx).cellColor;\n      count = getCountValue(idx);\n\n      if (isSparse) {\n        ({ xBucketMin, xBucketMax, yBucketMin, yBucketMax } = getSparseCellMinMax(data!, idx));\n      } else {\n        yValueIdx = getYValueIndex(idx);\n        getData(idx);\n      }\n\n      const { label, value } = getContentLabels()[0];\n\n      vals.push({\n        label,\n        value,\n        color: color ?? '#FFF',\n        isActive: index === idx,\n      });\n    }\n\n    return vals;\n  };\n\n  const getContentLabels = (): VizTooltipItem[] => {\n    const isMulti = mode === TooltipDisplayMode.Multi && !isPinned;\n\n    if (nonNumericOrdinalDisplay) {\n      return isMulti\n        ? [{ label: `Name ${nonNumericOrdinalDisplay}`, value: data.display!(count) }]\n        : [{ label: 'Name', value: nonNumericOrdinalDisplay }];\n    }\n\n    switch (data.yLayout) {\n      case HeatmapCellLayout.unknown:\n        return isMulti\n          ? [{ label: yDisp(yBucketMin), value: data.display!(count) }]\n          : [{ label: '', value: yDisp(yBucketMin) }];\n    }\n\n    return isMulti\n      ? [\n          {\n            label: `Bucket ${yDisp(yBucketMin)}` + '-' + `${yDisp(yBucketMax)}`,\n            value: data.display!(count),\n          },\n        ]\n      : [\n          {\n            label: 'Bucket',\n            value: `${yDisp(yBucketMin)}` + '-' + `${yDisp(yBucketMax)}`,\n          },\n        ];\n  };\n\n  const getCountValue = (idx: number) => {\n    return countVals?.[idx];\n  };\n\n  let count = getCountValue(index);\n\n  if (mode === TooltipDisplayMode.Single || isPinned) {\n    const fromToInt: VizTooltipItem[] = interval ? [{ label: 'Duration', value: formatMilliseconds(interval) }] : [];\n\n    contentItems = [\n      {\n        label: getFieldDisplayName(countField, data.heatmap),\n        value: data.display!(count),\n        color: cellColor ?? '#FFF',\n        colorPlacement: ColorPlacement.trailing,\n        colorIndicator: ColorIndicator.value,\n      },\n      ...getContentLabels(),\n      ...fromToInt,\n    ];\n  }\n\n  if (mode === TooltipDisplayMode.Multi && !isPinned) {\n    let xVal = xField.values[index];\n    let fromIdx = index;\n    let toIdx = index;\n\n    while (xField.values[fromIdx - 1] === xVal) {\n      fromIdx--;\n    }\n\n    while (xField.values[toIdx + 1] === xVal) {\n      toIdx++;\n    }\n\n    const vals: VizTooltipItem[] = getDisplayData(fromIdx, toIdx);\n    vals.forEach((val) => {\n      contentItems.push({\n        label: val.label,\n        value: val.value,\n        color: val.color ?? '#FFF',\n        colorIndicator: ColorIndicator.value,\n        colorPlacement: ColorPlacement.trailing,\n        isActive: val.isActive,\n      });\n    });\n  }\n\n  let footer: ReactNode;\n\n  if (isPinned) {\n    let links: Array<LinkModel<Field>> = [];\n\n    const linksField = data.series?.fields[yValueIdx + 1];\n\n    if (linksField != null) {\n      const visible = !Boolean(linksField.config.custom?.hideFrom?.tooltip);\n      const hasLinks = (linksField.config.links?.length ?? 0) > 0;\n\n      if (visible && hasLinks) {\n        links = getDataLinks(linksField, xValueIdx);\n      }\n    }\n\n    footer = <VizTooltipFooter dataLinks={links} annotate={annotate} />;\n  }\n\n  let can = useRef<HTMLCanvasElement>(null);\n\n  let histCssWidth = 264;\n  let histCssHeight = 64;\n  let histCanWidth = Math.round(histCssWidth * uPlot.pxRatio);\n  let histCanHeight = Math.round(histCssHeight * uPlot.pxRatio);\n\n  useEffect(\n    () => {\n      if (showHistogram && xVals != null && countVals != null && mode === TooltipDisplayMode.Single) {\n        renderHistogram(can, histCanWidth, histCanHeight, xVals, countVals, index, data.yBucketCount!);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [index]\n  );\n\n  const headerItem: VizTooltipItem = {\n    label: '',\n    value: xDisp(xBucketMax!)!,\n  };\n\n  let customContent: ReactElement[] = [];\n\n  if (mode === TooltipDisplayMode.Single) {\n    // Histogram\n    if (showHistogram && !isSparse) {\n      customContent.push(\n        <canvas\n          width={histCanWidth}\n          height={histCanHeight}\n          ref={can}\n          style={{ width: histCssWidth + 'px', height: histCssHeight + 'px' }}\n        />\n      );\n    }\n\n    // Color scale\n    if (colorPalette && showColorScale) {\n      customContent.push(\n        <ColorScale\n          colorPalette={colorPalette}\n          min={data.heatmapColors?.minValue!}\n          max={data.heatmapColors?.maxValue!}\n          display={data.display}\n          hoverValue={count}\n        />\n      );\n    }\n  }\n\n  const styles = useStyles2(getStyles);\n  const theme = useTheme2();\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipHeader item={headerItem} isPinned={isPinned} />\n      <VizTooltipContent items={contentItems} isPinned={isPinned}>\n        {customContent?.map((content, i) => (\n          <div key={i} style={{ padding: `${theme.spacing(1)} 0` }}>\n            {content}\n          </div>\n        ))}\n      </VizTooltipContent>\n      {footer}\n    </div>\n  );\n};\n","import { MutableRefObject, RefObject } from 'react';\nimport uPlot, { Cursor } from 'uplot';\n\nimport {\n  DashboardCursorSync,\n  DataFrameType,\n  formattedValueToString,\n  getValueFormat,\n  GrafanaTheme2,\n  incrRoundDn,\n  incrRoundUp,\n  TimeRange,\n  FieldType,\n} from '@grafana/data';\nimport { AxisPlacement, ScaleDirection, ScaleDistribution, ScaleOrientation, HeatmapCellLayout } from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { HeatmapData } from './fields';\nimport { FieldConfig, YAxisConfig } from './types';\n\ninterface PathbuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  gap?: number | null;\n  hideLE?: number;\n  hideGE?: number;\n  xAlign?: -1 | 0 | 1;\n  yAlign?: -1 | 0 | 1;\n  ySizeDivisor?: number;\n  disp: {\n    fill: {\n      values: (u: uPlot, seriesIndex: number) => number[];\n      index: Array<CanvasRenderingContext2D['fillStyle']>;\n    };\n  };\n}\n\ninterface PointsBuilderOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n}\n\nexport interface HeatmapHoverEvent {\n  seriesIdx: number;\n  dataIdx: number;\n  pageX: number;\n  pageY: number;\n}\n\nexport interface HeatmapZoomEvent {\n  xMin: number;\n  xMax: number;\n}\n\ninterface PrepConfigOpts {\n  dataRef: RefObject<HeatmapData>;\n  theme: GrafanaTheme2;\n  onhover?: null | ((evt?: HeatmapHoverEvent | null) => void);\n  onclick?: null | ((evt?: Object) => void);\n  onzoom?: null | ((evt: HeatmapZoomEvent) => void);\n  isToolTipOpen?: MutableRefObject<boolean>;\n  timeZone: string;\n  getTimeRange: () => TimeRange;\n  exemplarColor: string;\n  cellGap?: number | null; // in css pixels\n  hideLE?: number;\n  hideGE?: number;\n  yAxisConfig: YAxisConfig;\n  ySizeDivisor?: number;\n  sync?: () => DashboardCursorSync;\n  // Identifies the shared key for uPlot cursor sync\n  eventsScope?: string;\n}\n\nexport function prepConfig(opts: PrepConfigOpts) {\n  const {\n    dataRef,\n    theme,\n    onhover,\n    onclick,\n    isToolTipOpen,\n    timeZone,\n    getTimeRange,\n    cellGap,\n    hideLE,\n    hideGE,\n    yAxisConfig,\n    ySizeDivisor,\n    sync,\n    eventsScope = '__global_',\n  } = opts;\n\n  const xScaleKey = 'x';\n  let isTime = true;\n\n  if (dataRef.current?.heatmap?.fields[0].type !== FieldType.time) {\n    isTime = false;\n  }\n\n  const pxRatio = devicePixelRatio;\n\n  let heatmapType = dataRef.current?.heatmap?.meta?.type;\n  const exemplarFillColor = theme.visualization.getColorByName(opts.exemplarColor);\n\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  let builder = new UPlotConfigBuilder(timeZone);\n\n  let rect: DOMRect;\n\n  builder.addHook('init', (u) => {\n    u.root.querySelectorAll<HTMLElement>('.u-cursor-pt').forEach((el) => {\n      Object.assign(el.style, {\n        borderRadius: '0',\n        border: '1px solid white',\n        background: 'transparent',\n      });\n    });\n\n    onclick &&\n      u.over.addEventListener(\n        'mouseup',\n        (e) => {\n          // @ts-ignore\n          let isDragging: boolean = u.cursor.drag._x || u.cursor.drag._y;\n\n          if (!isDragging) {\n            onclick(e);\n          }\n        },\n        true\n      );\n  });\n\n  if (isTime) {\n    // this is a tmp hack because in mode: 2, uplot does not currently call scales.x.range() for setData() calls\n    // scales.x.range() typically reads back from drilled-down panelProps.timeRange via getTimeRange()\n    builder.addHook('setData', (u) => {\n      //let [min, max] = (u.scales!.x!.range! as uPlot.Range.Function)(u, 0, 100, xScaleKey);\n\n      let { min: xMin, max: xMax } = u.scales!.x;\n\n      let min = getTimeRange().from.valueOf();\n      let max = getTimeRange().to.valueOf();\n\n      if (xMin !== min || xMax !== max) {\n        queueMicrotask(() => {\n          u.setScale(xScaleKey, { min, max });\n        });\n      }\n    });\n  }\n\n  // rect of .u-over (grid area)\n  builder.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  let pendingOnleave: ReturnType<typeof setTimeout> | 0;\n\n  onhover &&\n    builder.addHook('setLegend', (u) => {\n      if (u.cursor.idxs != null) {\n        for (let i = 0; i < u.cursor.idxs.length; i++) {\n          const sel = u.cursor.idxs[i];\n          if (sel != null) {\n            const { left, top } = u.cursor;\n\n            if (!isToolTipOpen?.current) {\n              if (pendingOnleave) {\n                clearTimeout(pendingOnleave);\n                pendingOnleave = 0;\n              }\n              onhover({\n                seriesIdx: i,\n                dataIdx: sel,\n                pageX: rect.left + left!,\n                pageY: rect.top + top!,\n              });\n            }\n            return;\n          }\n        }\n      }\n\n      if (!isToolTipOpen?.current) {\n        // if tiles have gaps, reduce flashing / re-render (debounce onleave by 100ms)\n        if (!pendingOnleave) {\n          pendingOnleave = setTimeout(() => {\n            onhover(null);\n          }, 100);\n        }\n      }\n    });\n\n  builder.addHook('drawClear', (u) => {\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  builder.addScale({\n    scaleKey: xScaleKey,\n    isTime,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    // TODO: expand by x bucket size and layout\n    range: (u, dataMin, dataMax) => {\n      if (isTime) {\n        return [getTimeRange().from.valueOf(), getTimeRange().to.valueOf()];\n      } else {\n        if (dataRef.current?.xLayout === HeatmapCellLayout.le) {\n          return [dataMin - dataRef.current?.xBucketSize!, dataMax];\n        } else if (dataRef.current?.xLayout === HeatmapCellLayout.ge) {\n          return [dataMin, dataMax + dataRef.current?.xBucketSize!];\n        } else {\n          let offset = dataRef.current?.xBucketSize! / 2;\n\n          return [dataMin - offset, dataMax + offset];\n        }\n      }\n    },\n  });\n\n  let incrs;\n\n  if (!isTime) {\n    incrs = [];\n\n    for (let i = 0; i < 10; i++) {\n      incrs.push(i * dataRef.current?.xBucketSize!);\n    }\n  }\n\n  builder.addAxis({\n    scaleKey: xScaleKey,\n    placement: AxisPlacement.Bottom,\n    incrs,\n    isTime,\n    theme: theme,\n    timeZone,\n  });\n\n  const yField = dataRef.current?.heatmap?.fields[1]!;\n  if (!yField) {\n    return builder; // early abort (avoids error)\n  }\n\n  const yFieldConfig: FieldConfig | undefined = yField.config?.custom;\n  const yScale = yFieldConfig?.scaleDistribution ?? { type: ScaleDistribution.Linear };\n  const yAxisReverse = Boolean(yAxisConfig.reverse);\n  const isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n  const shouldUseLogScale = yScale.type !== ScaleDistribution.Linear || isSparseHeatmap;\n  const isOrdinalY = readHeatmapRowsCustomMeta(dataRef.current?.heatmap).yOrdinalDisplay != null;\n\n  // random to prevent syncing y in other heatmaps\n  // TODO: try to match TimeSeries y keygen algo to sync with TimeSeries panels (when not isOrdinalY)\n  const yScaleKey = 'y_' + (Math.random() + 1).toString(36).substring(7);\n\n  builder.addScale({\n    scaleKey: yScaleKey,\n    isTime: false,\n    // distribution: ScaleDistribution.Ordinal, // does not work with facets/scatter yet\n    orientation: ScaleOrientation.Vertical,\n    direction: yAxisReverse ? ScaleDirection.Down : ScaleDirection.Up,\n    // should be tweakable manually\n    distribution: shouldUseLogScale ? ScaleDistribution.Log : ScaleDistribution.Linear,\n    log: yScale.log ?? 2,\n    range:\n      // sparse already accounts for le/ge by explicit yMin & yMax cell bounds, so no need to expand y range\n      isSparseHeatmap\n        ? (u, dataMin, dataMax) => {\n            // ...but uPlot currently only auto-ranges from the yMin facet data, so we have to grow by 1 extra factor\n            // @ts-ignore\n            let bucketFactor = u.data[1][2][0] / u.data[1][1][0];\n\n            dataMax *= bucketFactor;\n\n            let scaleMin: number | null, scaleMax: number | null;\n\n            [scaleMin, scaleMax] = shouldUseLogScale\n              ? uPlot.rangeLog(dataMin, dataMax, (yScale.log ?? 2) as unknown as uPlot.Scale.LogBase, true)\n              : [dataMin, dataMax];\n\n            if (shouldUseLogScale && !isOrdinalY) {\n              let yExp = u.scales[yScaleKey].log!;\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n              // guard against <= 0\n              if (explicitMin != null && explicitMin > 0) {\n                // snap to magnitude\n                let minLog = log(explicitMin);\n                scaleMin = yExp ** incrRoundDn(minLog, 1);\n              }\n\n              if (explicitMax != null && explicitMax > 0) {\n                let maxLog = log(explicitMax);\n                scaleMax = yExp ** incrRoundUp(maxLog, 1);\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          }\n        : // dense and ordinal only have one of yMin|yMax|y, so expand range by one cell in the direction of le/ge/unknown\n          (u, dataMin, dataMax) => {\n            let scaleMin = dataMin,\n              scaleMax = dataMax;\n\n            let { min: explicitMin, max: explicitMax } = yAxisConfig;\n\n            // logarithmic expansion\n            if (shouldUseLogScale) {\n              let yExp = u.scales[yScaleKey].log!;\n\n              let minExpanded = false;\n              let maxExpanded = false;\n\n              let log = yExp === 2 ? Math.log2 : Math.log10;\n\n              if (ySizeDivisor !== 1) {\n                let minLog = log(dataMin);\n                let maxLog = log(dataMax);\n\n                if (!Number.isInteger(minLog)) {\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                  minExpanded = true;\n                }\n\n                if (!Number.isInteger(maxLog)) {\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                  maxExpanded = true;\n                }\n              }\n\n              if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                if (!minExpanded) {\n                  scaleMin /= yExp;\n                }\n              } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                if (!maxExpanded) {\n                  scaleMax *= yExp;\n                }\n              } else {\n                scaleMin /= yExp / 2;\n                scaleMax *= yExp / 2;\n              }\n\n              if (!isOrdinalY) {\n                // guard against <= 0\n                if (explicitMin != null && explicitMin > 0) {\n                  // snap down to magnitude\n                  let minLog = log(explicitMin);\n                  scaleMin = yExp ** incrRoundDn(minLog, 1);\n                }\n\n                if (explicitMax != null && explicitMax > 0) {\n                  let maxLog = log(explicitMax);\n                  scaleMax = yExp ** incrRoundUp(maxLog, 1);\n                }\n              }\n            }\n            // linear expansion\n            else {\n              let bucketSize = dataRef.current?.yBucketSize;\n\n              if (bucketSize === 0) {\n                bucketSize = 1;\n              }\n\n              if (bucketSize) {\n                if (dataRef.current?.yLayout === HeatmapCellLayout.le) {\n                  scaleMin -= bucketSize!;\n                } else if (dataRef.current?.yLayout === HeatmapCellLayout.ge) {\n                  scaleMax += bucketSize!;\n                } else {\n                  scaleMin -= bucketSize! / 2;\n                  scaleMax += bucketSize! / 2;\n                }\n              } else {\n                // how to expand scale range if inferred non-regular or log buckets?\n              }\n\n              if (!isOrdinalY) {\n                scaleMin = explicitMin ?? scaleMin;\n                scaleMax = explicitMax ?? scaleMax;\n              }\n            }\n\n            return [scaleMin, scaleMax];\n          },\n  });\n\n  const dispY = yField.display ?? getValueFormat('short');\n\n  builder.addAxis({\n    scaleKey: yScaleKey,\n    show: yAxisConfig.axisPlacement !== AxisPlacement.Hidden,\n    placement: yAxisConfig.axisPlacement || AxisPlacement.Left,\n    size: yAxisConfig.axisWidth || null,\n    label: yAxisConfig.axisLabel,\n    theme: theme,\n    formatValue: (v, decimals) => formattedValueToString(dispY(v, decimals)),\n    splits: isOrdinalY\n      ? (self: uPlot) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (!meta.yOrdinalDisplay) {\n            return [0, 1]; //?\n          }\n          let splits = meta.yOrdinalDisplay.map((v, idx) => idx);\n\n          switch (dataRef.current?.yLayout) {\n            case HeatmapCellLayout.le:\n              splits.unshift(-1);\n              break;\n            case HeatmapCellLayout.ge:\n              splits.push(splits.length);\n              break;\n          }\n\n          // Skip labels when the height is too small\n          if (self.height < 60) {\n            splits = [splits[0], splits[splits.length - 1]];\n          } else {\n            while (splits.length > 3 && (self.height - 15) / splits.length < 10) {\n              splits = splits.filter((v, idx) => idx % 2 === 0); // remove half the items\n            }\n          }\n          return splits;\n        }\n      : undefined,\n    values: isOrdinalY\n      ? (self: uPlot, splits) => {\n          const meta = readHeatmapRowsCustomMeta(dataRef.current?.heatmap);\n          if (meta.yOrdinalDisplay) {\n            return splits.map((v) =>\n              v < 0\n                ? meta.yMinDisplay ?? '' // Check prometheus style labels\n                : meta.yOrdinalDisplay[v] ?? ''\n            );\n          }\n          return splits;\n        }\n      : undefined,\n  });\n\n  const pathBuilder = isSparseHeatmap ? heatmapPathsSparse : heatmapPathsDense;\n\n  // heatmap layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: pathBuilder({\n      each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n        qt.add({\n          x: x - u.bbox.left,\n          y: y - u.bbox.top,\n          w: xSize,\n          h: ySize,\n          sidx: seriesIdx,\n          didx: dataIdx,\n        });\n      },\n      gap: cellGap,\n      hideLE,\n      hideGE,\n      xAlign:\n        dataRef.current?.xLayout === HeatmapCellLayout.le\n          ? -1\n          : dataRef.current?.xLayout === HeatmapCellLayout.ge\n            ? 1\n            : 0,\n      yAlign: ((dataRef.current?.yLayout === HeatmapCellLayout.le\n        ? -1\n        : dataRef.current?.yLayout === HeatmapCellLayout.ge\n          ? 1\n          : 0) * (yAxisReverse ? -1 : 1)) as -1 | 0 | 1,\n      ySizeDivisor,\n      disp: {\n        fill: {\n          values: (u, seriesIdx) => dataRef.current?.heatmapColors?.values!,\n          index: dataRef.current?.heatmapColors?.palette!,\n        },\n      },\n    }),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  // exemplars layer\n  builder.addSeries({\n    facets: [\n      {\n        scale: xScaleKey,\n        auto: true,\n        sorted: 1,\n      },\n      {\n        scale: yScaleKey,\n        auto: true,\n      },\n    ],\n    pathBuilder: heatmapPathsPoints(\n      {\n        each: (u, seriesIdx, dataIdx, x, y, xSize, ySize) => {\n          qt.add({\n            x: x - u.bbox.left,\n            y: y - u.bbox.top,\n            w: xSize,\n            h: ySize,\n            sidx: seriesIdx,\n            didx: dataIdx,\n          });\n        },\n      },\n      exemplarFillColor,\n      dataRef.current.yLayout\n    ),\n    theme,\n    scaleKey: '', // facets' scales used (above)\n  });\n\n  const cursor: Cursor = {\n    drag: {\n      x: true,\n      y: false,\n      setScale: false,\n    },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        hRect = null;\n\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            hRect = o;\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    focus: {\n      prox: 1e3,\n      dist: (u, seriesIdx) => (hRect?.sidx === seriesIdx ? 0 : Infinity),\n    },\n    points: {\n      fill: 'rgba(255,255,255, 0.3)',\n      bbox: (u, seriesIdx) => {\n        let isHovered = hRect && seriesIdx === hRect.sidx;\n\n        return {\n          left: isHovered ? hRect!.x / pxRatio : -10,\n          top: isHovered ? hRect!.y / pxRatio : -10,\n          width: isHovered ? hRect!.w / pxRatio : 0,\n          height: isHovered ? hRect!.h / pxRatio : 0,\n        };\n      },\n    },\n  };\n\n  if (sync && sync() !== DashboardCursorSync.Off) {\n    cursor.sync = {\n      key: eventsScope,\n      scales: [xScaleKey, null],\n    };\n\n    builder.setSync();\n  }\n\n  builder.setCursor(cursor);\n\n  return builder;\n}\n\nconst CRISP_EDGES_GAP_MIN = 4;\n\nexport function heatmapPathsDense(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity, xAlign = 1, yAlign = 1, ySizeDivisor = 1 } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        let d = u.data[seriesIdx];\n        const xs = d[0] as unknown as number[];\n        const ys = d[1] as unknown as number[];\n        const counts = d[2] as unknown as number[];\n        const dlen = xs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // detect x and y bin qtys by detecting layout repetition in x & y data\n        let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n        let xBinQty = dlen / yBinQty;\n        let yBinIncr = ys[1] - ys[0] || scaleY.max! - scaleY.min!;\n        let xBinIncr = xs[yBinQty] - xs[0];\n\n        // uniform tile sizes based on zoom level\n        let xSize: number;\n        let ySize: number;\n\n        if (scaleX.distr === 3) {\n          xSize = Math.abs(valToPosX(xs[0] * scaleX.log!, scaleX, xDim, xOff) - valToPosX(xs[0], scaleX, xDim, xOff));\n        } else {\n          xSize = Math.abs(valToPosX(xBinIncr, scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff));\n        }\n\n        if (scaleY.distr === 3) {\n          ySize =\n            Math.abs(valToPosY(ys[0] * scaleY.log!, scaleY, yDim, yOff) - valToPosY(ys[0], scaleY, yDim, yOff)) /\n            ySizeDivisor;\n        } else {\n          ySize = Math.abs(valToPosY(yBinIncr, scaleY, yDim, yOff) - valToPosY(0, scaleY, yDim, yOff)) / ySizeDivisor;\n        }\n\n        // clamp min tile size to 1px\n        xSize = Math.max(1, round(xSize - cellGap));\n        ySize = Math.max(1, round(ySize - cellGap));\n\n        // bucket agg direction\n        // let xCeil = false;\n        // let yCeil = false;\n\n        let xOffset = xAlign === -1 ? -xSize : xAlign === 0 ? -xSize / 2 : 0;\n        let yOffset = yAlign === 1 ? -ySize : yAlign === 0 ? -ySize / 2 : 0;\n\n        // pre-compute x and y offsets\n        let cys = ys.slice(0, yBinQty).map((y) => round(valToPosY(y, scaleY, yDim, yOff) + yOffset));\n        let cxs = Array.from({ length: xBinQty }, (v, i) =>\n          round(valToPosX(xs[i * yBinQty], scaleX, xDim, xOff) + xOffset)\n        );\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] > hideLE && counts[i] < hideGE) {\n            let cx = cxs[~~(i / yBinQty)];\n            let cy = cys[i % yBinQty];\n\n            let fillPath = fillPaths[fills[i]];\n\n            rect(fillPath, cx, cy, xSize, ySize);\n\n            each(u, 1, i, cx, cy, xSize, ySize);\n          }\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        return null;\n      }\n    );\n\n    return null;\n  };\n}\n\nexport function heatmapPathsPoints(opts: PointsBuilderOpts, exemplarColor: string, yLayout?: HeatmapCellLayout) {\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let points = new Path2D();\n        let fillPaths = [points];\n        let fillPalette = [exemplarColor ?? 'rgba(255,0,255,0.7)'];\n\n        let yShift = yLayout === HeatmapCellLayout.le ? -0.5 : yLayout === HeatmapCellLayout.ge ? 0.5 : 0;\n\n        for (let i = 0; i < dataX.length; i++) {\n          let yVal = dataY[i]!;\n\n          // this is a hacky by-proxy check\n          // works okay since we have no exemplars in calculated heatmaps and...\n          //  - heatmap-rows has ordinal y\n          //  - heatmap-cells has log2 y\n          let isSparseHeatmap = scaleY.distr === 3 && scaleY.log === 2;\n\n          if (!isSparseHeatmap) {\n            yVal += yShift;\n          }\n\n          let x = valToPosX(dataX[i], scaleX, xDim, xOff);\n          let y = valToPosY(yVal, scaleY, yDim, yOff);\n          let w = 8;\n          let h = 8;\n\n          rect(points, x - w / 2, y - h / 2, w, h);\n\n          opts.each(u, seriesIdx, i, x - w / 2, y - h / 2, w, h);\n        }\n\n        u.ctx.save();\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n      }\n    );\n\n    return null;\n  };\n}\n// accepts xMax, yMin, yMax, count\n// xbinsize? x tile sizes are uniform?\nexport function heatmapPathsSparse(opts: PathbuilderOpts) {\n  const { disp, each, gap = 1, hideLE = -Infinity, hideGE = Infinity } = opts;\n\n  const pxRatio = devicePixelRatio;\n\n  const round = gap! >= CRISP_EDGES_GAP_MIN ? Math.round : (v: number) => v;\n\n  const cellGap = Math.round(gap! * pxRatio);\n\n  return (u: uPlot, seriesIdx: number) => {\n    uPlot.orient(\n      u,\n      seriesIdx,\n      (\n        series,\n        dataX,\n        dataY,\n        scaleX,\n        scaleY,\n        valToPosX,\n        valToPosY,\n        xOff,\n        yOff,\n        xDim,\n        yDim,\n        moveTo,\n        lineTo,\n        rect,\n        arc\n      ) => {\n        //console.time('heatmapPathsSparse');\n\n        let d = u.data[seriesIdx];\n        const xMaxs = d[0] as unknown as number[]; // xMax, do we get interval?\n        const yMins = d[1] as unknown as number[];\n        const yMaxs = d[2] as unknown as number[];\n        const counts = d[3] as unknown as number[];\n        const dlen = xMaxs.length;\n\n        // fill colors are mapped from interpolating densities / counts along some gradient\n        // (should be quantized to 64 colors/levels max. e.g. 16)\n        let fills = disp.fill.values(u, seriesIdx);\n        let fillPalette = disp.fill.index ?? [...new Set(fills)];\n\n        let fillPaths = fillPalette.map((color) => new Path2D());\n\n        // cache all tile bounds\n        let xOffs = new Map();\n        let yOffs = new Map();\n\n        for (let i = 0; i < xMaxs.length; i++) {\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          if (!xOffs.has(xMax)) {\n            xOffs.set(xMax, round(valToPosX(xMax, scaleX, xDim, xOff)));\n          }\n\n          if (!yOffs.has(yMin)) {\n            yOffs.set(yMin, round(valToPosY(yMin, scaleY, yDim, yOff)));\n          }\n\n          if (!yOffs.has(yMax)) {\n            yOffs.set(yMax, round(valToPosY(yMax, scaleY, yDim, yOff)));\n          }\n        }\n\n        // uniform x size (interval, step)\n        let xSizeUniform = xOffs.get(xMaxs.find((v) => v !== xMaxs[0])) - xOffs.get(xMaxs[0]);\n\n        for (let i = 0; i < dlen; i++) {\n          if (counts[i] <= hideLE || counts[i] >= hideGE) {\n            continue;\n          }\n\n          let xMax = xMaxs[i];\n          let yMin = yMins[i];\n          let yMax = yMaxs[i];\n\n          let xMaxPx = xOffs.get(xMax); // xSize is from interval, or inferred delta?\n          let yMinPx = yOffs.get(yMin);\n          let yMaxPx = yOffs.get(yMax);\n\n          let xSize = xSizeUniform;\n          let ySize = yMinPx - yMaxPx;\n\n          // clamp min tile size to 1px\n          xSize = Math.max(1, xSize - cellGap);\n          ySize = Math.max(1, ySize - cellGap);\n\n          let x = xMaxPx - cellGap / 2 - xSize;\n          let y = yMaxPx + cellGap / 2;\n\n          let fillPath = fillPaths[fills[i]];\n\n          rect(fillPath, x, y, xSize, ySize);\n\n          each(u, 1, i, x, y, xSize, ySize);\n        }\n\n        u.ctx.save();\n        //\tu.ctx.globalAlpha = 0.8;\n        u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n        u.ctx.clip();\n        fillPaths.forEach((p, i) => {\n          u.ctx.fillStyle = fillPalette[i];\n          u.ctx.fill(p);\n        });\n        u.ctx.restore();\n\n        //console.timeEnd('heatmapPathsSparse');\n      }\n    );\n\n    return null;\n  };\n}\n\nexport const boundedMinMax = (\n  values: number[],\n  minValue?: number,\n  maxValue?: number,\n  hideLE = -Infinity,\n  hideGE = Infinity\n) => {\n  if (minValue == null) {\n    minValue = Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        minValue = Math.min(minValue, values[i]);\n      }\n    }\n  }\n\n  if (maxValue == null) {\n    maxValue = -Infinity;\n\n    for (let i = 0; i < values.length; i++) {\n      if (values[i] > hideLE && values[i] < hideGE) {\n        maxValue = Math.max(maxValue, values[i]);\n      }\n    }\n  }\n\n  return [minValue, maxValue];\n};\n\nexport const valuesToFills = (values: number[], palette: string[], minValue: number, maxValue: number): number[] => {\n  let range = maxValue - minValue || 1;\n\n  let paletteSize = palette.length;\n\n  let indexedFills = Array(values.length);\n\n  for (let i = 0; i < values.length; i++) {\n    indexedFills[i] =\n      values[i] < minValue\n        ? 0\n        : values[i] > maxValue\n          ? paletteSize - 1\n          : Math.min(paletteSize - 1, Math.floor((paletteSize * (values[i] - minValue)) / range));\n  }\n\n  return indexedFills;\n};\n","import {\n  cacheFieldDisplayNames,\n  DataFrame,\n  DataFrameType,\n  Field,\n  FieldType,\n  formattedValueToString,\n  getDisplayProcessor,\n  getLinksSupplier,\n  GrafanaTheme2,\n  InterpolateFunction,\n  outerJoinDataFrames,\n  ValueFormatter,\n} from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { HeatmapCellLayout } from '@grafana/schema';\nimport {\n  calculateHeatmapFromData,\n  isHeatmapCellsDense,\n  readHeatmapRowsCustomMeta,\n  rowsToCellsHeatmap,\n} from 'app/features/transformers/calculateHeatmap/heatmap';\nimport { parseSampleValue, sortSeriesByLabel } from 'app/plugins/datasource/prometheus/result_transformer';\n\nimport { CellValues, Options } from './types';\nimport { boundedMinMax, valuesToFills } from './utils';\n\nexport interface HeatmapData {\n  heatmap?: DataFrame; // data we will render\n  heatmapColors?: {\n    // quantized palette\n    palette: string[];\n    // indices into palette\n    values: number[];\n\n    // color scale range\n    minValue: number;\n    maxValue: number;\n  };\n\n  series?: DataFrame; // the joined single frame for nonNumericOrdinalY data links\n\n  exemplars?: DataFrame; // optionally linked exemplars\n  exemplarColor?: string;\n\n  xBucketSize?: number;\n  yBucketSize?: number;\n\n  xBucketCount?: number;\n  yBucketCount?: number;\n\n  xLayout?: HeatmapCellLayout;\n  yLayout?: HeatmapCellLayout;\n\n  xLog?: number;\n  yLog?: number;\n\n  xLogSplit?: number;\n  yLogSplit?: number;\n\n  // Print a heatmap cell value\n  display?: (v: number) => string;\n\n  // Errors\n  warning?: string;\n}\n\nexport function prepareHeatmapData(\n  frames: DataFrame[],\n  annotations: DataFrame[] | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2,\n  replaceVariables: InterpolateFunction = (v) => v\n): HeatmapData {\n  if (!frames?.length) {\n    return {};\n  }\n\n  cacheFieldDisplayNames(frames);\n\n  const exemplars = annotations?.find((f) => f.name === 'exemplar');\n\n  exemplars?.fields.forEach((field) => {\n    field.getLinks = getLinksSupplier(exemplars, field, field.state?.scopedVars ?? {}, replaceVariables);\n  });\n\n  if (options.calculate) {\n    if (config.featureToggles.transformationsVariableSupport) {\n      const optionsCopy = {\n        ...options,\n        calculation: {\n          xBuckets: { ...options.calculation?.xBuckets } ?? undefined,\n          yBuckets: { ...options.calculation?.yBuckets } ?? undefined,\n        },\n      };\n\n      if (optionsCopy.calculation?.xBuckets?.value && replaceVariables !== undefined) {\n        optionsCopy.calculation.xBuckets.value = replaceVariables(optionsCopy.calculation.xBuckets.value);\n      }\n\n      if (optionsCopy.calculation?.yBuckets?.value && replaceVariables !== undefined) {\n        optionsCopy.calculation.yBuckets.value = replaceVariables(optionsCopy.calculation.yBuckets.value);\n      }\n\n      return getDenseHeatmapData(\n        calculateHeatmapFromData(frames, optionsCopy.calculation ?? {}),\n        exemplars,\n        optionsCopy,\n        palette,\n        theme\n      );\n    }\n\n    return getDenseHeatmapData(\n      calculateHeatmapFromData(frames, options.calculation ?? {}),\n      exemplars,\n      options,\n      palette,\n      theme\n    );\n  }\n\n  // Check for known heatmap types\n  let rowsHeatmap: DataFrame | undefined = undefined;\n  for (const frame of frames) {\n    switch (frame.meta?.type) {\n      case DataFrameType.HeatmapCells:\n        return isHeatmapCellsDense(frame)\n          ? getDenseHeatmapData(frame, exemplars, options, palette, theme)\n          : getSparseHeatmapData(frame, exemplars, options, palette, theme);\n\n      case DataFrameType.HeatmapRows:\n        rowsHeatmap = frame; // the default format\n    }\n  }\n\n  // Everything past here assumes a field for each row in the heatmap (buckets)\n  if (rowsHeatmap == null) {\n    if (frames.length > 1) {\n      let allNamesNumeric = frames.every(\n        (frame) => !Number.isNaN(parseSampleValue(frame.fields[1].state?.displayName!))\n      );\n\n      if (allNamesNumeric) {\n        frames.sort(sortSeriesByLabel);\n      }\n\n      rowsHeatmap = outerJoinDataFrames({\n        frames,\n        keepDisplayNames: true,\n      })!;\n    } else {\n      let frame = frames[0];\n      let numberFields = frame.fields.filter((field) => field.type === FieldType.number);\n      let allNamesNumeric = numberFields.every((field) => !Number.isNaN(parseSampleValue(field.state?.displayName!)));\n\n      if (allNamesNumeric) {\n        numberFields.sort((a, b) => parseSampleValue(a.state?.displayName!) - parseSampleValue(b.state?.displayName!));\n\n        rowsHeatmap = {\n          ...frame,\n          fields: [frame.fields.find((f) => f.type === FieldType.time)!, ...numberFields],\n        };\n      } else {\n        rowsHeatmap = frame;\n      }\n    }\n  }\n\n  // config data links\n  rowsHeatmap.fields.forEach((field) => {\n    if ((field.config.links?.length ?? 0) === 0) {\n      return;\n    }\n\n    // this expects that the tooltip is able to identify the field and rowIndex from a dense hovered index\n    field.getLinks = getLinksSupplier(rowsHeatmap!, field, field.state?.scopedVars ?? {}, replaceVariables);\n  });\n\n  return {\n    ...getDenseHeatmapData(\n      rowsToCellsHeatmap({\n        unit: options.yAxis?.unit, // used to format the ordinal lookup values\n        decimals: options.yAxis?.decimals,\n        ...options.rowsFrame,\n        frame: rowsHeatmap,\n      }),\n      exemplars,\n      options,\n      palette,\n      theme\n    ),\n    series: rowsHeatmap,\n  };\n}\n\nconst getSparseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells || isHeatmapCellsDense(frame)) {\n    return {\n      warning: 'Expected sparse heatmap format',\n      heatmap: frame,\n    };\n  }\n\n  // y axis tick label display\n  updateFieldDisplay(frame.fields[1], options.yAxis, theme);\n\n  const valueField = frame.fields[3];\n\n  // cell value display\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  return {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n    exemplars,\n    display: (v) => formattedValueToString(disp(v)),\n  };\n};\n\nconst getDenseHeatmapData = (\n  frame: DataFrame,\n  exemplars: DataFrame | undefined,\n  options: Options,\n  palette: string[],\n  theme: GrafanaTheme2\n): HeatmapData => {\n  if (frame.meta?.type !== DataFrameType.HeatmapCells) {\n    return {\n      warning: 'Expected heatmap scanlines format',\n      heatmap: frame,\n    };\n  }\n\n  if (frame.fields.length < 2 || frame.length < 2) {\n    return { heatmap: frame };\n  }\n\n  const meta = readHeatmapRowsCustomMeta(frame);\n  let xName: string | undefined = undefined;\n  let yName: string | undefined = undefined;\n  let valueField: Field | undefined = undefined;\n\n  // validate field display properties\n  for (const field of frame.fields) {\n    switch (field.name) {\n      case 'y':\n        yName = field.name;\n\n      case 'yMin':\n      case 'yMax': {\n        if (!yName) {\n          yName = field.name;\n        }\n        if (meta.yOrdinalDisplay == null) {\n          updateFieldDisplay(field, options.yAxis, theme);\n        }\n        break;\n      }\n\n      case 'x':\n      case 'xMin':\n      case 'xMax':\n        xName = field.name;\n        break;\n\n      default: {\n        if (field.type === FieldType.number && !valueField) {\n          valueField = field;\n        }\n      }\n    }\n  }\n\n  if (!yName) {\n    return { warning: 'Missing Y field', heatmap: frame };\n  }\n  if (!yName) {\n    return { warning: 'Missing X field', heatmap: frame };\n  }\n  if (!valueField) {\n    return { warning: 'Missing value field', heatmap: frame };\n  }\n\n  const disp = updateFieldDisplay(valueField, options.cellValues, theme);\n\n  // infer bucket sizes from data (for now)\n  // the 'heatmap-scanlines' dense frame format looks like:\n  // x:      1,1,1,1,2,2,2,2\n  // y:      3,4,5,6,3,4,5,6\n  // count:  0,0,0,7,0,3,0,1\n\n  const xs = frame.fields[0].values;\n  const ys = frame.fields[1].values;\n  const dlen = xs.length;\n\n  // below is literally copy/paste from the pathBuilder code in utils.ts\n  // detect x and y bin qtys by detecting layout repetition in x & y data\n  let yBinQty = dlen - ys.lastIndexOf(ys[0]);\n  let xBinQty = dlen / yBinQty;\n  let yBinIncr = ys[1] - ys[0];\n  let xBinIncr = xs[yBinQty] - xs[0];\n\n  let [minValue, maxValue] = boundedMinMax(\n    valueField.values,\n    options.color.min,\n    options.color.max,\n    options.filterValues?.le,\n    options.filterValues?.ge\n  );\n\n  let calcX = options.calculation?.xBuckets;\n  let calcY = options.calculation?.yBuckets;\n\n  const data: HeatmapData = {\n    heatmap: frame,\n    heatmapColors: {\n      palette,\n      values: valuesToFills(valueField.values, palette, minValue, maxValue),\n      minValue,\n      maxValue,\n    },\n\n    exemplars: exemplars?.length ? exemplars : undefined,\n    xBucketSize: xBinIncr,\n    yBucketSize: yBinIncr,\n    xBucketCount: xBinQty,\n    yBucketCount: yBinQty,\n\n    yLog: calcY?.scale?.log ?? 0,\n    xLog: calcX?.scale?.log ?? 0,\n\n    xLogSplit: calcX?.scale?.log ? +(calcX?.value ?? '1') : 1,\n    yLogSplit: calcY?.scale?.log ? +(calcY?.value ?? '1') : 1,\n\n    // TODO: improve heuristic\n    xLayout:\n      xName === 'xMax' ? HeatmapCellLayout.le : xName === 'xMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n    yLayout:\n      yName === 'yMax' ? HeatmapCellLayout.le : yName === 'yMin' ? HeatmapCellLayout.ge : HeatmapCellLayout.unknown,\n\n    display: (v) => formattedValueToString(disp(v)),\n  };\n\n  return data;\n};\n\nfunction updateFieldDisplay(field: Field, opts: CellValues | undefined, theme: GrafanaTheme2): ValueFormatter {\n  if (opts?.unit?.length || opts?.decimals != null) {\n    const { unit, decimals } = opts;\n    field.display = undefined;\n    field.config = { ...field.config };\n    if (unit?.length) {\n      field.config.unit = unit;\n    }\n    if (decimals != null) {\n      field.config.decimals = decimals;\n    }\n  }\n  if (!field.display) {\n    field.display = getDisplayProcessor({ field, theme });\n  }\n  return field.display;\n}\n","import * as d3 from 'd3';\nimport * as d3ScaleChromatic from 'd3-scale-chromatic';\nimport tinycolor from 'tinycolor2';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nimport { HeatmapColorOptions, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\n// https://observablehq.com/@d3/color-schemes?collection=@d3/d3-scale-chromatic\n\n// the previous heatmap panel used d3 deps and some code to interpolate to static 9-color palettes. here we just hard-code them for clarity.\n// if the need arises for configurable-sized palettes, we can bring back the deps & variable interpolation (see simplified code at end)\n\n// Schemes from d3-scale-chromatic\n// https://github.com/d3/d3-scale-chromatic\nexport const colorSchemes = [\n  // Diverging\n  { name: 'BrBG', invert: 'always' },\n  { name: 'PiYG', invert: 'always' },\n  { name: 'PRGn', invert: 'always' },\n  { name: 'PuOr', invert: 'always' },\n  { name: 'RdBu', invert: 'always' },\n  { name: 'RdGy', invert: 'always' },\n  { name: 'RdYlBu', invert: 'always' },\n  { name: 'RdYlGn', invert: 'always' },\n  { name: 'Spectral', invert: 'always' },\n\n  // Sequential (Single Hue)\n  { name: 'Blues', invert: 'dark' },\n  { name: 'Greens', invert: 'dark' },\n  { name: 'Greys', invert: 'dark' },\n  { name: 'Oranges', invert: 'dark' },\n  { name: 'Purples', invert: 'dark' },\n  { name: 'Reds', invert: 'dark' },\n\n  // Sequential (Multi-Hue)\n  { name: 'Turbo', invert: 'light' },\n  { name: 'Cividis', invert: 'light' },\n  { name: 'Viridis', invert: 'light' },\n  { name: 'Magma', invert: 'light' },\n  { name: 'Inferno', invert: 'light' },\n  { name: 'Plasma', invert: 'light' },\n  { name: 'Warm', invert: 'light' },\n  { name: 'Cool', invert: 'light' },\n  { name: 'Cubehelix', invert: 'light', name2: 'CubehelixDefault' },\n  { name: 'BuGn', invert: 'dark' },\n  { name: 'BuPu', invert: 'dark' },\n  { name: 'GnBu', invert: 'dark' },\n  { name: 'OrRd', invert: 'dark' },\n  { name: 'PuBuGn', invert: 'dark' },\n  { name: 'PuBu', invert: 'dark' },\n  { name: 'PuRd', invert: 'dark' },\n  { name: 'RdPu', invert: 'dark' },\n  { name: 'YlGnBu', invert: 'dark' },\n  { name: 'YlGn', invert: 'dark' },\n  { name: 'YlOrBr', invert: 'dark' },\n  { name: 'YlOrRd', invert: 'dark' },\n\n  // Cyclical\n  { name: 'Rainbow', invert: 'always' },\n  { name: 'Sinebow', invert: 'always' },\n];\n\ntype Interpolator = (t: number) => string;\n\nconst DEFAULT_SCHEME = colorSchemes.find((scheme) => scheme.name === 'Spectral');\n\nexport function quantizeScheme(opts: HeatmapColorOptions, theme: GrafanaTheme2): string[] {\n  const options = { ...defaultOptions.color, ...opts };\n  const palette = [];\n  const steps = (options.steps ?? 128) - 1;\n\n  if (opts.mode === HeatmapColorMode.Opacity) {\n    const fill = tinycolor(theme.visualization.getColorByName(opts.fill)).toPercentageRgb();\n\n    const scale =\n      options.scale === HeatmapColorScale.Exponential\n        ? d3.scalePow().exponent(options.exponent).domain([0, 1]).range([0, 1])\n        : d3.scaleLinear().domain([0, 1]).range([0, 1]);\n\n    for (let i = 0; i <= steps; i++) {\n      fill.a = scale(i / steps);\n      palette.push(tinycolor(fill).toString('hex8'));\n    }\n  } else {\n    const scheme = colorSchemes.find((scheme) => scheme.name === options.scheme) ?? DEFAULT_SCHEME!;\n    let fnName = 'interpolate' + (scheme.name2 ?? scheme.name);\n    const interpolate: Interpolator = (d3ScaleChromatic as any)[fnName];\n\n    for (let i = 0; i <= steps; i++) {\n      let rgbStr = interpolate(i / steps);\n      let rgb =\n        rgbStr.indexOf('rgb') === 0\n          ? '#' + [...rgbStr.matchAll(/\\d+/g)].map((v) => (+v[0]).toString(16).padStart(2, '0')).join('')\n          : rgbStr;\n      palette.push(rgb);\n    }\n\n    if (\n      scheme.invert === 'always' ||\n      (scheme.invert === 'dark' && theme.isDark) ||\n      (scheme.invert === 'light' && theme.isLight)\n    ) {\n      palette.reverse();\n    }\n\n    if (opts.reverse) {\n      palette.reverse();\n    }\n  }\n\n  return palette;\n}\n","import { css } from '@emotion/css';\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\n\nimport { DashboardCursorSync, DataFrameType, GrafanaTheme2, PanelProps, TimeRange } from '@grafana/data';\nimport { config, PanelDataErrorView } from '@grafana/runtime';\nimport { ScaleDistributionConfig } from '@grafana/schema';\nimport {\n  Portal,\n  ScaleDistribution,\n  TooltipPlugin2,\n  TooltipDisplayMode,\n  ZoomPlugin,\n  UPlotChart,\n  usePanelContext,\n  useStyles2,\n  useTheme2,\n  VizLayout,\n  VizTooltipContainer,\n  EventBusPlugin,\n} from '@grafana/ui';\nimport { TimeRange2, TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { isHeatmapCellsDense, readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { AnnotationsPlugin2 } from '../timeseries/plugins/AnnotationsPlugin2';\n\nimport { ExemplarModalHeader } from './ExemplarModalHeader';\nimport { HeatmapHoverView } from './HeatmapHoverViewOld';\nimport { HeatmapTooltip } from './HeatmapTooltip';\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options } from './types';\nimport { HeatmapHoverEvent, prepConfig } from './utils';\n\ninterface HeatmapPanelProps extends PanelProps<Options> {}\n\nexport const HeatmapPanel = ({\n  data,\n  id,\n  timeRange,\n  timeZone,\n  width,\n  height,\n  options,\n  fieldConfig,\n  eventBus,\n  onChangeTimeRange,\n  replaceVariables,\n}: HeatmapPanelProps) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n  const { sync, canAddAnnotations } = usePanelContext();\n\n  // TODO: we should just re-init when this changes, and have this be a static setting\n  const syncTooltip = useCallback(\n    () => sync?.() === DashboardCursorSync.Tooltip,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const syncAny = useCallback(\n    () => sync?.() !== DashboardCursorSync.Off,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  // temp range set for adding new annotation set by TooltipPlugin2, consumed by AnnotationPlugin2\n  const [newAnnotationRange, setNewAnnotationRange] = useState<TimeRange2 | null>(null);\n\n  // ugh\n  let timeRangeRef = useRef<TimeRange>(timeRange);\n  timeRangeRef.current = timeRange;\n\n  const palette = useMemo(() => quantizeScheme(options.color, theme), [options.color, theme]);\n\n  const info = useMemo(() => {\n    try {\n      return prepareHeatmapData(data.series, data.annotations, options, palette, theme, replaceVariables);\n    } catch (ex) {\n      return { warning: `${ex}` };\n    }\n  }, [data.series, data.annotations, options, palette, theme, replaceVariables]);\n\n  const facets = useMemo(() => {\n    let exemplarsXFacet: number[] | undefined = []; // \"Time\" field\n    let exemplarsYFacet: Array<number | undefined> = [];\n\n    const meta = readHeatmapRowsCustomMeta(info.heatmap);\n\n    if (info.exemplars?.length) {\n      exemplarsXFacet = info.exemplars?.fields[0].values;\n\n      // render by match on ordinal y label\n      if (meta.yMatchWithLabel) {\n        // ordinal/labeled heatmap-buckets?\n        const hasLabeledY = meta.yOrdinalDisplay != null;\n\n        if (hasLabeledY) {\n          let matchExemplarsBy = info.exemplars?.fields.find((field) => field.name === meta.yMatchWithLabel)!.values;\n          exemplarsYFacet = matchExemplarsBy.map((label) => meta.yOrdinalLabel?.indexOf(label));\n        } else {\n          exemplarsYFacet = info.exemplars?.fields[1].values; // \"Value\" field\n        }\n      }\n      // render by raw value\n      else {\n        exemplarsYFacet = info.exemplars?.fields[1].values; // \"Value\" field\n      }\n    }\n\n    return [null, info.heatmap?.fields.map((f) => f.values), [exemplarsXFacet, exemplarsYFacet]];\n  }, [info.heatmap, info.exemplars]);\n\n  const [hover, setHover] = useState<HeatmapHoverEvent | undefined>(undefined);\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const isToolTipOpen = useRef<boolean>(false);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    onhover(null);\n  };\n\n  const onclick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const onhover = useCallback(\n    (evt?: HeatmapHoverEvent | null) => {\n      setHover(evt ?? undefined);\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [options, data.structureRev]\n  );\n\n  // ugh\n  const dataRef = useRef(info);\n  dataRef.current = info;\n  const showNewVizTooltips = Boolean(config.featureToggles.newVizTooltips);\n\n  const builder = useMemo(() => {\n    const scaleConfig: ScaleDistributionConfig = dataRef.current?.heatmap?.fields[1].config?.custom?.scaleDistribution;\n\n    return prepConfig({\n      dataRef,\n      theme,\n      onhover: !showNewVizTooltips ? onhover : null,\n      onclick: !showNewVizTooltips && options.tooltip.mode !== TooltipDisplayMode.None ? onclick : null,\n      isToolTipOpen,\n      timeZone,\n      getTimeRange: () => timeRangeRef.current,\n      sync,\n      cellGap: options.cellGap,\n      hideLE: options.filterValues?.le,\n      hideGE: options.filterValues?.ge,\n      exemplarColor: options.exemplars?.color ?? 'rgba(255,0,255,0.7)',\n      yAxisConfig: options.yAxis,\n      ySizeDivisor: scaleConfig?.type === ScaleDistribution.Log ? +(options.calculation?.yBuckets?.value || 1) : 1,\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, timeZone, data.structureRev]);\n\n  const renderLegend = () => {\n    if (!info.heatmap || !options.legend.show) {\n      return null;\n    }\n\n    let heatmapType = dataRef.current?.heatmap?.meta?.type;\n    let isSparseHeatmap = heatmapType === DataFrameType.HeatmapCells && !isHeatmapCellsDense(dataRef.current?.heatmap!);\n    let countFieldIdx = !isSparseHeatmap ? 2 : 3;\n    const countField = info.heatmap.fields[countFieldIdx];\n\n    let hoverValue: number | undefined = undefined;\n    // seriesIdx: 1 is heatmap layer; 2 is exemplar layer\n    if (hover && info.heatmap.fields && hover.seriesIdx === 1) {\n      hoverValue = countField.values[hover.dataIdx];\n    }\n\n    return (\n      <VizLayout.Legend placement=\"bottom\" maxHeight=\"20%\">\n        <div className={styles.colorScaleWrapper}>\n          <ColorScale\n            hoverValue={hoverValue}\n            colorPalette={palette}\n            min={dataRef.current.heatmapColors?.minValue!}\n            max={dataRef.current.heatmapColors?.maxValue!}\n            display={info.display}\n          />\n        </div>\n      </VizLayout.Legend>\n    );\n  };\n\n  if (info.warning || !info.heatmap) {\n    return (\n      <PanelDataErrorView\n        panelId={id}\n        fieldConfig={fieldConfig}\n        data={data}\n        needsNumberField={true}\n        message={info.warning}\n      />\n    );\n  }\n\n  const enableAnnotationCreation = Boolean(canAddAnnotations && canAddAnnotations());\n\n  return (\n    <>\n      <VizLayout width={width} height={height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets as any} width={vizWidth} height={vizHeight}>\n            <EventBusPlugin config={builder} sync={syncAny} eventBus={eventBus} frame={info.series ?? info.heatmap} />\n            {!showNewVizTooltips && <ZoomPlugin config={builder} onZoom={onChangeTimeRange} />}\n            {showNewVizTooltips && (\n              <>\n                {options.tooltip.mode !== TooltipDisplayMode.None && (\n                  <TooltipPlugin2\n                    config={builder}\n                    hoverMode={TooltipHoverMode.xyOne}\n                    queryZoom={onChangeTimeRange}\n                    syncTooltip={syncTooltip}\n                    render={(u, dataIdxs, seriesIdx, isPinned, dismiss, timeRange2, viaSync) => {\n                      if (enableAnnotationCreation && timeRange2 != null) {\n                        setNewAnnotationRange(timeRange2);\n                        dismiss();\n                        return;\n                      }\n\n                      const annotate = () => {\n                        let xVal = u.posToVal(u.cursor.left!, 'x');\n\n                        setNewAnnotationRange({ from: xVal, to: xVal });\n                        dismiss();\n                      };\n\n                      return (\n                        <HeatmapTooltip\n                          mode={viaSync ? TooltipDisplayMode.Multi : options.tooltip.mode}\n                          dataIdxs={dataIdxs}\n                          seriesIdx={seriesIdx}\n                          dataRef={dataRef}\n                          isPinned={isPinned}\n                          dismiss={dismiss}\n                          showHistogram={options.tooltip.yHistogram}\n                          showColorScale={options.tooltip.showColorScale}\n                          panelData={data}\n                          annotate={enableAnnotationCreation ? annotate : undefined}\n                        />\n                      );\n                    }}\n                    maxWidth={options.tooltip.maxWidth}\n                    maxHeight={options.tooltip.maxHeight}\n                  />\n                )}\n                <AnnotationsPlugin2\n                  annotations={data.annotations ?? []}\n                  config={builder}\n                  timeZone={timeZone}\n                  newRange={newAnnotationRange}\n                  setNewRange={setNewAnnotationRange}\n                  canvasRegionRendering={false}\n                />\n              </>\n            )}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      {!showNewVizTooltips && (\n        <>\n          <Portal>\n            {hover && options.tooltip.mode !== TooltipDisplayMode.None && (\n              <VizTooltipContainer\n                position={{ x: hover.pageX, y: hover.pageY }}\n                offset={{ x: 10, y: 10 }}\n                allowPointerEvents={isToolTipOpen.current}\n              >\n                {shouldDisplayCloseButton && <ExemplarModalHeader onClick={onCloseToolTip} />}\n                <HeatmapHoverView\n                  timeRange={timeRange}\n                  data={info}\n                  hover={hover}\n                  showHistogram={options.tooltip.yHistogram}\n                  replaceVars={replaceVariables}\n                />\n              </VizTooltipContainer>\n            )}\n          </Portal>\n        </>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  colorScaleWrapper: css({\n    marginLeft: '25px',\n    padding: '10px 0',\n    maxWidth: '300px',\n  }),\n});\n","import { FieldConfigSource, PanelModel, PanelTypeChangedHandler } from '@grafana/data';\nimport {\n  AxisPlacement,\n  ScaleDistribution,\n  VisibilityMode,\n  HeatmapCellLayout,\n  HeatmapCalculationMode,\n  HeatmapCalculationOptions,\n} from '@grafana/schema';\nimport { TooltipDisplayMode } from '@grafana/ui';\n\nimport { colorSchemes } from './palettes';\nimport { Options, defaultOptions, HeatmapColorMode } from './types';\n\n/** Called when the version number changes */\nexport const heatmapMigrationHandler = (panel: PanelModel): Partial<Options> => {\n  // Migrating from angular\n  if (Object.keys(panel.options ?? {}).length === 0) {\n    return heatmapChangedHandler(panel, 'heatmap', { angular: panel }, panel.fieldConfig);\n  }\n\n  // multi tooltip mode in 10.3+\n  let showTooltip = panel.options?.tooltip?.show;\n  if (showTooltip !== undefined) {\n    if (showTooltip === true) {\n      panel.options.tooltip.mode = TooltipDisplayMode.Single;\n    } else if (showTooltip === false) {\n      panel.options.tooltip.mode = TooltipDisplayMode.None;\n    }\n\n    // Remove old tooltip option\n    delete panel.options.tooltip?.show;\n  }\n\n  return panel.options;\n};\n\n/**\n * This is called when the panel changes from another panel\n */\nexport const heatmapChangedHandler: PanelTypeChangedHandler = (panel, prevPluginId, prevOptions, prevFieldConfig) => {\n  if (prevPluginId === 'heatmap' && prevOptions.angular) {\n    const { fieldConfig, options } = angularToReactHeatmap({\n      ...prevOptions.angular,\n      fieldConfig: prevFieldConfig,\n    });\n    panel.fieldConfig = fieldConfig; // Mutates the incoming panel\n    return options;\n  }\n  // alpha for 8.5+, then beta at 9.0.1\n  if (prevPluginId === 'heatmap-new') {\n    const { bucketFrame, ...options } = panel.options;\n    if (bucketFrame) {\n      return { ...options, rowsFrame: bucketFrame };\n    }\n    return panel.options;\n  }\n  return {};\n};\n\nexport function angularToReactHeatmap(angular: any): { fieldConfig: FieldConfigSource; options: Options } {\n  const fieldConfig: FieldConfigSource = {\n    defaults: {},\n    overrides: [],\n  };\n\n  const calculate = angular.dataFormat === 'tsbuckets' ? false : true;\n  const calculation: HeatmapCalculationOptions = {\n    ...defaultOptions.calculation,\n  };\n\n  const oldYAxis = { logBase: 1, ...angular.yAxis };\n\n  if (calculate) {\n    if (angular.xBucketSize) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.xBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.xBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.xBucketNumber}` };\n    }\n\n    if (angular.yBucketSize) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Size, value: `${angular.yBucketSize}` };\n    } else if (angular.xBucketNumber) {\n      calculation.yBuckets = { mode: HeatmapCalculationMode.Count, value: `${angular.yBucketNumber}` };\n    }\n\n    if (oldYAxis.logBase > 1) {\n      calculation.yBuckets = {\n        mode: HeatmapCalculationMode.Count,\n        value: +oldYAxis.splitFactor > 0 ? `${oldYAxis.splitFactor}` : undefined,\n        scale: {\n          type: ScaleDistribution.Log,\n          log: oldYAxis.logBase,\n        },\n      };\n    }\n  }\n\n  const cellGap = asNumber(angular.cards?.cardPadding, 2);\n  const options: Options = {\n    calculate,\n    calculation,\n    color: {\n      ...defaultOptions.color,\n      steps: 128, // best match with existing colors\n    },\n    cellGap: cellGap ? cellGap : 1, // default to size 1\n    cellRadius: asNumber(angular.cards?.cardRound), // just to keep it\n    yAxis: {\n      axisPlacement: oldYAxis.show === false ? AxisPlacement.Hidden : AxisPlacement.Left,\n      reverse: Boolean(angular.reverseYBuckets),\n      axisWidth: asNumber(oldYAxis.width),\n      min: oldYAxis.min,\n      max: oldYAxis.max,\n      unit: oldYAxis.format,\n      decimals: oldYAxis.decimals,\n    },\n    cellValues: {\n      decimals: asNumber(angular.tooltipDecimals),\n    },\n    rowsFrame: {\n      layout: getHeatmapCellLayout(angular.yBucketBound),\n    },\n    legend: {\n      show: Boolean(angular.legend?.show),\n    },\n    showValue: VisibilityMode.Never,\n    tooltip: {\n      mode: Boolean(angular.tooltip?.show) ? TooltipDisplayMode.Single : TooltipDisplayMode.None,\n      yHistogram: Boolean(angular.tooltip?.showHistogram),\n    },\n    exemplars: {\n      ...defaultOptions.exemplars,\n    },\n  };\n\n  if (angular.hideZeroBuckets) {\n    options.filterValues = { ...defaultOptions.filterValues }; // min: 1e-9\n  }\n\n  // Migrate color options\n  const color = angular.color ?? {};\n  switch (color?.mode) {\n    case 'spectrum': {\n      options.color.mode = HeatmapColorMode.Scheme;\n\n      const current: string = color.colorScheme;\n      let scheme = colorSchemes.find((v) => v.name === current);\n      if (!scheme) {\n        scheme = colorSchemes.find((v) => current.indexOf(v.name) >= 0);\n      }\n      options.color.scheme = scheme ? scheme.name : defaultOptions.color.scheme;\n      break;\n    }\n    case 'opacity': {\n      options.color.mode = HeatmapColorMode.Opacity;\n      options.color.scale = color.scale;\n      break;\n    }\n  }\n  options.color.fill = color.cardColor;\n  options.color.min = color.min;\n  options.color.max = color.max;\n\n  if (typeof color.min === 'number' && typeof color.max === 'number' && color.min > color.max) {\n    options.color.min = color.max;\n    options.color.max = color.min;\n    options.color.reverse = true;\n  }\n\n  return { fieldConfig, options };\n}\n\nfunction getHeatmapCellLayout(v?: string): HeatmapCellLayout {\n  switch (v) {\n    case 'upper':\n      return HeatmapCellLayout.ge;\n    case 'lower':\n      return HeatmapCellLayout.le;\n    case 'middle':\n      return HeatmapCellLayout.unknown;\n  }\n  return HeatmapCellLayout.auto;\n}\n\nfunction asNumber(v: unknown, defaultValue?: number): number | undefined {\n  if (v == null || v === '') {\n    return defaultValue;\n  }\n  const num = +v;\n  return isNaN(num) ? defaultValue : num;\n}\n","import { VisualizationSuggestionsBuilder } from '@grafana/data';\nimport { config } from '@grafana/runtime';\n\nimport { prepareHeatmapData } from './fields';\nimport { quantizeScheme } from './palettes';\nimport { Options, defaultOptions } from './types';\n\nexport class HeatmapSuggestionsSupplier {\n  getSuggestionsForData(builder: VisualizationSuggestionsBuilder) {\n    const { dataSummary } = builder;\n\n    if (\n      !builder.data?.series ||\n      !dataSummary.hasData ||\n      dataSummary.timeFieldCount < 1 ||\n      dataSummary.numberFieldCount < 2 ||\n      dataSummary.numberFieldCount > 10\n    ) {\n      return;\n    }\n\n    const palette = quantizeScheme(defaultOptions.color, config.theme2);\n    const info = prepareHeatmapData(builder.data.series, undefined, defaultOptions, palette, config.theme2);\n    if (!info || info.warning) {\n      return;\n    }\n\n    builder.getListAppender<Options, {}>({\n      name: '',\n      pluginId: 'heatmap',\n      options: {},\n      fieldConfig: {\n        defaults: {\n          custom: {},\n        },\n        overrides: [],\n      },\n    });\n  }\n}\n","import React from 'react';\n\nimport { FieldConfigProperty, FieldType, identityOverrideProcessor, PanelPlugin } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport {\n  AxisPlacement,\n  GraphFieldConfig,\n  ScaleDistribution,\n  ScaleDistributionConfig,\n  HeatmapCellLayout,\n} from '@grafana/schema';\nimport { TooltipDisplayMode } from '@grafana/ui';\nimport { addHideFrom, ScaleDistributionEditor } from '@grafana/ui/src/options/builder';\nimport { ColorScale } from 'app/core/components/ColorScale/ColorScale';\nimport { addHeatmapCalculationOptions } from 'app/features/transformers/calculateHeatmap/editor/helper';\nimport { readHeatmapRowsCustomMeta } from 'app/features/transformers/calculateHeatmap/heatmap';\n\nimport { HeatmapPanel } from './HeatmapPanel';\nimport { prepareHeatmapData } from './fields';\nimport { heatmapChangedHandler, heatmapMigrationHandler } from './migrations';\nimport { colorSchemes, quantizeScheme } from './palettes';\nimport { HeatmapSuggestionsSupplier } from './suggestions';\nimport { Options, defaultOptions, HeatmapColorMode, HeatmapColorScale } from './types';\n\nexport const plugin = new PanelPlugin<Options, GraphFieldConfig>(HeatmapPanel)\n  .useFieldConfig({\n    disableStandardOptions: Object.values(FieldConfigProperty).filter((v) => v !== FieldConfigProperty.Links),\n    useCustomConfig: (builder) => {\n      builder.addCustomEditor<void, ScaleDistributionConfig>({\n        id: 'scaleDistribution',\n        path: 'scaleDistribution',\n        name: 'Y axis scale',\n        category: ['Heatmap'],\n        editor: ScaleDistributionEditor,\n        override: ScaleDistributionEditor,\n        defaultValue: { type: ScaleDistribution.Linear },\n        shouldApply: (f) => f.type === FieldType.number,\n        process: identityOverrideProcessor,\n        hideFromDefaults: true,\n      });\n      addHideFrom(builder); // for tooltip etc\n    },\n  })\n  .setPanelChangeHandler(heatmapChangedHandler)\n  .setMigrationHandler(heatmapMigrationHandler)\n  .setPanelOptions((builder, context) => {\n    const opts = context.options ?? defaultOptions;\n\n    let isOrdinalY = false;\n\n    if (context.data.length > 0) {\n      try {\n        // NOTE: this feels like overkill/expensive just to assert if we have an ordinal y\n        // can probably simplify without doing full dataprep\n        const palette = quantizeScheme(opts.color, config.theme2);\n        const v = prepareHeatmapData(context.data, undefined, opts, palette, config.theme2);\n        isOrdinalY = readHeatmapRowsCustomMeta(v.heatmap).yOrdinalDisplay != null;\n      } catch {}\n    }\n\n    let category = ['Heatmap'];\n\n    builder.addRadio({\n      path: 'calculate',\n      name: 'Calculate from data',\n      defaultValue: defaultOptions.calculate,\n      category,\n      settings: {\n        options: [\n          { label: 'Yes', value: true },\n          { label: 'No', value: false },\n        ],\n      },\n    });\n\n    if (opts.calculate) {\n      addHeatmapCalculationOptions('calculation.', builder, opts.calculation, category);\n    }\n\n    category = ['Y Axis'];\n\n    builder\n      .addRadio({\n        path: 'yAxis.axisPlacement',\n        name: 'Placement',\n        defaultValue: defaultOptions.yAxis.axisPlacement ?? AxisPlacement.Left,\n        category,\n        settings: {\n          options: [\n            { label: 'Left', value: AxisPlacement.Left },\n            { label: 'Right', value: AxisPlacement.Right },\n            { label: 'Hidden', value: AxisPlacement.Hidden },\n          ],\n        },\n      })\n      .addUnitPicker({\n        category,\n        path: 'yAxis.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'yAxis.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    if (!isOrdinalY) {\n      // if undefined, then show the min+max\n      builder\n        .addNumberInput({\n          path: 'yAxis.min',\n          name: 'Min value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        })\n        .addTextInput({\n          path: 'yAxis.max',\n          name: 'Max value',\n          settings: {\n            placeholder: 'Auto',\n          },\n          category,\n        });\n    }\n\n    builder\n      .addNumberInput({\n        path: 'yAxis.axisWidth',\n        name: 'Axis width',\n        defaultValue: defaultOptions.yAxis.axisWidth,\n        settings: {\n          placeholder: 'Auto',\n          min: 5, // smaller should just be hidden\n        },\n        category,\n      })\n      .addTextInput({\n        path: 'yAxis.axisLabel',\n        name: 'Axis label',\n        defaultValue: defaultOptions.yAxis.axisLabel,\n        settings: {\n          placeholder: 'Auto',\n        },\n        category,\n      });\n\n    if (!opts.calculate) {\n      builder.addRadio({\n        path: 'rowsFrame.layout',\n        name: 'Tick alignment',\n        defaultValue: defaultOptions.rowsFrame?.layout ?? HeatmapCellLayout.auto,\n        category,\n        settings: {\n          options: [\n            { label: 'Auto', value: HeatmapCellLayout.auto },\n            { label: 'Top (LE)', value: HeatmapCellLayout.le },\n            { label: 'Middle', value: HeatmapCellLayout.unknown },\n            { label: 'Bottom (GE)', value: HeatmapCellLayout.ge },\n          ],\n        },\n      });\n    }\n    builder.addBooleanSwitch({\n      path: 'yAxis.reverse',\n      name: 'Reverse',\n      defaultValue: defaultOptions.yAxis.reverse === true,\n      category,\n    });\n\n    category = ['Colors'];\n\n    builder.addRadio({\n      path: `color.mode`,\n      name: 'Mode',\n      defaultValue: defaultOptions.color.mode,\n      category,\n      settings: {\n        options: [\n          { label: 'Scheme', value: HeatmapColorMode.Scheme },\n          { label: 'Opacity', value: HeatmapColorMode.Opacity },\n        ],\n      },\n    });\n\n    builder.addColorPicker({\n      path: `color.fill`,\n      name: 'Color',\n      defaultValue: defaultOptions.color.fill,\n      category,\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addRadio({\n      path: `color.scale`,\n      name: 'Scale',\n      defaultValue: defaultOptions.color.scale,\n      category,\n      settings: {\n        options: [\n          { label: 'Exponential', value: HeatmapColorScale.Exponential },\n          { label: 'Linear', value: HeatmapColorScale.Linear },\n        ],\n      },\n      showIf: (opts) => opts.color.mode === HeatmapColorMode.Opacity,\n    });\n\n    builder.addSliderInput({\n      path: 'color.exponent',\n      name: 'Exponent',\n      defaultValue: defaultOptions.color.exponent,\n      category,\n      settings: {\n        min: 0.1, // 1 for on/off?\n        max: 2,\n        step: 0.1,\n      },\n      showIf: (opts) =>\n        opts.color.mode === HeatmapColorMode.Opacity && opts.color.scale === HeatmapColorScale.Exponential,\n    });\n\n    builder.addSelect({\n      path: `color.scheme`,\n      name: 'Scheme',\n      description: '',\n      defaultValue: defaultOptions.color.scheme,\n      category,\n      settings: {\n        options: colorSchemes.map((scheme) => ({\n          value: scheme.name,\n          label: scheme.name,\n          //description: 'Set a geometry field based on the results of other fields',\n        })),\n      },\n      showIf: (opts) => opts.color.mode !== HeatmapColorMode.Opacity,\n    });\n\n    builder\n      .addSliderInput({\n        path: 'color.steps',\n        name: 'Steps',\n        defaultValue: defaultOptions.color.steps,\n        category,\n        settings: {\n          min: 2,\n          max: 128,\n          step: 1,\n        },\n      })\n      .addBooleanSwitch({\n        path: 'color.reverse',\n        name: 'Reverse',\n        defaultValue: defaultOptions.color.reverse,\n        category,\n      })\n      .addCustomEditor({\n        id: '__scale__',\n        path: `__scale__`,\n        name: '',\n        category,\n        editor: () => {\n          const palette = quantizeScheme(opts.color, config.theme2);\n          return (\n            <div>\n              <ColorScale colorPalette={palette} min={1} max={100} />\n            </div>\n          );\n        },\n      });\n\n    builder\n      .addNumberInput({\n        path: 'color.min',\n        name: 'Start color scale from value',\n        defaultValue: defaultOptions.color.min,\n        settings: {\n          placeholder: 'Auto (min)',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'color.max',\n        name: 'End color scale at value',\n        defaultValue: defaultOptions.color.max,\n        settings: {\n          placeholder: 'Auto (max)',\n        },\n        category,\n      });\n\n    category = ['Cell display'];\n\n    if (!opts.calculate) {\n      builder.addTextInput({\n        path: 'rowsFrame.value',\n        name: 'Value name',\n        defaultValue: defaultOptions.rowsFrame?.value,\n        settings: {\n          placeholder: 'Value',\n        },\n        category,\n      });\n    }\n\n    builder\n      .addUnitPicker({\n        category,\n        path: 'cellValues.unit',\n        name: 'Unit',\n        defaultValue: undefined,\n        settings: {\n          isClearable: true,\n        },\n      })\n      .addNumberInput({\n        category,\n        path: 'cellValues.decimals',\n        name: 'Decimals',\n        settings: {\n          placeholder: 'Auto',\n        },\n      });\n\n    builder\n      // .addRadio({\n      //   path: 'showValue',\n      //   name: 'Show values',\n      //   defaultValue: defaultOptions.showValue,\n      //   category,\n      //   settings: {\n      //     options: [\n      //       { value: VisibilityMode.Auto, label: 'Auto' },\n      //       { value: VisibilityMode.Always, label: 'Always' },\n      //       { value: VisibilityMode.Never, label: 'Never' },\n      //     ],\n      //   },\n      // })\n      .addSliderInput({\n        name: 'Cell gap',\n        path: 'cellGap',\n        defaultValue: defaultOptions.cellGap,\n        category,\n        settings: {\n          min: 0,\n          max: 25,\n        },\n      })\n      .addNumberInput({\n        path: 'filterValues.le',\n        name: 'Hide cells with values <=',\n        defaultValue: defaultOptions.filterValues?.le,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      })\n      .addNumberInput({\n        path: 'filterValues.ge',\n        name: 'Hide cells with values >=',\n        defaultValue: defaultOptions.filterValues?.ge,\n        settings: {\n          placeholder: 'None',\n        },\n        category,\n      });\n    // .addSliderInput({\n    //   name: 'Cell radius',\n    //   path: 'cellRadius',\n    //   defaultValue: defaultOptions.cellRadius,\n    //   category,\n    //   settings: {\n    //     min: 0,\n    //     max: 100,\n    //   },\n    // })\n\n    category = ['Tooltip'];\n\n    builder.addRadio({\n      path: 'tooltip.mode',\n      name: 'Tooltip mode',\n      category,\n      defaultValue: TooltipDisplayMode.Single,\n      settings: {\n        options: [\n          { value: TooltipDisplayMode.Single, label: 'Single' },\n          { value: TooltipDisplayMode.Multi, label: 'All' },\n          { value: TooltipDisplayMode.None, label: 'Hidden' },\n        ],\n      },\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.yHistogram',\n      name: 'Show histogram (Y axis)',\n      defaultValue: defaultOptions.tooltip.yHistogram,\n      category,\n      showIf: (opts) => opts.tooltip.mode === TooltipDisplayMode.Single,\n    });\n\n    builder.addBooleanSwitch({\n      path: 'tooltip.showColorScale',\n      name: 'Show color scale',\n      defaultValue: defaultOptions.tooltip.showColorScale,\n      category,\n      showIf: (opts) => opts.tooltip.mode === TooltipDisplayMode.Single && config.featureToggles.newVizTooltips,\n    });\n\n    builder.addNumberInput({\n      path: 'tooltip.maxWidth',\n      name: 'Max width',\n      category,\n      settings: {\n        integer: true,\n      },\n      showIf: (options) => false, // config.featureToggles.newVizTooltips && options.tooltip?.mode !== TooltipDisplayMode.None,\n    });\n\n    builder.addNumberInput({\n      path: 'tooltip.maxHeight',\n      name: 'Max height',\n      category,\n      defaultValue: 600,\n      settings: {\n        integer: true,\n      },\n      showIf: (options) => false, // config.featureToggles.newVizTooltips && options.tooltip?.mode !== TooltipDisplayMode.None,\n    });\n\n    category = ['Legend'];\n    builder.addBooleanSwitch({\n      path: 'legend.show',\n      name: 'Show legend',\n      defaultValue: defaultOptions.legend.show,\n      category,\n    });\n\n    category = ['Exemplars'];\n    builder.addColorPicker({\n      path: 'exemplars.color',\n      name: 'Color',\n      defaultValue: defaultOptions.exemplars.color,\n      category,\n    });\n  })\n  .setSuggestionsSupplier(new HeatmapSuggestionsSupplier())\n  .setDataSupport({ annotations: true });\n"],"names":["GRADIENT_STOPS","ColorScale","colorPalette","min","max","display","hoverValue","useStopsPercentage","colors","setColors","scaleHover","setScaleHover","percent","setPercent","theme","styles","getStyles","getGradientStops","onScaleMouseMove","event","divOffset","offsetWidth","normPercentage","scaleValue","onScaleMouseLeave","clampPercent100","colorArray","stops","colorCount","incr","per","color","gradientEnd","skip","gradientStops","i","v","renderHistogram","can","histCanWidth","histCanHeight","xVals","countVals","index","yBucketCount","histCtx","fromIdx","toIdx","maxCount","c","pHov","pRest","j","pctY","pctX","p","xCoord","width","HeatmapHoverView","props","DataHoverView","HeatmapHoverCell","data","hover","showHistogram","isSparse","xField","yField","countField","xDisp","yVals","meta","yDisp","yValueIdx","xValueIdx","yBucketMin","yBucketMax","nonNumericOrdinalDisplay","yMinIdx","yMaxIdx","value","exp","xBucketMin","xBucketMax","count","links","linksField","visible","hasLinks","histCssWidth","histCssHeight","renderYBucket","link","getHoverCellColor","colorIndex","cellColor","conversions","noPluralize","formatMilliseconds","milliseconds","unit","unitString","getFieldFromData","fieldType","field","name","getSparseCellMinMax","fields","xMax","f","yMin","yMax","interval","HeatmapTooltip","dataIdxs","dataRef","isPinned","showColorScale","mode","annotate","contentItems","getYValueIndex","idx","getData","getDisplayData","vals","getCountValue","label","getContentLabels","isMulti","fromToInt","xVal","val","footer","VizTooltipFooter","headerItem","customContent","VizTooltipHeader","VizTooltipContent","content","prepConfig","opts","onhover","onclick","isToolTipOpen","timeZone","getTimeRange","cellGap","hideLE","hideGE","yAxisConfig","ySizeDivisor","sync","eventsScope","xScaleKey","isTime","pxRatio","heatmapType","exemplarFillColor","qt","hRect","builder","UPlotConfigBuilder","rect","u","el","e","xMin","r","pendingOnleave","sel","left","top","s","dataMin","dataMax","offset","incrs","yScale","yAxisReverse","isSparseHeatmap","shouldUseLogScale","isOrdinalY","yScaleKey","bucketFactor","scaleMin","scaleMax","yExp","log","explicitMin","explicitMax","minLog","maxLog","minExpanded","maxExpanded","bucketSize","dispY","decimals","self","splits","pathBuilder","heatmapPathsSparse","heatmapPathsDense","seriesIdx","dataIdx","x","y","xSize","ySize","heatmapPathsPoints","cursor","cx","cy","o","isHovered","CRISP_EDGES_GAP_MIN","disp","each","gap","xAlign","yAlign","round","series","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","arc","d","xs","ys","counts","dlen","fills","fillPalette","fillPaths","yBinQty","xBinQty","yBinIncr","xBinIncr","xOffset","yOffset","cys","cxs","fillPath","exemplarColor","yLayout","points","yShift","yVal","w","h","xMaxs","yMins","yMaxs","xOffs","yOffs","xSizeUniform","xMaxPx","yMinPx","yMaxPx","boundedMinMax","values","minValue","maxValue","valuesToFills","palette","range","paletteSize","indexedFills","prepareHeatmapData","frames","annotations","options","replaceVariables","exemplars","config","optionsCopy","getDenseHeatmapData","rowsHeatmap","frame","getSparseHeatmapData","numberFields","a","b","updateFieldDisplay","valueField","xName","yName","calcX","calcY","colorSchemes","DEFAULT_SCHEME","scheme","quantizeScheme","steps","fill","tinycolor","scale","fnName","interpolate","rgbStr","rgb","HeatmapPanel","id","timeRange","height","fieldConfig","eventBus","onChangeTimeRange","canAddAnnotations","syncTooltip","syncAny","newAnnotationRange","setNewAnnotationRange","timeRangeRef","info","ex","facets","exemplarsXFacet","exemplarsYFacet","setHover","shouldDisplayCloseButton","setShouldDisplayCloseButton","onCloseToolTip","evt","showNewVizTooltips","scaleConfig","renderLegend","countFieldIdx","VizLayout","PanelDataErrorView","enableAnnotationCreation","vizWidth","vizHeight","EventBusPlugin","ZoomPlugin","TooltipPlugin2","dismiss","timeRange2","viaSync","AnnotationsPlugin2","Portal","VizTooltipContainer","ExemplarModalHeader","heatmapMigrationHandler","panel","heatmapChangedHandler","showTooltip","prevPluginId","prevOptions","prevFieldConfig","angularToReactHeatmap","bucketFrame","angular","calculate","calculation","oldYAxis","asNumber","getHeatmapCellLayout","current","defaultValue","num","HeatmapSuggestionsSupplier","dataSummary","PanelPlugin","context","category"],"sourceRoot":""}