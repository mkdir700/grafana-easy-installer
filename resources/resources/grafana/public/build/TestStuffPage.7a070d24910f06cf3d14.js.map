{"version":3,"file":"TestStuffPage.7a070d24910f06cf3d14.js","mappings":"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","sources":["webpack://grafana/./public/app/features/sandbox/TestStuffPage.tsx"],"sourcesContent":["import React, { useMemo, useState } from 'react';\nimport { useObservable } from 'react-use';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport {\n  ApplyFieldOverrideOptions,\n  DataConfigSource,\n  dateMath,\n  FieldColorModeId,\n  NavModelItem,\n  PanelData,\n} from '@grafana/data';\nimport { getPluginExtensions, isPluginExtensionLink } from '@grafana/runtime';\nimport { Button, HorizontalGroup, LinkButton, Table } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { config } from 'app/core/config';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { QueryGroupOptions } from 'app/types';\n\nimport { PanelRenderer } from '../panel/components/PanelRenderer';\nimport { QueryGroup } from '../query/components/QueryGroup';\nimport { PanelQueryRunner } from '../query/state/PanelQueryRunner';\n\ninterface State {\n  queryRunner: PanelQueryRunner;\n  queryOptions: QueryGroupOptions;\n  data?: PanelData;\n}\n\nexport const TestStuffPage = () => {\n  const [state, setState] = useState<State>(getDefaultState());\n  const { queryOptions, queryRunner } = state;\n\n  const onRunQueries = () => {\n    const timeRange = { from: 'now-1h', to: 'now' };\n\n    queryRunner.run({\n      queries: queryOptions.queries,\n      datasource: queryOptions.dataSource,\n      timezone: 'browser',\n      timeRange: { from: dateMath.parse(timeRange.from)!, to: dateMath.parse(timeRange.to)!, raw: timeRange },\n      maxDataPoints: queryOptions.maxDataPoints ?? 100,\n      minInterval: queryOptions.minInterval,\n    });\n  };\n\n  const onOptionsChange = (queryOptions: QueryGroupOptions) => {\n    setState({ ...state, queryOptions });\n  };\n\n  /**\n   * Subscribe to data\n   */\n  const observable = useMemo(() => queryRunner.getData({ withFieldConfig: true, withTransforms: true }), [queryRunner]);\n  const data = useObservable(observable);\n\n  const node: NavModelItem = {\n    id: 'test-page',\n    text: 'Test page',\n    icon: 'dashboard',\n    subTitle: 'FOR TESTING!',\n    url: 'sandbox/test',\n  };\n\n  const notifyApp = useAppNotification();\n\n  return (\n    <Page navModel={{ node: node, main: node }}>\n      <Page.Contents>\n        <HorizontalGroup>\n          <LinkToBasicApp extensionPointId=\"grafana/sandbox/testing\" />\n        </HorizontalGroup>\n        {data && (\n          <AutoSizer style={{ width: '100%', height: '600px' }}>\n            {({ width }) => {\n              return (\n                <div>\n                  <PanelRenderer\n                    title=\"Hello\"\n                    pluginId=\"timeseries\"\n                    width={width}\n                    height={300}\n                    data={data}\n                    options={{}}\n                    fieldConfig={{ defaults: {}, overrides: [] }}\n                    timeZone=\"browser\"\n                  />\n                  <Table data={data.series[0]} width={width} height={300} />\n                </div>\n              );\n            }}\n          </AutoSizer>\n        )}\n        <div style={{ marginTop: '16px', height: '45%' }}>\n          <QueryGroup\n            options={queryOptions}\n            queryRunner={queryRunner}\n            onRunQueries={onRunQueries}\n            onOptionsChange={onOptionsChange}\n          />\n        </div>\n        <div style={{ display: 'flex', gap: '1em' }}>\n          <Button onClick={() => notifyApp.success('Success toast', 'some more text goes here')} variant=\"primary\">\n            Success\n          </Button>\n          <Button\n            onClick={() => notifyApp.warning('Warning toast', 'some more text goes here', 'bogus-trace-99999')}\n            variant=\"secondary\"\n          >\n            Warning\n          </Button>\n          <Button\n            onClick={() => notifyApp.error('Error toast', 'some more text goes here', 'bogus-trace-fdsfdfsfds')}\n            variant=\"destructive\"\n          >\n            Error\n          </Button>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport function getDefaultState(): State {\n  const options: ApplyFieldOverrideOptions = {\n    fieldConfig: {\n      defaults: {\n        color: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n      overrides: [],\n    },\n    replaceVariables: (v: string) => v,\n    theme: config.theme2,\n  };\n\n  const dataConfig: DataConfigSource = {\n    getTransformations: () => [],\n    getFieldOverrideOptions: () => options,\n    getDataSupport: () => ({ annotations: false, alertStates: false }),\n  };\n\n  return {\n    queryRunner: new PanelQueryRunner(dataConfig),\n    queryOptions: {\n      queries: [],\n      dataSource: {\n        name: 'gdev-testdata',\n      },\n      maxDataPoints: 100,\n    },\n  };\n}\n\nfunction LinkToBasicApp({ extensionPointId }: { extensionPointId: string }) {\n  const { extensions } = getPluginExtensions({ extensionPointId });\n\n  if (extensions.length === 0) {\n    return null;\n  }\n\n  return (\n    <div>\n      {extensions.map((extension, i) => {\n        if (!isPluginExtensionLink(extension)) {\n          return null;\n        }\n        return (\n          <LinkButton href={extension.path} title={extension.description} key={extension.id}>\n            {extension.title}\n          </LinkButton>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default TestStuffPage;\n"],"names":["TestStuffPage","state","setState","getDefaultState","queryOptions","queryRunner","onRunQueries","timeRange","onOptionsChange","observable","data","node","notifyApp","LinkToBasicApp","width","options","v","dataConfig","extensionPointId","extensions","extension","i"],"sourceRoot":""}