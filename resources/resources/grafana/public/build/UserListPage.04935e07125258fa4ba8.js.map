{"version":3,"file":"UserListPage.04935e07125258fa4ba8.js","mappings":"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","sources":["webpack://grafana/./public/app/features/admin/Users/OrgUnits.tsx","webpack://grafana/./public/app/features/admin/Users/UsersTable.tsx","webpack://grafana/./public/app/features/admin/UserListAdminPage.tsx","webpack://grafana/./public/app/features/admin/Users/AnonUsersTable.tsx","webpack://grafana/./public/app/features/admin/UserListAnonymousPage.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/DashboardsListModalButton.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/DeleteUserModalButton.tsx","webpack://grafana/./public/app/features/admin/UserListPublicDashboardPage/UserListPublicDashboardPage.tsx","webpack://grafana/./public/app/features/admin/UserListPage.tsx","webpack://grafana/./public/app/features/admin/Users/OrgUsersTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/EmptyArea.tsx","webpack://grafana/./public/app/features/invites/InviteeRow.tsx","webpack://grafana/./public/app/features/invites/InviteesTable.tsx","webpack://grafana/./public/app/features/invites/state/selectors.ts","webpack://grafana/./public/app/features/users/state/actions.ts","webpack://grafana/./public/app/features/users/state/selectors.ts","webpack://grafana/./public/app/features/users/UsersActionBar.tsx","webpack://grafana/./public/app/features/users/UsersListPage.tsx"],"sourcesContent":["import React, { forwardRef, PropsWithChildren } from 'react';\n\nimport { IconName } from '@grafana/data';\nimport { Icon, Tooltip, Box, Stack } from '@grafana/ui';\nimport { Unit } from 'app/types';\n\ntype OrgUnitProps = { units?: Unit[]; icon: IconName };\n\nexport const OrgUnits = ({ units, icon }: OrgUnitProps) => {\n  if (!units?.length) {\n    return null;\n  }\n\n  return units.length > 1 ? (\n    <Tooltip\n      placement={'top'}\n      content={<Stack direction={'column'}>{units?.map((unit) => <span key={unit.name}>{unit.name}</span>)}</Stack>}\n    >\n      <Content icon={icon}>{units.length}</Content>\n    </Tooltip>\n  ) : (\n    <Content icon={icon}>{units[0].name}</Content>\n  );\n};\n\ninterface ContentProps extends PropsWithChildren {\n  icon: IconName;\n}\n\nexport const Content = forwardRef<HTMLElement, ContentProps>(({ children, icon }, ref) => {\n  return (\n    <Box ref={ref} display={'flex'} alignItems={'center'} marginRight={1}>\n      <Icon name={icon} /> <Box marginLeft={1}>{children}</Box>\n    </Box>\n  );\n});\n\nContent.displayName = 'TooltipContent';\n","import React, { useMemo } from 'react';\nimport { UseTableRowProps } from 'react-table';\n\nimport {\n  Avatar,\n  CellProps,\n  Column,\n  FetchDataFunc,\n  Icon,\n  InteractiveTable,\n  Pagination,\n  Stack,\n  Tag,\n  Text,\n  Tooltip,\n} from '@grafana/ui';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { UserDTO } from 'app/types';\n\nimport { OrgUnits } from './OrgUnits';\n\ntype Cell<T extends keyof UserDTO = keyof UserDTO> = CellProps<UserDTO, UserDTO[T]>;\n\ninterface UsersTableProps {\n  users: UserDTO[];\n  showPaging?: boolean;\n  totalPages: number;\n  onChangePage: (page: number) => void;\n  currentPage: number;\n  fetchData?: FetchDataFunc<UserDTO>;\n}\n\nexport const UsersTable = ({\n  users,\n  showPaging,\n  totalPages,\n  onChangePage,\n  currentPage,\n  fetchData,\n}: UsersTableProps) => {\n  const showLicensedRole = useMemo(() => users.some((user) => user.licensedRole), [users]);\n  const showBelongsTo = useMemo(() => users.some((user) => user.orgs), [users]);\n  const columns: Array<Column<UserDTO>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt={'User avatar'} />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      ...(showBelongsTo\n        ? [\n            {\n              id: 'orgs',\n              header: 'Belongs to',\n              cell: ({ cell: { value, row } }: Cell<'orgs'>) => {\n                return (\n                  <Stack alignItems={'center'}>\n                    <OrgUnits units={value} icon={'building'} />\n                    {row.original.isAdmin && (\n                      <Tooltip placement=\"top\" content=\"Grafana Admin\">\n                        <Icon name=\"shield\" />\n                      </Tooltip>\n                    )}\n                  </Stack>\n                );\n              },\n              sortType: (a: UseTableRowProps<UserDTO>, b: UseTableRowProps<UserDTO>) =>\n                (a.original.orgs?.length || 0) - (b.original.orgs?.length || 0),\n            },\n          ]\n        : []),\n      ...(showLicensedRole\n        ? [\n            {\n              id: 'licensedRole',\n              header: 'Licensed role',\n              cell: ({ cell: { value } }: Cell<'licensedRole'>) => {\n                return value === 'None' ? (\n                  <Text color={'disabled'}>\n                    Not assigned{' '}\n                    <Tooltip placement=\"top\" content=\"A licensed role will be assigned when this user signs in\">\n                      <Icon name=\"question-circle\" />\n                    </Tooltip>\n                  </Text>\n                ) : (\n                  value\n                );\n              },\n              // Needs the assertion here, the types are not inferred correctly due to the  conditional assignment\n              sortType: 'string' as const,\n            },\n          ]\n        : []),\n      {\n        id: 'lastSeenAtAge',\n        header: 'Last active',\n        headerTooltip: {\n          content: 'Time since user was seen using Grafana',\n          iconName: 'question-circle',\n        },\n        cell: ({ cell: { value } }: Cell<'lastSeenAtAge'>) => {\n          return <>{value && <>{value === '10 years' ? <Text color={'disabled'}>Never</Text> : value}</>}</>;\n        },\n        sortType: (a, b) => new Date(a.original.lastSeenAt!).getTime() - new Date(b.original.lastSeenAt!).getTime(),\n      },\n      {\n        id: 'authLabels',\n        header: 'Origin',\n        cell: ({ cell: { value } }: Cell<'authLabels'>) => (\n          <>{Array.isArray(value) && value.length > 0 && <TagBadge label={value[0]} removeIcon={false} count={0} />}</>\n        ),\n      },\n      {\n        id: 'isDisabled',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'isDisabled'>) => <>{value && <Tag colorIndex={9} name={'Disabled'} />}</>,\n      },\n      {\n        id: 'edit',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return (\n            <a href={`admin/users/edit/${original.id}`} aria-label={`Edit team ${original.name}`}>\n              <Tooltip content={'Edit user'}>\n                <Icon name={'pen'} />\n              </Tooltip>\n            </a>\n          );\n        },\n      },\n    ],\n    [showLicensedRole, showBelongsTo]\n  );\n  return (\n    <Stack direction={'column'} gap={2}>\n      <InteractiveTable columns={columns} data={users} getRowId={(user) => String(user.id)} fetchData={fetchData} />\n      {showPaging && (\n        <Stack justifyContent={'flex-end'}>\n          <Pagination numberOfPages={totalPages} currentPage={currentPage} onNavigate={onChangePage} />\n        </Stack>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { ComponentType, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { LinkButton, RadioButtonGroup, useStyles2, FilterInput, EmptyState } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { t } from 'app/core/internationalization';\n\nimport { AccessControlAction, StoreState, UserFilter } from '../../types';\n\nimport { UsersTable } from './Users/UsersTable';\nimport { changeFilter, changePage, changeQuery, changeSort, fetchUsers } from './state/actions';\n\nexport interface FilterProps {\n  filters: UserFilter[];\n  onChange: (filter: UserFilter) => void;\n  className?: string;\n}\nconst extraFilters: Array<ComponentType<FilterProps>> = [];\nexport const addExtraFilters = (filter: ComponentType<FilterProps>) => {\n  extraFilters.push(filter);\n};\n\nconst selectors = e2eSelectors.pages.UserListPage.UserListAdminPage;\n\nconst mapDispatchToProps = {\n  fetchUsers,\n  changeQuery,\n  changePage,\n  changeFilter,\n  changeSort,\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  users: state.userListAdmin.users,\n  query: state.userListAdmin.query,\n  showPaging: state.userListAdmin.showPaging,\n  totalPages: state.userListAdmin.totalPages,\n  page: state.userListAdmin.page,\n  filters: state.userListAdmin.filters,\n  isLoading: state.userListAdmin.isLoading,\n});\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst UserListAdminPageUnConnected = ({\n  fetchUsers,\n  query,\n  changeQuery,\n  users,\n  showPaging,\n  changeFilter,\n  filters,\n  totalPages,\n  page,\n  changePage,\n  changeSort,\n  isLoading,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [fetchUsers]);\n\n  return (\n    <Page.Contents>\n      <div className={styles.actionBar} data-testid={selectors.container}>\n        <div className={styles.row}>\n          <FilterInput\n            placeholder=\"Search user by login, email, or name.\"\n            autoFocus={true}\n            value={query}\n            onChange={changeQuery}\n          />\n          <RadioButtonGroup\n            options={[\n              { label: 'All users', value: false },\n              { label: 'Active last 30 days', value: true },\n            ]}\n            onChange={(value) => changeFilter({ name: 'activeLast30Days', value })}\n            value={filters.find((f) => f.name === 'activeLast30Days')?.value}\n            className={styles.filter}\n          />\n          {extraFilters.map((FilterComponent, index) => (\n            <FilterComponent key={index} filters={filters} onChange={changeFilter} className={styles.filter} />\n          ))}\n          {contextSrv.hasPermission(AccessControlAction.UsersCreate) && (\n            <LinkButton href=\"admin/users/create\" variant=\"primary\">\n              New user\n            </LinkButton>\n          )}\n        </div>\n      </div>\n      {!isLoading && users.length === 0 ? (\n        <EmptyState message={t('users.empty-state.message', 'No users found')} variant=\"not-found\" />\n      ) : (\n        <UsersTable\n          users={users}\n          showPaging={showPaging}\n          totalPages={totalPages}\n          onChangePage={changePage}\n          currentPage={page}\n          fetchData={changeSort}\n        />\n      )}\n    </Page.Contents>\n  );\n};\n\nexport const UserListAdminPageContent = connector(UserListAdminPageUnConnected);\n\nexport function UserListAdminPage() {\n  return (\n    <Page navId=\"global-users\">\n      <UserListAdminPageContent />\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    filter: css({\n      margin: theme.spacing(0, 1),\n      [theme.breakpoints.down('sm')]: {\n        margin: 0,\n      },\n    }),\n    actionBar: css({\n      marginBottom: theme.spacing(2),\n      display: 'flex',\n      alignItems: 'flex-start',\n      gap: theme.spacing(2),\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n      },\n    }),\n    row: css({\n      display: 'flex',\n      alignItems: 'flex-start',\n      textAlign: 'left',\n      marginBottom: theme.spacing(0.5),\n      flexGrow: 1,\n\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n        gap: theme.spacing(2),\n        width: '100%',\n      },\n    }),\n  };\n};\n\nexport default UserListAdminPage;\n","import React, { useMemo } from 'react';\n\nimport {\n  Avatar,\n  CellProps,\n  Column,\n  InteractiveTable,\n  Stack,\n  Badge,\n  Tooltip,\n  Pagination,\n  FetchDataFunc,\n} from '@grafana/ui';\nimport { EmptyArea } from 'app/features/alerting/unified/components/EmptyArea';\nimport { UserAnonymousDeviceDTO } from 'app/types';\n\ntype Cell<T extends keyof UserAnonymousDeviceDTO = keyof UserAnonymousDeviceDTO> = CellProps<\n  UserAnonymousDeviceDTO,\n  UserAnonymousDeviceDTO[T]\n>;\n\n// A helper function to parse the user agent string and extract parts\nconst parseUserAgent = (userAgent: string) => {\n  // If the user agent string doesn't contain a space, it's probably just the browser name\n  // or some other entity that are accessing grafana\n  if (!userAgent.includes(' ')) {\n    return {\n      browser: userAgent,\n      computer: '',\n    };\n  }\n  const parts = userAgent.split(' ');\n  return {\n    browser: parts[0],\n    computer: parts[1],\n  };\n};\n\n// A helper function to truncate each part of the user agent\nconst truncatePart = (part: string, maxLength: number) => {\n  return part.length > maxLength ? part.substring(0, maxLength) + '...' : part;\n};\n\ninterface UserAgentCellProps {\n  value: string;\n}\n\nconst UserAgentCell = ({ value }: UserAgentCellProps) => {\n  const parts = parseUserAgent(value);\n  return (\n    <Tooltip theme=\"info-alt\" content={value} placement=\"top-end\" interactive={true}>\n      <span>\n        {truncatePart(parts.browser, 10)}\n        {truncatePart(parts.computer, 10)}\n      </span>\n    </Tooltip>\n  );\n};\n\ninterface AnonUsersTableProps {\n  devices: UserAnonymousDeviceDTO[];\n  // for pagination\n  showPaging?: boolean;\n  totalPages: number;\n  onChangePage: (page: number) => void;\n  currentPage: number;\n  fetchData?: FetchDataFunc<UserAnonymousDeviceDTO>;\n}\n\nexport const AnonUsersDevicesTable = ({\n  devices,\n  showPaging,\n  totalPages,\n  onChangePage,\n  currentPage,\n  fetchData,\n}: AnonUsersTableProps) => {\n  const columns: Array<Column<UserAnonymousDeviceDTO>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt={'User avatar'} />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => 'Anonymous',\n      },\n      {\n        id: 'userAgent',\n        header: 'User Agent',\n        cell: ({ cell: { value } }: Cell<'userAgent'>) => <UserAgentCell value={value} />,\n        sortType: 'string',\n      },\n      {\n        id: 'updatedAt',\n        header: 'Last active',\n        cell: ({ cell: { value } }: Cell<'updatedAt'>) => value,\n        sortType: (a, b) => new Date(a.original.updatedAt).getTime() - new Date(b.original.updatedAt).getTime(),\n      },\n      {\n        id: 'clientIp',\n        header: 'Origin IP (address)',\n        cell: ({ cell: { value } }: Cell<'clientIp'>) => value && <Badge text={value} color=\"orange\" />,\n      },\n    ],\n    []\n  );\n  return (\n    <Stack direction={'column'} gap={2}>\n      <InteractiveTable columns={columns} data={devices} getRowId={(user) => user.deviceId} fetchData={fetchData} />\n      {showPaging && (\n        <Stack justifyContent={'flex-end'}>\n          <Pagination numberOfPages={totalPages} currentPage={currentPage} onNavigate={onChangePage} />\n        </Stack>\n      )}\n      {devices.length === 0 && (\n        <EmptyArea>\n          <span>No anonymous users found.</span>\n        </EmptyArea>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { RadioButtonGroup, useStyles2, FilterInput } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { StoreState } from '../../types';\n\nimport { AnonUsersDevicesTable } from './Users/AnonUsersTable';\nimport { fetchUsersAnonymousDevices, changeAnonUserSort, changeAnonPage, changeAnonQuery } from './state/actions';\n\nconst mapDispatchToProps = {\n  fetchUsersAnonymousDevices,\n  changeAnonUserSort,\n  changeAnonPage,\n  changeAnonQuery,\n};\n\nconst mapStateToProps = (state: StoreState) => ({\n  devices: state.userListAnonymousDevices.devices,\n  query: state.userListAnonymousDevices.query,\n  showPaging: state.userListAnonymousDevices.showPaging,\n  totalPages: state.userListAnonymousDevices.totalPages,\n  page: state.userListAnonymousDevices.page,\n  filters: state.userListAnonymousDevices.filters,\n});\n\nconst selectors = e2eSelectors.pages.UserListPage.UserListAdminPage;\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface OwnProps {}\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nconst UserListAnonymousDevicesPageUnConnected = ({\n  devices,\n  fetchUsersAnonymousDevices,\n  query,\n  changeAnonQuery,\n  filters,\n  showPaging,\n  totalPages,\n  page,\n  changeAnonPage,\n  changeAnonUserSort,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    fetchUsersAnonymousDevices();\n  }, [fetchUsersAnonymousDevices]);\n\n  return (\n    <Page.Contents>\n      <div className={styles.actionBar} data-testid={selectors.container}>\n        <div className={styles.row}>\n          <FilterInput\n            placeholder=\"Search devices by ip adress.\"\n            autoFocus={true}\n            value={query}\n            onChange={changeAnonQuery}\n          />\n          <RadioButtonGroup\n            options={[{ label: 'Active last 30 days', value: true }]}\n            // onChange={(value) => changeFilter({ name: 'activeLast30Days', value })}\n            value={filters.find((f) => f.name === 'activeLast30Days')?.value}\n            className={styles.filter}\n          />\n        </div>\n      </div>\n      <AnonUsersDevicesTable\n        devices={devices}\n        showPaging={showPaging}\n        totalPages={totalPages}\n        onChangePage={changeAnonPage}\n        currentPage={page}\n        fetchData={changeAnonUserSort}\n      />\n    </Page.Contents>\n  );\n};\n\nexport const UserListAnonymousDevicesPageContent = connector(UserListAnonymousDevicesPageUnConnected);\n\nexport function UserListAnonymousDevicesPage() {\n  return (\n    <Page navId=\"anonymous-users\">\n      <UserListAnonymousDevicesPageContent />\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    filter: css({\n      margin: theme.spacing(0, 1),\n      [theme.breakpoints.down('sm')]: {\n        margin: 0,\n      },\n    }),\n    actionBar: css({\n      marginBottom: theme.spacing(2),\n      display: 'flex',\n      alignItems: 'flex-start',\n      gap: theme.spacing(2),\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n      },\n    }),\n    row: css({\n      display: 'flex',\n      alignItems: 'flex-start',\n      textAlign: 'left',\n      marginBottom: theme.spacing(0.5),\n      flexGrow: 1,\n\n      [theme.breakpoints.down('sm')]: {\n        flexWrap: 'wrap',\n        gap: theme.spacing(2),\n        width: '100%',\n      },\n    }),\n  };\n};\n\nexport default UserListAnonymousDevicesPage;\n","import { css, cx } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { Button, LoadingPlaceholder, Modal, ModalsController, useStyles2 } from '@grafana/ui/src';\nimport { Trans, t } from 'app/core/internationalization';\nimport {\n  generatePublicDashboardConfigUrl,\n  generatePublicDashboardUrl,\n} from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { useGetActiveUserDashboardsQuery } from '../../dashboard/api/publicDashboardApi';\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPublicDashboardsPage.DashboardsListModal;\nexport const DashboardsListModal = ({ email, onDismiss }: { email: string; onDismiss: () => void }) => {\n  const styles = useStyles2(getStyles);\n\n  const { data: dashboards, isLoading } = useGetActiveUserDashboardsQuery(email);\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen\n      title={t('public-dashboard-users-access-list.modal.dashboard-modal-title', 'Public dashboards')}\n      onDismiss={onDismiss}\n    >\n      {isLoading ? (\n        <div className={styles.loading}>\n          <LoadingPlaceholder\n            text={t('public-dashboard-users-access-list.dashboard-modal.loading-text', 'Loading...')}\n          />\n        </div>\n      ) : (\n        dashboards?.map((dash) => (\n          <div key={dash.dashboardUid} className={styles.listItem} data-testid={selectors.listItem(dash.dashboardUid)}>\n            <p className={styles.dashboardTitle}>{dash.dashboardTitle}</p>\n            <div className={styles.urlsContainer}>\n              <a\n                rel=\"noreferrer\"\n                target=\"_blank\"\n                className={cx('external-link', styles.url)}\n                href={generatePublicDashboardUrl(dash.publicDashboardAccessToken)}\n                onClick={onDismiss}\n              >\n                <Trans i18nKey=\"public-dashboard-users-access-list.dashboard-modal.public-dashboard-link\">\n                  Public dashboard URL\n                </Trans>\n              </a>\n              <span className={styles.urlsDivider}>•</span>\n              <a\n                className={cx('external-link', styles.url)}\n                href={generatePublicDashboardConfigUrl(dash.dashboardUid, dash.slug)}\n                onClick={onDismiss}\n              >\n                <Trans i18nKey=\"public-dashboard-users-access-list.dashboard-modal.public-dashboard-setting\">\n                  Public dashboard settings\n                </Trans>\n              </a>\n            </div>\n            <hr className={styles.divider} />\n          </div>\n        ))\n      )}\n    </Modal>\n  );\n};\n\nexport const DashboardsListModalButton = ({ email }: { email: string }) => {\n  const translatedDashboardListModalButtonText = t(\n    'public-dashboard-users-access-list.dashboard-modal.open-dashboard-list-text',\n    'Open dashboards list'\n  );\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          icon=\"question-circle\"\n          title={translatedDashboardListModalButtonText}\n          aria-label={translatedDashboardListModalButtonText}\n          onClick={() => showModal(DashboardsListModal, { email, onDismiss: hideModal })}\n        />\n      )}\n    </ModalsController>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 590px;\n  `,\n  loading: css`\n    display: flex;\n    justify-content: center;\n  `,\n  listItem: css`\n    display: flex;\n    flex-direction: column;\n    gap: ${theme.spacing(0.5)};\n  `,\n  divider: css`\n    margin: ${theme.spacing(1.5, 0)};\n    color: ${theme.colors.text.secondary};\n  `,\n  urlsContainer: css`\n    display: flex;\n    gap: ${theme.spacing(0.5)};\n\n    ${theme.breakpoints.down('sm')} {\n      flex-direction: column;\n    }\n  `,\n  urlsDivider: css`\n    color: ${theme.colors.text.secondary};\n    ${theme.breakpoints.down('sm')} {\n      display: none;\n    }\n  `,\n  dashboardTitle: css`\n    font-size: ${theme.typography.body.fontSize};\n    font-weight: ${theme.typography.fontWeightBold};\n    margin-bottom: 0;\n  `,\n  url: css`\n    font-size: ${theme.typography.body.fontSize};\n  `,\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data/src';\nimport { Button, Modal, ModalsController, useStyles2 } from '@grafana/ui/src';\nimport { Trans, t } from 'app/core/internationalization';\nimport { SessionUser } from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { useRevokeAllAccessMutation } from '../../dashboard/api/publicDashboardApi';\n\nconst DeleteUserModal = ({ user, hideModal }: { user: SessionUser; hideModal: () => void }) => {\n  const [revokeAllAccess] = useRevokeAllAccessMutation();\n  const styles = useStyles2(getStyles);\n\n  const onRevokeAccessClick = () => {\n    revokeAllAccess({ email: user.email });\n    hideModal();\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen\n      title={t('public-dashboard-users-access-list.delete-user-modal.revoke-access-title', 'Revoke access')}\n      onDismiss={hideModal}\n    >\n      <p className={styles.description}>\n        <Trans i18nKey=\"public-dashboard-users-access-list.delete-user-modal.revoke-user-access-modal-desc-line1\">\n          Are you sure you want to revoke access for {{ email: user.email }}?\n        </Trans>\n      </p>\n      <p className={styles.description}>\n        <Trans\n          i18nKey=\"public-dashboard-users-access-list.delete-user-modal.revoke-user-access-modal-desc-line2\"\n          shouldUnescape\n        >\n          This action will immediately revoke {{ email: user.email }}&apos;s access to all public dashboards.\n        </Trans>\n      </p>\n      <Modal.ButtonRow>\n        <Button type=\"button\" variant=\"secondary\" onClick={hideModal} fill=\"outline\">\n          <Trans i18nKey=\"public-dashboard-users-access-list.delete-user-modal.delete-user-cancel-button\">Cancel</Trans>\n        </Button>\n        <Button type=\"button\" variant=\"destructive\" onClick={onRevokeAccessClick}>\n          <Trans i18nKey=\"public-dashboard-users-access-list.delete-user-modal.delete-user-revoke-access-button\">\n            Revoke access\n          </Trans>\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n\nexport const DeleteUserModalButton = ({ user }: { user: SessionUser }) => {\n  const translatedDeleteUserText = t(\n    'public-dashboard-users-access-list.delete-user-modal.delete-user-button-text',\n    'Delete user'\n  );\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Button\n          size=\"sm\"\n          variant=\"destructive\"\n          onClick={() => showModal(DeleteUserModal, { user, hideModal })}\n          icon=\"times\"\n          aria-label={translatedDeleteUserText}\n          title={translatedDeleteUserText}\n        />\n      )}\n    </ModalsController>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css`\n    width: 500px;\n  `,\n  description: css`\n    font-size: ${theme.typography.body.fontSize};\n    margin: 0;\n  `,\n});\n","import React from 'react';\n\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { HorizontalGroup, Icon, Tag, Tooltip } from '@grafana/ui/src';\nimport { Page } from 'app/core/components/Page/Page';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGetActiveUsersQuery } from '../../dashboard/api/publicDashboardApi';\n\nimport { DashboardsListModalButton } from './DashboardsListModalButton';\nimport { DeleteUserModalButton } from './DeleteUserModalButton';\n\nconst selectors = e2eSelectors.pages.UserListPage.publicDashboards;\n\nexport const UserListPublicDashboardPage = () => {\n  const { data: users, isLoading } = useGetActiveUsersQuery();\n\n  return (\n    <Page.Contents isLoading={isLoading}>\n      <table className=\"filter-table form-inline\" data-testid={selectors.container}>\n        <thead>\n          <tr>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.email-label\">Email</Trans>\n            </th>\n            <th>\n              <span>\n                <Trans i18nKey=\"public-dashboard-users-access-list.table-header.activated-label\">Activated</Trans>\n              </span>\n              <Tooltip\n                placement=\"top\"\n                content={t(\n                  'public-dashboard-users-access-list.table-header.activated-tooltip',\n                  'Earliest time user has been an active user to a dashboard'\n                )}\n              >\n                <Icon name=\"question-circle\" />\n              </Tooltip>\n            </th>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.last-active-label\">Last active</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.origin-label\">Origin</Trans>\n            </th>\n            <th>\n              <Trans i18nKey=\"public-dashboard-users-access-list.table-header.role-label\">Role</Trans>\n            </th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          {users?.map((user) => (\n            <tr key={user.email}>\n              <td className=\"max-width-10\">\n                <span className=\"ellipsis\" title={user.email}>\n                  {user.email}\n                </span>\n              </td>\n              <td className=\"max-width-10\">{user.firstSeenAtAge}</td>\n              <td className=\"max-width-10\">{user.lastSeenAtAge}</td>\n              <td className=\"max-width-10\">\n                <HorizontalGroup spacing=\"sm\">\n                  <span>{user.totalDashboards} dashboard(s)</span>\n                  <DashboardsListModalButton email={user.email} />\n                </HorizontalGroup>\n              </td>\n              <td className=\"max-width-10\">\n                <Tag name=\"Viewer\" colorIndex={19} />\n              </td>\n              <td className=\"text-right\">\n                <DeleteUserModalButton user={user} />\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </Page.Contents>\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport { config, featureEnabled } from '@grafana/runtime';\nimport { useStyles2, TabsBar, Tab } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { isPublicDashboardsEnabled } from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { Page } from '../../core/components/Page/Page';\nimport { AccessControlAction } from '../../types';\nimport { UsersListPageContent } from '../users/UsersListPage';\n\nimport { UserListAdminPageContent } from './UserListAdminPage';\nimport { UserListAnonymousDevicesPageContent } from './UserListAnonymousPage';\nimport { UserListPublicDashboardPage } from './UserListPublicDashboardPage/UserListPublicDashboardPage';\n\nenum TabView {\n  ADMIN = 'admin',\n  ORG = 'org',\n  PUBLIC_DASHBOARDS = 'public-dashboards',\n  ANON = 'anon',\n}\n\nconst selectors = e2eSelectors.pages.UserListPage;\n\nconst PublicDashboardsTab = ({ view, setView }: { view: TabView | null; setView: (v: TabView | null) => void }) => (\n  <Tab\n    label={t('users-access-list.tabs.public-dashboard-users-tab-title', 'Public dashboard users')}\n    active={view === TabView.PUBLIC_DASHBOARDS}\n    onChangeTab={() => setView(TabView.PUBLIC_DASHBOARDS)}\n    data-testid={selectors.tabs.publicDashboardsUsers}\n  />\n);\n\nconst TAB_PAGE_MAP: Record<TabView, React.ReactElement> = {\n  [TabView.ADMIN]: <UserListAdminPageContent />,\n  [TabView.ORG]: <UsersListPageContent />,\n  [TabView.PUBLIC_DASHBOARDS]: <UserListPublicDashboardPage />,\n  [TabView.ANON]: <UserListAnonymousDevicesPageContent />,\n};\n\nexport default function UserListPage() {\n  const styles = useStyles2(getStyles);\n\n  const hasAccessToAdminUsers = contextSrv.hasPermission(AccessControlAction.UsersRead);\n  const hasAccessToOrgUsers = contextSrv.hasPermission(AccessControlAction.OrgUsersRead);\n  const hasEmailSharingEnabled =\n    isPublicDashboardsEnabled() &&\n    Boolean(config.featureToggles.publicDashboardsEmailSharing) &&\n    featureEnabled('publicDashboardsEmailSharing');\n\n  const [view, setView] = useState(() => {\n    if (hasAccessToAdminUsers) {\n      return TabView.ADMIN;\n    } else if (hasAccessToOrgUsers) {\n      return TabView.ORG;\n    }\n    return null;\n  });\n\n  const showAdminAndOrgTabs = hasAccessToOrgUsers && hasAccessToAdminUsers;\n\n  return (\n    <Page navId={'global-users'}>\n      {showAdminAndOrgTabs ? (\n        <TabsBar className={styles.tabsMargin}>\n          <Tab\n            label=\"All users\"\n            active={view === TabView.ADMIN}\n            onChangeTab={() => setView(TabView.ADMIN)}\n            data-testid={selectors.tabs.allUsers}\n          />\n          <Tab\n            label=\"Organization users\"\n            active={view === TabView.ORG}\n            onChangeTab={() => setView(TabView.ORG)}\n            data-testid={selectors.tabs.orgUsers}\n          />\n          {config.anonymousEnabled && (\n            <Tab\n              label=\"Anonymous devices\"\n              active={view === TabView.ANON}\n              onChangeTab={() => setView(TabView.ANON)}\n              data-testid={selectors.tabs.anonUserDevices}\n            />\n          )}\n          {hasEmailSharingEnabled && <PublicDashboardsTab view={view} setView={setView} />}\n        </TabsBar>\n      ) : (\n        hasEmailSharingEnabled && (\n          <TabsBar className={styles.tabsMargin}>\n            <Tab\n              label=\"Users\"\n              active={view === TabView.ORG}\n              onChangeTab={() => setView(TabView.ORG)}\n              data-testid={selectors.tabs.users}\n            />\n            <PublicDashboardsTab view={view} setView={setView} />\n          </TabsBar>\n        )\n      )}\n      {view ? TAB_PAGE_MAP[view] : <UsersListPageContent />}\n    </Page>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  tabsMargin: css({\n    marginBottom: theme.spacing(3),\n  }),\n});\n","import React, { useEffect, useMemo, useState } from 'react';\n\nimport { OrgRole } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors';\nimport {\n  Avatar,\n  Box,\n  Button,\n  CellProps,\n  Column,\n  ConfirmModal,\n  FetchDataFunc,\n  Icon,\n  InteractiveTable,\n  Pagination,\n  Stack,\n  Tag,\n  Text,\n  Tooltip,\n} from '@grafana/ui';\nimport { UserRolePicker } from 'app/core/components/RolePicker/UserRolePicker';\nimport { fetchRoleOptions } from 'app/core/components/RolePicker/api';\nimport { TagBadge } from 'app/core/components/TagFilter/TagBadge';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, OrgUser, Role } from 'app/types';\n\nimport { OrgRolePicker } from '../OrgRolePicker';\n\ntype Cell<T extends keyof OrgUser = keyof OrgUser> = CellProps<OrgUser, OrgUser[T]>;\n\nconst disabledRoleMessage = `This user's role is not editable because it is synchronized from your auth provider.\nRefer to the Grafana authentication docs for details.`;\n\nconst getBasicRoleDisabled = (user: OrgUser) => {\n  const isUserSynced = user?.isExternallySynced;\n  return !contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersWrite, user) || isUserSynced;\n};\n\nconst selectors = e2eSelectors.pages.UserListPage.UsersListPage;\n\nexport interface Props {\n  users: OrgUser[];\n  orgId?: number;\n  onRoleChange: (role: OrgRole, user: OrgUser) => void;\n  onRemoveUser: (user: OrgUser) => void;\n  fetchData?: FetchDataFunc<OrgUser>;\n  changePage: (page: number) => void;\n  page: number;\n  totalPages: number;\n  rolesLoading?: boolean;\n}\n\nexport const OrgUsersTable = ({\n  users,\n  orgId,\n  onRoleChange,\n  onRemoveUser,\n  fetchData,\n  changePage,\n  page,\n  totalPages,\n  rolesLoading,\n}: Props) => {\n  const [userToRemove, setUserToRemove] = useState<OrgUser | null>(null);\n  const [roleOptions, setRoleOptions] = useState<Role[]>([]);\n\n  useEffect(() => {\n    async function fetchOptions() {\n      try {\n        if (contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n          let options = await fetchRoleOptions(orgId);\n          setRoleOptions(options);\n        }\n      } catch (e) {\n        console.error('Error loading options');\n      }\n    }\n    if (contextSrv.licensedAccessControlEnabled()) {\n      fetchOptions();\n    }\n  }, [orgId]);\n\n  const columns: Array<Column<OrgUser>> = useMemo(\n    () => [\n      {\n        id: 'avatarUrl',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'avatarUrl'>) => value && <Avatar src={value} alt=\"User avatar\" />,\n      },\n      {\n        id: 'login',\n        header: 'Login',\n        cell: ({ cell: { value } }: Cell<'login'>) => <div>{value}</div>,\n        sortType: 'string',\n      },\n      {\n        id: 'email',\n        header: 'Email',\n        cell: ({ cell: { value } }: Cell<'email'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'name',\n        header: 'Name',\n        cell: ({ cell: { value } }: Cell<'name'>) => value,\n        sortType: 'string',\n      },\n      {\n        id: 'lastSeenAtAge',\n        header: 'Last active',\n        cell: ({ cell: { value } }: Cell<'lastSeenAtAge'>) => {\n          return <>{value && <>{value === '10 years' ? <Text color={'disabled'}>Never</Text> : value}</>}</>;\n        },\n        sortType: (a, b) => new Date(a.original.lastSeenAt).getTime() - new Date(b.original.lastSeenAt).getTime(),\n      },\n      {\n        id: 'role',\n        header: 'Role',\n        cell: ({ cell: { value }, row: { original } }: Cell<'role'>) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          return contextSrv.licensedAccessControlEnabled() ? (\n            <UserRolePicker\n              userId={original.userId}\n              roles={original.roles || []}\n              isLoading={rolesLoading}\n              orgId={orgId}\n              roleOptions={roleOptions}\n              basicRole={value}\n              onBasicRoleChange={(newRole) => onRoleChange(newRole, original)}\n              basicRoleDisabled={basicRoleDisabled}\n              basicRoleDisabledMessage={disabledRoleMessage}\n              width={40}\n            />\n          ) : (\n            <OrgRolePicker\n              aria-label=\"Role\"\n              value={value}\n              disabled={basicRoleDisabled}\n              onChange={(newRole) => onRoleChange(newRole, original)}\n            />\n          );\n        },\n      },\n      {\n        id: 'info',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          const basicRoleDisabled = getBasicRoleDisabled(original);\n          return (\n            basicRoleDisabled && (\n              <Box display={'flex'} alignItems={'center'} marginLeft={1}>\n                <Tooltip\n                  interactive={true}\n                  content={\n                    <div>\n                      This user&apos;s role is not editable because it is synchronized from your auth provider. Refer to\n                      the&nbsp;\n                      <a\n                        href={\n                          'https://grafana.com/docs/grafana/latest/administration/user-management/manage-org-users/#change-a-users-organization-permissions'\n                        }\n                        rel=\"noreferrer\"\n                        target=\"_blank\"\n                      >\n                        Grafana authentication docs\n                      </a>\n                      &nbsp;for details.\n                    </div>\n                  }\n                >\n                  <Icon name=\"question-circle\" />\n                </Tooltip>\n              </Box>\n            )\n          );\n        },\n      },\n      {\n        id: 'authLabels',\n        header: 'Origin',\n        cell: ({ cell: { value } }: Cell<'authLabels'>) => (\n          <>{Array.isArray(value) && value.length > 0 && <TagBadge label={value[0]} removeIcon={false} count={0} />}</>\n        ),\n      },\n      {\n        id: 'isDisabled',\n        header: '',\n        cell: ({ cell: { value } }: Cell<'isDisabled'>) => <>{value && <Tag colorIndex={9} name={'Disabled'} />}</>,\n      },\n      {\n        id: 'delete',\n        header: '',\n        cell: ({ row: { original } }: Cell) => {\n          return (\n            contextSrv.hasPermissionInMetadata(AccessControlAction.OrgUsersRemove, original) && (\n              <Button\n                size=\"sm\"\n                variant=\"destructive\"\n                onClick={() => {\n                  setUserToRemove(original);\n                }}\n                icon=\"times\"\n                aria-label={`Delete user ${original.name}`}\n              />\n            )\n          );\n        },\n      },\n    ],\n    [rolesLoading, orgId, roleOptions, onRoleChange]\n  );\n\n  return (\n    <Stack direction={'column'} gap={2} data-testid={selectors.container}>\n      <InteractiveTable columns={columns} data={users} getRowId={(user) => String(user.userId)} fetchData={fetchData} />\n      <Stack justifyContent=\"flex-end\">\n        <Pagination onNavigate={changePage} currentPage={page} numberOfPages={totalPages} hideWhenSinglePage={true} />\n      </Stack>\n      {Boolean(userToRemove) && (\n        <ConfirmModal\n          body={`Are you sure you want to delete user ${userToRemove?.login}?`}\n          confirmText=\"Delete\"\n          title=\"Delete\"\n          onDismiss={() => {\n            setUserToRemove(null);\n          }}\n          isOpen={true}\n          onConfirm={() => {\n            if (!userToRemove) {\n              return;\n            }\n            onRemoveUser(userToRemove);\n            setUserToRemove(null);\n          }}\n        />\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport const EmptyArea = ({ children }: React.PropsWithChildren<{}>) => {\n  const styles = useStyles2(getStyles);\n\n  return <div className={styles.container}>{children}</div>;\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n      background-color: ${theme.colors.background.secondary};\n      color: ${theme.colors.text.secondary};\n      padding: ${theme.spacing(4)};\n      text-align: center;\n    `,\n  };\n};\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Button, ClipboardButton } from '@grafana/ui';\nimport { Invitee } from 'app/types';\n\nimport { revokeInvite } from './state/actions';\n\nconst mapDispatchToProps = {\n  revokeInvite,\n};\n\nconst connector = connect(null, mapDispatchToProps);\n\ninterface OwnProps {\n  invitee: Invitee;\n}\n\nexport type Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass InviteeRow extends PureComponent<Props> {\n  render() {\n    const { invitee, revokeInvite } = this.props;\n    return (\n      <tr>\n        <td>{invitee.email}</td>\n        <td>{invitee.name}</td>\n        <td className=\"text-right\">\n          <ClipboardButton icon=\"copy\" variant=\"secondary\" size=\"sm\" getText={() => invitee.url}>\n            Copy Invite\n          </ClipboardButton>\n          &nbsp;\n        </td>\n        <td>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            icon=\"times\"\n            onClick={() => revokeInvite(invitee.code)}\n            aria-label=\"Revoke Invite\"\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nexport default connector(InviteeRow);\n","import React, { PureComponent } from 'react';\n\nimport { Invitee } from 'app/types';\n\nimport InviteeRow from './InviteeRow';\n\nexport interface Props {\n  invitees: Invitee[];\n}\n\nexport default class InviteesTable extends PureComponent<Props> {\n  render() {\n    const { invitees } = this.props;\n\n    return (\n      <table className=\"filter-table form-inline\">\n        <thead>\n          <tr>\n            <th>Email</th>\n            <th>Name</th>\n            <th />\n            <th style={{ width: '34px' }} />\n          </tr>\n        </thead>\n        <tbody data-testid=\"InviteesTable-body\">\n          {invitees.map((invitee, index) => {\n            return <InviteeRow key={`${invitee.id}-${index}`} invitee={invitee} />;\n          })}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import { EntityState, createSelector } from '@reduxjs/toolkit';\n\nimport { Invitee } from 'app/types';\n\nimport { selectors } from './reducers';\n\nexport const { selectAll, selectById, selectTotal } = selectors;\n\nconst selectQuery = (_state: EntityState<Invitee>, query: string) => query;\nexport const selectInvitesMatchingQuery = createSelector([selectAll, selectQuery], (invites, searchQuery) => {\n  const regex = new RegExp(searchQuery, 'i');\n  const matches = invites.filter((invite) => regex.test(invite.name) || regex.test(invite.email));\n  return matches;\n});\n","import { debounce } from 'lodash';\n\nimport { getBackendSrv } from '@grafana/runtime';\nimport { FetchDataArgs } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\nimport { OrgUser } from 'app/types';\n\nimport { AccessControlAction, ThunkResult } from '../../../types';\n\nimport {\n  usersLoaded,\n  pageChanged,\n  usersFetchBegin,\n  usersFetchEnd,\n  searchQueryChanged,\n  sortChanged,\n  rolesFetchBegin,\n  rolesFetchEnd,\n} from './reducers';\n\nexport function loadUsers(): ThunkResult<void> {\n  return async (dispatch, getState) => {\n    try {\n      dispatch(usersFetchBegin());\n      const { perPage, page, searchQuery, sort } = getState().users;\n      const users = await getBackendSrv().get(\n        `/api/org/users/search`,\n        accessControlQueryParam({ perpage: perPage, page, query: searchQuery, sort })\n      );\n\n      if (\n        contextSrv.licensedAccessControlEnabled() &&\n        contextSrv.hasPermission(AccessControlAction.ActionUserRolesList)\n      ) {\n        dispatch(rolesFetchBegin());\n        const orgId = contextSrv.user.orgId;\n        const userIds = users?.orgUsers.map((u: OrgUser) => u.userId);\n        const roles = await getBackendSrv().post(`/api/access-control/users/roles/search`, { userIds, orgId });\n        users.orgUsers.forEach((u: OrgUser) => {\n          u.roles = roles ? roles[u.userId] || [] : [];\n        });\n        dispatch(rolesFetchEnd());\n      }\n      dispatch(usersLoaded(users));\n    } catch (error) {\n      usersFetchEnd();\n    }\n  };\n}\n\nconst fetchUsersWithDebounce = debounce((dispatch) => dispatch(loadUsers()), 300);\n\nexport function updateUser(user: OrgUser): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().patch(`/api/org/users/${user.userId}`, { role: user.role });\n    dispatch(loadUsers());\n  };\n}\n\nexport function removeUser(userId: number): ThunkResult<void> {\n  return async (dispatch) => {\n    await getBackendSrv().delete(`/api/org/users/${userId}`);\n    dispatch(loadUsers());\n  };\n}\n\nexport function changePage(page: number): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(pageChanged(page));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSort({ sortBy }: FetchDataArgs<OrgUser>): ThunkResult<void> {\n  const sort = sortBy.length ? `${sortBy[0].id}-${sortBy[0].desc ? 'desc' : 'asc'}` : undefined;\n  return async (dispatch) => {\n    dispatch(sortChanged(sort));\n    dispatch(loadUsers());\n  };\n}\n\nexport function changeSearchQuery(query: string): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(searchQueryChanged(query));\n    fetchUsersWithDebounce(dispatch);\n  };\n}\n","import { UsersState } from 'app/types';\n\nexport const getUsers = (state: UsersState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  return state.users.filter((user) => {\n    return regex.test(user.login) || regex.test(user.email) || regex.test(user.name);\n  });\n};\n\nexport const getUsersSearchQuery = (state: UsersState) => state.searchQuery;\n","import React from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { RadioButtonGroup, LinkButton, FilterInput, InlineField } from '@grafana/ui';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, StoreState } from 'app/types';\n\nimport { selectTotal } from '../invites/state/selectors';\n\nimport { changeSearchQuery } from './state/actions';\nimport { getUsersSearchQuery } from './state/selectors';\n\nexport interface OwnProps {\n  showInvites: boolean;\n  onShowInvites: () => void;\n}\n\nfunction mapStateToProps(state: StoreState) {\n  return {\n    searchQuery: getUsersSearchQuery(state.users),\n    pendingInvitesCount: selectTotal(state.invites),\n    externalUserMngLinkName: state.users.externalUserMngLinkName,\n    externalUserMngLinkUrl: state.users.externalUserMngLinkUrl,\n  };\n}\n\nconst mapDispatchToProps = {\n  changeSearchQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const UsersActionBarUnconnected = ({\n  externalUserMngLinkName,\n  externalUserMngLinkUrl,\n  searchQuery,\n  pendingInvitesCount,\n  changeSearchQuery,\n  onShowInvites,\n  showInvites,\n}: Props): JSX.Element => {\n  const options = [\n    { label: 'Users', value: 'users' },\n    { label: `Pending Invites (${pendingInvitesCount})`, value: 'invites' },\n  ];\n  const canAddToOrg: boolean = contextSrv.hasPermission(AccessControlAction.OrgUsersAdd);\n  // Show invite button in the following cases:\n  // 1) the instance is not a hosted Grafana instance (!config.externalUserMngInfo)\n  // 2) new basic auth users can be created for this instance (!config.disableLoginForm).\n  const showInviteButton: boolean = canAddToOrg && !(config.disableLoginForm && config.externalUserMngInfo);\n\n  return (\n    <div className=\"page-action-bar\" data-testid=\"users-action-bar\">\n      <InlineField grow>\n        <FilterInput\n          value={searchQuery}\n          onChange={changeSearchQuery}\n          placeholder=\"Search user by login, email or name\"\n        />\n      </InlineField>\n      {pendingInvitesCount > 0 && (\n        <div style={{ marginLeft: '1rem' }}>\n          <RadioButtonGroup value={showInvites ? 'invites' : 'users'} options={options} onChange={onShowInvites} />\n        </div>\n      )}\n      {showInviteButton && <LinkButton href=\"org/users/invite\">Invite</LinkButton>}\n      {externalUserMngLinkUrl && (\n        <LinkButton href={externalUserMngLinkUrl} target=\"_blank\" rel=\"noopener\">\n          {externalUserMngLinkName}\n        </LinkButton>\n      )}\n    </div>\n  );\n};\n\nexport const UsersActionBar = connector(UsersActionBarUnconnected);\n","import React, { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { renderMarkdown } from '@grafana/data';\nimport { Page } from 'app/core/components/Page/Page';\nimport { contextSrv } from 'app/core/core';\nimport { OrgUser, OrgRole, StoreState } from 'app/types';\n\nimport { OrgUsersTable } from '../admin/Users/OrgUsersTable';\nimport InviteesTable from '../invites/InviteesTable';\nimport { fetchInvitees } from '../invites/state/actions';\nimport { selectInvitesMatchingQuery } from '../invites/state/selectors';\n\nimport { UsersActionBar } from './UsersActionBar';\nimport { loadUsers, removeUser, updateUser, changePage, changeSort } from './state/actions';\nimport { getUsers, getUsersSearchQuery } from './state/selectors';\n\nfunction mapStateToProps(state: StoreState) {\n  const searchQuery = getUsersSearchQuery(state.users);\n  return {\n    users: getUsers(state.users),\n    searchQuery: getUsersSearchQuery(state.users),\n    page: state.users.page,\n    totalPages: state.users.totalPages,\n    perPage: state.users.perPage,\n    invitees: selectInvitesMatchingQuery(state.invites, searchQuery),\n    externalUserMngInfo: state.users.externalUserMngInfo,\n    isLoading: state.users.isLoading,\n    rolesLoading: state.users.rolesLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  changeSort,\n  updateUser,\n  removeUser,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport interface State {\n  showInvites: boolean;\n}\n\nexport const UsersListPageUnconnected = ({\n  users,\n  page,\n  totalPages,\n  invitees,\n  externalUserMngInfo,\n  isLoading,\n  rolesLoading,\n  loadUsers,\n  fetchInvitees,\n  changePage,\n  updateUser,\n  removeUser,\n  changeSort,\n}: Props) => {\n  const [showInvites, setShowInvites] = useState(false);\n  const externalUserMngInfoHtml = externalUserMngInfo ? renderMarkdown(externalUserMngInfo) : '';\n\n  useEffect(() => {\n    loadUsers();\n    fetchInvitees();\n  }, [fetchInvitees, loadUsers]);\n\n  const onRoleChange = (role: OrgRole, user: OrgUser) => {\n    updateUser({ ...user, role: role });\n  };\n\n  const onRemoveUser = (user: OrgUser) => removeUser(user.userId);\n\n  const onShowInvites = () => {\n    setShowInvites(!showInvites);\n  };\n\n  const renderTable = () => {\n    if (showInvites) {\n      return <InviteesTable invitees={invitees} />;\n    } else {\n      return (\n        <OrgUsersTable\n          users={users}\n          orgId={contextSrv.user.orgId}\n          rolesLoading={rolesLoading}\n          onRoleChange={onRoleChange}\n          onRemoveUser={onRemoveUser}\n          fetchData={changeSort}\n          changePage={changePage}\n          page={page}\n          totalPages={totalPages}\n        />\n      );\n    }\n  };\n\n  return (\n    <Page.Contents isLoading={!isLoading}>\n      <UsersActionBar onShowInvites={onShowInvites} showInvites={showInvites} />\n      {externalUserMngInfoHtml && (\n        <div className=\"grafana-info-box\" dangerouslySetInnerHTML={{ __html: externalUserMngInfoHtml }} />\n      )}\n      {isLoading && renderTable()}\n    </Page.Contents>\n  );\n};\n\nexport const UsersListPageContent = connector(UsersListPageUnconnected);\n\nexport default function UsersListPage() {\n  return (\n    <Page navId=\"users\">\n      <UsersListPageContent />\n    </Page>\n  );\n}\n"],"names":["OrgUnits","units","icon","Tooltip","Stack","unit","Content","children","ref","Box","Icon","UsersTable","users","showPaging","totalPages","onChangePage","currentPage","fetchData","showLicensedRole","user","showBelongsTo","columns","value","Avatar","row","a","b","Text","TagBadge","Tag","original","InteractiveTable","Pagination","extraFilters","addExtraFilters","filter","mapDispatchToProps","mapStateToProps","state","UserListAdminPageContent","fetchUsers","query","changeQuery","changeFilter","filters","page","changePage","changeSort","isLoading","styles","getStyles","FilterInput","RadioButtonGroup","f","FilterComponent","index","EmptyState","UserListAdminPage","theme","parseUserAgent","userAgent","parts","truncatePart","part","maxLength","UserAgentCell","AnonUsersDevicesTable","devices","Badge","EmptyArea","UserListAnonymousDevicesPageContent","fetchUsersAnonymousDevices","changeAnonQuery","changeAnonPage","changeAnonUserSort","UserListAnonymousDevicesPage","DashboardsListModal","email","onDismiss","dashboards","Modal","LoadingPlaceholder","dash","DashboardsListModalButton","translatedDashboardListModalButtonText","showModal","hideModal","Button","DeleteUserModal","revokeAllAccess","onRevokeAccessClick","DeleteUserModalButton","translatedDeleteUserText","UserListPublicDashboardPage","TabView","PublicDashboardsTab","view","setView","Tab","TAB_PAGE_MAP","UsersListPage","UserListPage","hasAccessToAdminUsers","hasAccessToOrgUsers","hasEmailSharingEnabled","config","showAdminAndOrgTabs","TabsBar","disabledRoleMessage","getBasicRoleDisabled","isUserSynced","selectors","OrgUsersTable","orgId","onRoleChange","onRemoveUser","rolesLoading","userToRemove","setUserToRemove","roleOptions","setRoleOptions","fetchOptions","options","basicRoleDisabled","newRole","connector","InviteeRow","invitee","revokeInvite","ClipboardButton","InviteesTable","invitees","selectAll","selectById","selectTotal","selectQuery","_state","selectInvitesMatchingQuery","invites","searchQuery","regex","invite","loadUsers","dispatch","getState","perPage","sort","accessControl","userIds","u","roles","fetchUsersWithDebounce","updateUser","removeUser","userId","sortBy","changeSearchQuery","getUsers","getUsersSearchQuery","UsersActionBar","externalUserMngLinkName","externalUserMngLinkUrl","pendingInvitesCount","onShowInvites","showInvites","showInviteButton","InlineField","UsersListPageUnconnected","externalUserMngInfo","fetchInvitees","setShowInvites","externalUserMngInfoHtml","role","renderTable","Page","UsersListPageContent"],"sourceRoot":""}