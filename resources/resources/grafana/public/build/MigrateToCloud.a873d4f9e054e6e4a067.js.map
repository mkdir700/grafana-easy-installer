{"version":3,"file":"MigrateToCloud.a873d4f9e054e6e4a067.js","mappings":"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","sources":["webpack://grafana/./public/app/features/migrate-to-cloud/shared/InfoItem.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/InfoPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/DeleteMigrationTokenModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/MigrationTokenModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/TokenStatus.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/MigrationTokenPane/MigrationTokenPane.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/cloud/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/DisconnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/ConnectModal.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/CallToAction/CallToAction.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneLeft.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/InfoPaneRight.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/EmptyState/EmptyState.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/MigrationInfo.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/ResourcesTable.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/onprem/Page.tsx","webpack://grafana/./public/app/features/migrate-to-cloud/MigrateToCloud.tsx"],"sourcesContent":["import React, { ReactNode } from 'react';\n\nimport { Stack, Text, TextLink } from '@grafana/ui';\n\ninterface Props {\n  children: NonNullable<ReactNode>;\n  title: string;\n  linkTitle?: string;\n  linkHref?: string;\n}\n\nexport const InfoItem = ({ children, title, linkHref, linkTitle }: Props) => {\n  return (\n    <Stack gap={2} direction=\"column\">\n      <Text element=\"h4\">{title}</Text>\n      <Text color=\"secondary\">{children}</Text>\n      {linkHref && (\n        <TextLink href={linkHref} external>\n          {linkTitle ?? linkHref}\n        </TextLink>\n      )}\n    </Stack>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Box, Stack, TextLink, useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../shared/InfoItem';\n\nexport const InfoPane = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" padding={2} gap={2} direction=\"column\" backgroundColor=\"secondary\">\n      <InfoItem\n        title={t('migrate-to-cloud.migrate-to-this-stack.title', 'Migrate configuration to this stack')}\n        linkTitle={t('migrate-to-cloud.migrate-to-this-stack.link-title', 'View the full migration guide')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.migrate-to-this-stack.body\">\n          Some configuration from your self-managed Grafana instance can be automatically copied to this cloud stack.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.get-started.title', 'How to get started')}\n        linkTitle={t('migrate-to-cloud.get-started.link-title', 'Learn more about Private Data Source Connect')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Stack direction=\"column\" gap={2}>\n          <Trans i18nKey=\"migrate-to-cloud.get-started.body\">\n            The migration process must be started from your self-managed Grafana instance.\n          </Trans>\n          <ol className={styles.list}>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-1\">\n                Log in to your self-managed instance and navigate to Administration, General, Migrate to Grafana Cloud.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-2\">\n                Select &quot;Migrate this instance to Cloud&quot;.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-3\">\n                You&apos;ll be prompted for a migration token. Generate one from this screen.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-4\">\n                In your self-managed instance, select &quot;Upload everything&quot; to upload data sources and\n                dashboards to this cloud stack.\n              </Trans>\n            </li>\n            <li>\n              <Trans i18nKey=\"migrate-to-cloud.get-started.step-5\">\n                If some of your data sources will not work over the public internet, you’ll need to install Private Data\n                Source Connect in your self-managed environment.\n              </Trans>\n            </li>\n          </ol>\n        </Stack>\n      </InfoItem>\n      <TextLink href=\"/connections/private-data-source-connections\">\n        {t('migrate-to-cloud.get-started.configure-pdc-link', 'Configure PDC for this stack')}\n      </TextLink>\n    </Box>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  list: css({\n    padding: 'revert',\n  }),\n});\n","import React, { useState } from 'react';\n\nimport { Modal, Button, Text } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface Props {\n  hideModal: () => void;\n  onConfirm: () => Promise<{ data: void } | { error: unknown }>;\n}\n\nexport const DeleteMigrationTokenModal = ({ hideModal, onConfirm }: Props) => {\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  const onConfirmDelete = async () => {\n    setIsDeleting(true);\n    await onConfirm();\n    setIsDeleting(false);\n    hideModal();\n  };\n\n  return (\n    <Modal\n      isOpen\n      title={t('migrate-to-cloud.migration-token.delete-modal-title', 'Delete migration token')}\n      onDismiss={hideModal}\n    >\n      <Text color=\"secondary\">\n        <Trans i18nKey=\"migrate-to-cloud.migration-token.delete-modal-body\">\n          If you&apos;ve already used this token with a self-managed installation, that installation will no longer be\n          able to upload content.\n        </Trans>\n      </Text>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={hideModal}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.delete-modal-cancel\">Cancel</Trans>\n        </Button>\n        <Button disabled={isDeleting} variant=\"destructive\" onClick={onConfirmDelete}>\n          {isDeleting\n            ? t('migrate-to-cloud.migration-token.delete-modal-deleting', 'Deleting...')\n            : t('migrate-to-cloud.migration-token.delete-modal-confirm', 'Delete')}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React, { useId } from 'react';\n\nimport { Modal, Button, Input, Stack, ClipboardButton, Field } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\ninterface Props {\n  hideModal: () => void;\n  migrationToken: string;\n}\n\nexport const MigrationTokenModal = ({ hideModal, migrationToken }: Props) => {\n  const inputId = useId();\n\n  return (\n    <Modal\n      isOpen\n      title={t('migrate-to-cloud.migration-token.modal-title', 'Migration token created')}\n      onDismiss={hideModal}\n    >\n      <Field\n        description={t(\n          'migrate-to-cloud.migration-token.modal-field-description',\n          'Copy the token now as you will not be able to see it again. Losing a token requires creating a new one.'\n        )}\n        htmlFor={inputId}\n        label={t('migrate-to-cloud.migration-token.modal-field-label', 'Token')}\n      >\n        <Stack>\n          <Input id={inputId} value={migrationToken} readOnly />\n          <ClipboardButton icon=\"clipboard-alt\" getText={() => migrationToken}>\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-button\">Copy to clipboard</Trans>\n          </ClipboardButton>\n        </Stack>\n      </Field>\n      <Modal.ButtonRow>\n        <Button variant=\"secondary\" onClick={hideModal}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-close\">Close</Trans>\n        </Button>\n        <ClipboardButton variant=\"primary\" getText={() => migrationToken} onClipboardCopy={hideModal}>\n          <Trans i18nKey=\"migrate-to-cloud.migration-token.modal-copy-and-close\">Copy to clipboard and close</Trans>\n        </ClipboardButton>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\ninterface Props {\n  hasToken: boolean;\n  isFetching: boolean;\n}\n\nexport const TokenStatus = ({ hasToken, isFetching }: Props) => {\n  if (isFetching) {\n    return <Skeleton width={100} />;\n  }\n\n  return hasToken ? (\n    <Text color=\"success\">\n      <Trans i18nKey=\"migrate-to-cloud.token-status.active\">Token created and active</Trans>\n    </Text>\n  ) : (\n    <Trans i18nKey=\"migrate-to-cloud.token-status.no-active\">No active token</Trans>\n  );\n};\n","import React from 'react';\n\nimport { Box, Button, ModalsController, Text } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { useCreateMigrationTokenMutation, useDeleteMigrationTokenMutation, useHasMigrationTokenQuery } from '../../api';\nimport { InfoItem } from '../../shared/InfoItem';\n\nimport { DeleteMigrationTokenModal } from './DeleteMigrationTokenModal';\nimport { MigrationTokenModal } from './MigrationTokenModal';\nimport { TokenStatus } from './TokenStatus';\n\nexport const MigrationTokenPane = () => {\n  const { data: hasToken, isFetching } = useHasMigrationTokenQuery();\n  const [createToken, createTokenResponse] = useCreateMigrationTokenMutation();\n  const [deleteToken, deleteTokenResponse] = useDeleteMigrationTokenMutation();\n\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Box display=\"flex\" alignItems=\"flex-start\" padding={2} gap={2} direction=\"column\" backgroundColor=\"secondary\">\n          <InfoItem title={t('migrate-to-cloud.migration-token.title', 'Migration token')}>\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.body\">\n              Your self-managed Grafana instance will require a special authentication token to securely connect to this\n              cloud stack.\n            </Trans>\n          </InfoItem>\n          <Text color=\"secondary\">\n            <Trans i18nKey=\"migrate-to-cloud.migration-token.status\">\n              Current status:{' '}\n              <TokenStatus\n                hasToken={Boolean(hasToken)}\n                isFetching={isFetching || createTokenResponse.isLoading || deleteTokenResponse.isLoading}\n              />\n            </Trans>\n          </Text>\n          {hasToken ? (\n            <Button\n              variant=\"destructive\"\n              onClick={() =>\n                showModal(DeleteMigrationTokenModal, {\n                  hideModal,\n                  onConfirm: deleteToken,\n                })\n              }\n              disabled={isFetching || deleteTokenResponse.isLoading}\n            >\n              <Trans i18nKey=\"migrate-to-cloud.migration-token.delete-button\">Delete this migration token</Trans>\n            </Button>\n          ) : (\n            <Button\n              disabled={createTokenResponse.isLoading || isFetching}\n              onClick={async () => {\n                const response = await createToken();\n                if ('data' in response) {\n                  showModal(MigrationTokenModal, {\n                    hideModal,\n                    migrationToken: response.data.token,\n                  });\n                }\n              }}\n            >\n              {createTokenResponse.isLoading\n                ? t('migrate-to-cloud.migration-token.generate-button-loading', 'Generating a migration token...')\n                : t('migrate-to-cloud.migration-token.generate-button', 'Generate a migration token')}\n            </Button>\n          )}\n        </Box>\n      )}\n    </ModalsController>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Grid, useStyles2 } from '@grafana/ui';\n\nimport { InfoPane } from './InfoPane';\nimport { MigrationTokenPane } from './MigrationTokenPane/MigrationTokenPane';\n\nexport const Page = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <Grid\n        alignItems=\"flex-start\"\n        gap={1}\n        columns={{\n          xs: 1,\n          lg: 2,\n        }}\n      >\n        <InfoPane />\n        <MigrationTokenPane />\n      </Grid>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    maxWidth: theme.breakpoints.values.xl,\n  }),\n});\n","import React, { useCallback } from 'react';\n\nimport { Alert, ConfirmModal, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useDisconnectStackMutation } from '../api';\n\ninterface Props {\n  isOpen: boolean;\n  onDismiss: () => void;\n}\n\nexport const DisconnectModal = ({ isOpen, onDismiss }: Props) => {\n  const [disconnectStack, { isLoading, isError }] = useDisconnectStackMutation();\n\n  const handleConfirm = useCallback(async () => {\n    const resp = await disconnectStack();\n    if (!('error' in resp)) {\n      onDismiss();\n    }\n  }, [disconnectStack, onDismiss]);\n\n  const confirmBody = (\n    <Stack direction=\"column\">\n      {isError && (\n        <Alert\n          severity=\"error\"\n          title={t('migrate-to-cloud.disconnect-modal.error', 'There was an error disconnecting')}\n        />\n      )}\n      <div>\n        <Trans i18nKey=\"migrate-to-cloud.disconnect-modal.body\">\n          This will remove the migration token from this installation. If you wish to upload more resources in the\n          future, you will need to enter a new migration token.\n        </Trans>\n      </div>\n    </Stack>\n  );\n\n  return (\n    <ConfirmModal\n      isOpen={isOpen}\n      title={t('migrate-to-cloud.disconnect-modal.title', 'Disconnect from cloud stack')}\n      body={<></>} // body is mandatory prop, but i don't wanna\n      description={confirmBody}\n      confirmText={\n        isLoading\n          ? t('migrate-to-cloud.disconnect-modal.disconnecting', 'Disconnecting...')\n          : t('migrate-to-cloud.disconnect-modal.disconnect', 'Disconnect')\n      }\n      dismissText={t('migrate-to-cloud.disconnect-modal.cancel', 'Cancel')}\n      onConfirm={handleConfirm}\n      onDismiss={onDismiss}\n    />\n  );\n};\n","import { css } from '@emotion/css';\nimport React, { useId, useState } from 'react';\nimport { SubmitHandler, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Modal, Button, Stack, TextLink, Field, Input, Text, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { ConnectStackDTO } from '../../../api';\n\ninterface Props {\n  hideModal: () => void;\n  onConfirm: (connectStackData: ConnectStackDTO) => Promise<{ data: void } | { error: unknown }>;\n}\n\nexport const ConnectModal = ({ hideModal, onConfirm }: Props) => {\n  const [isConnecting, setIsConnecting] = useState(false);\n  const cloudStackId = useId();\n  const tokenId = useId();\n  const styles = useStyles2(getStyles);\n\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n    watch,\n  } = useForm<ConnectStackDTO>({\n    defaultValues: {\n      stackURL: '',\n      token: '',\n    },\n  });\n\n  const stackURL = watch('stackURL');\n  const token = watch('token');\n\n  const onConfirmConnect: SubmitHandler<ConnectStackDTO> = async (formData) => {\n    setIsConnecting(true);\n    await onConfirm(formData);\n    setIsConnecting(false);\n    hideModal();\n  };\n\n  return (\n    <Modal isOpen title={t('migrate-to-cloud.connect-modal.title', 'Connect to a cloud stack')} onDismiss={hideModal}>\n      <form onSubmit={handleSubmit(onConfirmConnect)}>\n        <Text color=\"secondary\">\n          <Stack direction=\"column\" gap={2} alignItems=\"flex-start\">\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-get-started\">\n              To get started, you&apos;ll need a Grafana.com account.\n            </Trans>\n            <TextLink href=\"https://grafana.com/auth/sign-up/create-user?pg=prod-cloud\" external>\n              {t('migrate-to-cloud.connect-modal.body-sign-up', 'Sign up for a Grafana.com account')}\n            </TextLink>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-cloud-stack\">\n              You&apos;ll also need a cloud stack. If you just signed up, we&apos;ll automatically create your first\n              stack. If you have an account, you&apos;ll need to select or create a stack.\n            </Trans>\n            <TextLink href=\"https://grafana.com/auth/sign-in/\" external>\n              {t('migrate-to-cloud.connect-modal.body-view-stacks', 'View my cloud stacks')}\n            </TextLink>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-paste-stack\">\n              Once you&apos;ve decided on a stack, paste the URL below.\n            </Trans>\n            <Field\n              className={styles.field}\n              invalid={!!errors.stackURL}\n              error={errors.stackURL?.message}\n              label={t('migrate-to-cloud.connect-modal.body-url-field', 'Cloud stack URL')}\n              required\n            >\n              <Input\n                {...register('stackURL', {\n                  required: t('migrate-to-cloud.connect-modal.stack-required-error', 'Stack URL is required'),\n                })}\n                id={cloudStackId}\n                placeholder=\"https://example.grafana.net/\"\n              />\n            </Field>\n            <span>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token\">\n                Your self-managed Grafana installation needs special access to securely migrate content. You&apos;ll\n                need to create a migration token on your chosen cloud stack.\n              </Trans>\n            </span>\n            <span>\n              <Trans i18nKey=\"migrate-to-cloud.connect-modal.body-token-instructions\">\n                Log into your cloud stack and navigate to Administration, General, Migrate to Grafana Cloud. Create a\n                migration token on that screen and paste the token here.\n              </Trans>\n            </span>\n            <Field\n              className={styles.field}\n              invalid={!!errors.token}\n              error={errors.token?.message}\n              label={t('migrate-to-cloud.connect-modal.body-token-field', 'Migration token')}\n              required\n            >\n              <Input\n                {...register('token', {\n                  required: t('migrate-to-cloud.connect-modal.token-required-error', 'Migration token is required'),\n                })}\n                id={tokenId}\n                placeholder={t('migrate-to-cloud.connect-modal.body-token-field-placeholder', 'Paste token here')}\n              />\n            </Field>\n          </Stack>\n        </Text>\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" onClick={hideModal}>\n            <Trans i18nKey=\"migrate-to-cloud.connect-modal.cancel\">Cancel</Trans>\n          </Button>\n          <Button type=\"submit\" disabled={isConnecting || !(stackURL && token)}>\n            {isConnecting\n              ? t('migrate-to-cloud.connect-modal.connecting', 'Connecting to this stack...')\n              : t('migrate-to-cloud.connect-modal.connect', 'Connect to this stack')}\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css({\n    alignSelf: 'stretch',\n  }),\n});\n","import React from 'react';\n\nimport { Box, Button, ModalsController, Text } from '@grafana/ui';\nimport { Trans } from 'app/core/internationalization';\n\nimport { useConnectStackMutation, useGetStatusQuery } from '../../../api';\n\nimport { ConnectModal } from './ConnectModal';\n\nexport const CallToAction = () => {\n  const [connectStack, connectResponse] = useConnectStackMutation();\n  const { isFetching } = useGetStatusQuery();\n\n  return (\n    <ModalsController>\n      {({ showModal, hideModal }) => (\n        <Box display=\"flex\" padding={5} gap={2} direction=\"column\" alignItems=\"center\" backgroundColor=\"secondary\">\n          <Text variant=\"h3\" textAlignment=\"center\">\n            <Trans i18nKey=\"migrate-to-cloud.cta.header\">Let us manage your Grafana stack</Trans>\n          </Text>\n          <Button\n            disabled={isFetching || connectResponse.isLoading}\n            onClick={() =>\n              showModal(ConnectModal, {\n                hideModal,\n                onConfirm: connectStack,\n              })\n            }\n          >\n            <Trans i18nKey=\"migrate-to-cloud.cta.button\">Migrate this instance to Cloud</Trans>\n          </Button>\n        </Box>\n      )}\n    </ModalsController>\n  );\n};\n","import React from 'react';\n\nimport { Box } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneLeft = () => {\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" padding={2} gap={2} direction=\"column\" backgroundColor=\"secondary\">\n      <InfoItem\n        title={t('migrate-to-cloud.what-is-cloud.title', 'What is Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.what-is-cloud.link-title', 'Learn about cloud features')}\n        linkHref=\"https://grafana.com/products/cloud\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.what-is-cloud.body\">\n          Grafana cloud is a fully managed cloud-hosted observability platform ideal for cloud native environments.\n          It&apos;s everything you love about Grafana without the overhead of maintaining, upgrading, and supporting an\n          installation.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.why-host.title', 'Why host with Grafana?')}\n        linkTitle={t('migrate-to-cloud.why-host.link-title', 'More questions? Talk to an expert')}\n        linkHref=\"https://grafana.com/contact\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.why-host.body\">\n          In addition to the convenience of managed hosting, Grafana Cloud includes many cloud-exclusive features like\n          SLOs, incident management, machine learning, and powerful observability integrations.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.is-it-secure.title', 'Is it secure?')}\n        linkTitle={t('migrate-to-cloud.is-it-secure.link-title', 'Grafana Labs Trust Center')}\n        linkHref=\"https://trust.grafana.com\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.is-it-secure.body\">\n          Grafana Labs is committed to maintaining the highest standards of data privacy and security. By implementing\n          industry-standard security technologies and procedures, we help protect our customers&apos; data from\n          unauthorized access, use, or disclosure.\n        </Trans>\n      </InfoItem>\n    </Box>\n  );\n};\n","import React from 'react';\n\nimport { Box } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { InfoItem } from '../../shared/InfoItem';\n\nexport const InfoPaneRight = () => {\n  return (\n    <Box alignItems=\"flex-start\" display=\"flex\" direction=\"column\" gap={2} padding={2} backgroundColor=\"secondary\">\n      <InfoItem\n        title={t('migrate-to-cloud.pdc.title', 'Not all my data sources are on the public internet')}\n        linkTitle={t('migrate-to-cloud.pdc.link-title', 'Learn about PDC')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/connect-externally-hosted/private-data-source-connect\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pdc.body\">\n          Exposing your data sources to the internet can raise security concerns. Private data source connect (PDC)\n          allows Grafana Cloud to access your existing data sources over a secure network tunnel.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.pricing.title', 'How much does it cost?')}\n        linkTitle={t('migrate-to-cloud.pricing.link-title', 'Grafana Cloud pricing')}\n        linkHref=\"https://grafana.com/pricing\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.pricing.body\">\n          Grafana Cloud has a generous free plan and a 14 day unlimited usage trial. After your trial expires,\n          you&apos;ll be billed based on usage over the free plan limits.\n        </Trans>\n      </InfoItem>\n      <InfoItem\n        title={t('migrate-to-cloud.can-i-move.title', 'Can I move this installation to Grafana Cloud?')}\n        linkTitle={t('migrate-to-cloud.can-i-move.link-title', 'Learn about migrating other settings')}\n        linkHref=\"https://grafana.com/docs/grafana-cloud/account-management/migration-guide\"\n      >\n        <Trans i18nKey=\"migrate-to-cloud.can-i-move.body\">\n          Once you connect this installation to a cloud stack, you&apos;ll be able to upload data sources and\n          dashboards.\n        </Trans>\n      </InfoItem>\n    </Box>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Grid, Stack, useStyles2 } from '@grafana/ui';\n\nimport { CallToAction } from './CallToAction/CallToAction';\nimport { InfoPaneLeft } from './InfoPaneLeft';\nimport { InfoPaneRight } from './InfoPaneRight';\n\nexport const EmptyState = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\">\n        <CallToAction />\n        <Grid\n          alignItems=\"flex-start\"\n          gap={1}\n          columns={{\n            xs: 1,\n            lg: 2,\n          }}\n        >\n          <InfoPaneLeft />\n          <InfoPaneRight />\n        </Grid>\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    maxWidth: theme.breakpoints.values.xl,\n  }),\n});\n","import React, { ReactNode } from 'react';\n\nimport { Stack, Text } from '@grafana/ui';\n\ninterface MigrationInfoProps {\n  title: NonNullable<ReactNode>;\n  value: NonNullable<ReactNode>;\n}\n\nexport function MigrationInfo({ title, value }: MigrationInfoProps) {\n  return (\n    <Stack direction=\"column\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        {title}\n      </Text>\n      <Text variant=\"h4\">{value}</Text>\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { InteractiveTable, CellProps, Stack, Text, Icon, useStyles2, Button } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\nimport { t } from 'app/core/internationalization';\n\nimport { MigrationResourceDTO } from '../api';\n\ninterface ResourcesTableProps {\n  resources: MigrationResourceDTO[];\n}\n\nconst columns = [\n  { id: 'name', header: 'Name', cell: NameCell },\n  { id: 'type', header: 'Type', cell: TypeCell },\n  { id: 'status', header: 'Status', cell: StatusCell },\n];\n\nexport function ResourcesTable({ resources }: ResourcesTableProps) {\n  return <InteractiveTable columns={columns} data={resources} getRowId={(r) => r.uid} pageSize={15} />;\n}\n\nfunction NameCell(props: CellProps<MigrationResourceDTO>) {\n  const data = props.row.original;\n  return (\n    <Stack direction=\"row\" gap={2} alignItems=\"center\">\n      <ResourceIcon resource={data} />\n\n      <Stack direction=\"column\" gap={0}>\n        <span>{data.resource.name}</span>\n        <Text color=\"secondary\">{data.resource.type}</Text>\n      </Stack>\n    </Stack>\n  );\n}\n\nfunction TypeCell(props: CellProps<MigrationResourceDTO>) {\n  const { type } = props.row.original;\n\n  if (type === 'datasource') {\n    return t('migrate-to-cloud.resource-type.datasource', 'Data source');\n  }\n\n  if (type === 'dashboard') {\n    return t('migrate-to-cloud.resource-type.dashboard', 'Dashboard');\n  }\n\n  return t('migrate-to-cloud.resource-type.unknown', 'Unknown');\n}\n\nfunction StatusCell(props: CellProps<MigrationResourceDTO>) {\n  const { status, statusMessage } = props.row.original;\n\n  if (status === 'not-migrated') {\n    return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.not-migrated', 'Not yet uploaded')}</Text>;\n  } else if (status === 'migrating') {\n    return <Text color=\"info\">{t('migrate-to-cloud.resource-status.migrating', 'Uploading...')}</Text>;\n  } else if (status === 'migrated') {\n    return <Text color=\"success\">{t('migrate-to-cloud.resource-status.migrated', 'Uploaded to cloud')}</Text>;\n  } else if (status === 'failed') {\n    return (\n      <Stack alignItems=\"center\">\n        <Text color=\"error\">{t('migrate-to-cloud.resource-status.failed', 'Error')}</Text>\n\n        {statusMessage && (\n          // TODO: trigger a proper modal, probably from the parent, on click\n          <Button size=\"sm\" variant=\"secondary\" onClick={() => window.alert(statusMessage)}>\n            {t('migrate-to-cloud.resource-status.error-details-button', 'Details')}\n          </Button>\n        )}\n      </Stack>\n    );\n  }\n\n  return <Text color=\"secondary\">{t('migrate-to-cloud.resource-status.unknown', 'Unknown')}</Text>;\n}\n\nfunction ResourceIcon({ resource }: { resource: MigrationResourceDTO }) {\n  const styles = useStyles2(getIconStyles);\n\n  if (resource.type === 'dashboard') {\n    return <Icon size=\"xl\" name=\"dashboard\" />;\n  }\n\n  if (resource.type === 'datasource' && resource.resource.icon) {\n    return <img className={styles.icon} src={resource.resource.icon} alt=\"\" />;\n  } else if (resource.type === 'datasource') {\n    return <Icon size=\"xl\" name=\"database\" />;\n  }\n\n  return undefined;\n}\n\nfunction getIconStyles() {\n  return {\n    icon: css({\n      display: 'block',\n      width: getSvgSize('xl'),\n      height: getSvgSize('xl'),\n    }),\n  };\n}\n","import { skipToken } from '@reduxjs/toolkit/query/react';\nimport React, { useState } from 'react';\n\nimport { Alert, Box, Button, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGetStatusQuery, useListResourcesQuery, useStartMigrationMutation } from '../api';\n\nimport { DisconnectModal } from './DisconnectModal';\nimport { EmptyState } from './EmptyState/EmptyState';\nimport { MigrationInfo } from './MigrationInfo';\nimport { ResourcesTable } from './ResourcesTable';\n\nexport const Page = () => {\n  const { data: status, isFetching } = useGetStatusQuery();\n  const { data: resources } = useListResourcesQuery(status?.enabled ? undefined : skipToken);\n  const [startMigration, { isLoading: startMigrationIsLoading, isError: startMigrationIsError }] =\n    useStartMigrationMutation();\n  const [isDisconnecting, setIsDisconnecting] = useState(false);\n\n  if (!status?.enabled) {\n    return <EmptyState />;\n  }\n\n  const isBusy = isFetching || isDisconnecting || startMigrationIsLoading;\n\n  return (\n    <>\n      <Stack direction=\"column\" gap={4}>\n        {startMigrationIsError && (\n          <Alert\n            severity=\"error\"\n            title={t(\n              'migrate-to-cloud.summary.error-starting-migration',\n              'There was an error starting cloud migration'\n            )}\n          />\n        )}\n\n        {status.stackURL && (\n          <Box\n            borderColor=\"weak\"\n            borderStyle=\"solid\"\n            padding={2}\n            display=\"flex\"\n            gap={4}\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <MigrationInfo\n              title={t('migrate-to-cloud.summary.target-stack-title', 'Uploading to')}\n              value={\n                <>\n                  {status.stackURL}{' '}\n                  <Button onClick={() => setIsDisconnecting(true)} disabled={isBusy} variant=\"secondary\" size=\"sm\">\n                    <Trans i18nKey=\"migrate-to-cloud.summary.disconnect\">Disconnect</Trans>\n                  </Button>\n                </>\n              }\n            />\n\n            <Button\n              disabled={isBusy}\n              onClick={() => startMigration()}\n              icon={startMigrationIsLoading ? 'spinner' : undefined}\n            >\n              <Trans i18nKey=\"migrate-to-cloud.summary.start-migration\">Upload everything</Trans>\n            </Button>\n          </Box>\n        )}\n\n        {resources && <ResourcesTable resources={resources} />}\n      </Stack>\n\n      <DisconnectModal isOpen={isDisconnecting} onDismiss={() => setIsDisconnecting(false)} />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { Page as CloudPage } from './cloud/Page';\nimport { Page as OnPremPage } from './onprem/Page';\n\nexport default function MigrateToCloud() {\n  return <Page navId=\"migrate-to-cloud\">{config.cloudMigrationIsTarget ? <CloudPage /> : <OnPremPage />}</Page>;\n}\n"],"names":["InfoItem","children","title","linkHref","linkTitle","Stack","Text","TextLink","InfoPane","styles","getStyles","Box","theme","DeleteMigrationTokenModal","hideModal","onConfirm","isDeleting","setIsDeleting","onConfirmDelete","Modal","Button","MigrationTokenModal","migrationToken","inputId","Field","Input","ClipboardButton","TokenStatus","hasToken","isFetching","MigrationTokenPane","createToken","createTokenResponse","deleteToken","deleteTokenResponse","showModal","response","Grid","DisconnectModal","isOpen","onDismiss","disconnectStack","isLoading","isError","handleConfirm","confirmBody","Alert","ConfirmModal","ConnectModal","isConnecting","setIsConnecting","cloudStackId","tokenId","handleSubmit","register","errors","watch","stackURL","token","onConfirmConnect","formData","CallToAction","connectStack","connectResponse","InfoPaneLeft","InfoPaneRight","EmptyState","MigrationInfo","value","columns","NameCell","TypeCell","StatusCell","ResourcesTable","resources","InteractiveTable","r","props","data","ResourceIcon","type","status","statusMessage","resource","getIconStyles","Icon","startMigration","startMigrationIsLoading","startMigrationIsError","isDisconnecting","setIsDisconnecting","isBusy","MigrateToCloud","Page","config"],"sourceRoot":""}