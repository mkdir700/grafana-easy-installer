{"version":3,"file":"mysqlPlugin.844ac554797e110d2cc9.js","mappings":"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,SACA,SACA,MACA,QACA,UACA,OACA,WACA,WACA,YACA,MACA,QACA,QACA,WACA,SACA,SACA,gBACA,mBACA,cACA,cACA,KACA,SACA,KACA,QACA,SACA,QACA,QACA,cACA,SACA,MACA,OACA,OACA,OACA,OACA,OACA,UACA,YACA,WACA,OACA,iBACA,kBACA,KACA,UACA,OACA,aACA,MACA,OACA,OACA,MACA,aACA,UACA,OACA,UACA,QACA,OACA,OACA,QACA,SACA,QACA,OACA,YACA,iBACA,OACA,OACA,WACA,WACA,OACA,eACA,cACA,gCACA,QACA,WACA,aACA,YACA,aACA,YACA,qBACA,gBACA,MACA,WACA,UACA,MACA,qBACA,YACA,QACA,OACA,UACA,KACA,KACA,WACA,kBACA,SACA,aACA,KACA,QACA,MACA,QACA,UACA,OACA,YACA,eACA,YACA,UACA,YACA,QACA,QACA,OACA,OACA,QACA,aACA,OACA,YACA,aACA,SACA,UACA,SACA,SACA,UACA,UACA,WACA,WACA,SACA,SACA,QACA,QACA,MACA,OACA,aACA,SACA,UACA,qBACA,SACA,YACA,YACA,MACA,OACA,SACA,WACA,UACA,WACA,MACA,eACA,WACA,aACA,iBACA,sBACA,mBACA,MACA,WACA,SACA,gBACA,SACA,QACA,aACA,OACA,WACA,UACA,WACA,KACA,WACA,UACA,OACA,OACA,QACA,SACA,SACA,WACA,SACA,QACA,MACA,QACA,WACA,WACA,gBACA,SACA,YACA,UACA,eACA,UACA,UACA,OACA,QACA,QACA,SACA,OACA,QACA,MACA,aACA,UACF,EChVO,SAASG,EAAgBb,EAAkB,CAEhD,MAAO,yEADUA,IAAY,OAAYc,EAAoBd,CAAO,EAAI,YACgB,sBAC1F,CAEO,SAASe,GAAgB,CAC9B,MAAO,qHACT,CAEO,SAASC,EAAiBf,EAAegB,EAAiB,CAC/D,IAAIC,EAAQ,uEACZ,OAAAA,GAASC,EAAqBlB,EAAOgB,CAAM,EAE3CC,GAAS,wBAEFA,CACT,CAEO,SAASC,EAAq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","sources":["webpack://grafana/./public/app/plugins/datasource/mysql/CheatSheet.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/fields.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sqlUtil.ts","webpack://grafana/./public/app/plugins/datasource/mysql/mySqlMetaQuery.ts","webpack://grafana/./public/app/plugins/datasource/mysql/sqlCompletionProvider.ts","webpack://grafana/./public/app/plugins/datasource/mysql/MySqlDatasource.ts","webpack://grafana/./public/app/plugins/datasource/mysql/configuration/ConfigurationEditor.tsx","webpack://grafana/./public/app/plugins/datasource/mysql/module.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nexport function CheatSheet() {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <div>\n      <h2>MySQL cheat sheet</h2>\n      Time series:\n      <ul className={styles.ulPadding}>\n        <li>\n          return column named time or time_sec (in UTC), as a unix time stamp or any sql native date data type. You can\n          use the macros below.\n        </li>\n        <li>return column(s) with numeric datatype as values</li>\n      </ul>\n      Optional:\n      <ul className={styles.ulPadding}>\n        <li>\n          return column named <i>metric</i> to represent the series name.\n        </li>\n        <li>If multiple value columns are returned the metric column is used as prefix.</li>\n        <li>If no column named metric is found the column name of the value column is used as series name</li>\n      </ul>\n      <p>Resultsets of time series queries need to be sorted by time.</p>\n      Table:\n      <ul className={styles.ulPadding}>\n        <li>return any set of columns</li>\n      </ul>\n      Macros:\n      <ul className={styles.ulPadding}>\n        <li>$__time(column) -&gt; UNIX_TIMESTAMP(column) as time_sec</li>\n        <li>$__timeEpoch(column) -&gt; UNIX_TIMESTAMP(column) as time_sec</li>\n        <li>$__timeFilter(column) -&gt; column BETWEEN FROM_UNIXTIME(1492750877) AND FROM_UNIXTIME(1492750877)</li>\n        <li>$__unixEpochFilter(column) -&gt; time_unix_epoch &gt; 1492750877 AND time_unix_epoch &lt; 1492750877</li>\n        <li>\n          $__unixEpochNanoFilter(column) -&gt; column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872\n        </li>\n        <li>\n          $__timeGroup(column,&apos;5m&apos;[, fillvalue]) -&gt; cast(cast(UNIX_TIMESTAMP(column)/(300) as signed)*300\n          as signed) by setting fillvalue grafana will fill in missing values according to the interval fillvalue can be\n          either a literal value, NULL or previous; previous will fill in the previous seen value or NULL if none has\n          been seen yet\n        </li>\n        <li>\n          $__timeGroupAlias(column,&apos;5m&apos;) -&gt; cast(cast(UNIX_TIMESTAMP(column)/(300) as signed)*300 as\n          signed) AS &quot;time&quot;\n        </li>\n        <li>$__unixEpochGroup(column,&apos;5m&apos;) -&gt; column DIV 300 * 300</li>\n        <li>$__unixEpochGroupAlias(column,&apos;5m&apos;) -&gt; column DIV 300 * 300 AS &quot;time&quot;</li>\n      </ul>\n      <p>Example of group by and order by with $__timeGroup:</p>\n      <pre>\n        <code>\n          $__timeGroupAlias(timestamp_col, &apos;1h&apos;), sum(value_double) as value\n          <br />\n          FROM yourtable\n          <br />\n          GROUP BY 1<br />\n          ORDER BY 1\n          <br />\n        </code>\n      </pre>\n      Or build your own conditionals using these macros which just return the values:\n      <ul className={styles.ulPadding}>\n        <li>$__timeFrom() -&gt; FROM_UNIXTIME(1492750877)</li>\n        <li>$__timeTo() -&gt; FROM_UNIXTIME(1492750877)</li>\n        <li>$__unixEpochFrom() -&gt; 1492750877</li>\n        <li>$__unixEpochTo() -&gt; 1492750877</li>\n        <li>$__unixEpochNanoFrom() -&gt; 1494410783152415214</li>\n        <li>$__unixEpochNanoTo() -&gt; 1494497183142514872</li>\n      </ul>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    ulPadding: css({\n      margin: theme.spacing(1, 0),\n      paddingLeft: theme.spacing(5),\n    }),\n  };\n}\n","import { RAQBFieldTypes, SQLSelectableValue } from '@grafana/sql';\n\nexport function mapFieldsToTypes(columns: SQLSelectableValue[]) {\n  const fields: SQLSelectableValue[] = [];\n  for (const col of columns) {\n    let type: RAQBFieldTypes = 'text';\n    switch (col.type?.toUpperCase()) {\n      case 'BOOLEAN':\n      case 'BOOL': {\n        type = 'boolean';\n        break;\n      }\n      case 'BYTES':\n      case 'VARCHAR': {\n        type = 'text';\n        break;\n      }\n      case 'FLOAT':\n      case 'FLOAT64':\n      case 'INT':\n      case 'INTEGER':\n      case 'INT64':\n      case 'NUMERIC':\n      case 'BIGNUMERIC': {\n        type = 'number';\n        break;\n      }\n      case 'DATE': {\n        type = 'date';\n        break;\n      }\n      case 'DATETIME': {\n        type = 'datetime';\n        break;\n      }\n      case 'TIME': {\n        type = 'time';\n        break;\n      }\n      case 'TIMESTAMP': {\n        type = 'datetime';\n        break;\n      }\n      case 'GEOGRAPHY': {\n        type = 'text';\n        break;\n      }\n      default:\n        break;\n    }\n\n    fields.push({ ...col, raqbFieldType: type, icon: mapColumnTypeToIcon(col.type!.toUpperCase()) });\n  }\n  return fields;\n}\n\nexport function mapColumnTypeToIcon(type: string) {\n  switch (type) {\n    case 'TIME':\n    case 'DATETIME':\n    case 'TIMESTAMP':\n      return 'clock-nine';\n    case 'BOOLEAN':\n      return 'toggle-off';\n    case 'INTEGER':\n    case 'FLOAT':\n    case 'FLOAT64':\n    case 'INT':\n    case 'SMALLINT':\n    case 'BIGINT':\n    case 'TINYINT':\n    case 'BYTEINT':\n    case 'INT64':\n    case 'NUMERIC':\n    case 'DECIMAL':\n      return 'calculator-alt';\n    case 'CHAR':\n    case 'VARCHAR':\n    case 'STRING':\n    case 'BYTES':\n    case 'TEXT':\n    case 'TINYTEXT':\n    case 'MEDIUMTEXT':\n    case 'LONGTEXT':\n      return 'text';\n    case 'GEOGRAPHY':\n      return 'map';\n    default:\n      return undefined;\n  }\n}\n","import { isEmpty } from 'lodash';\n\nimport { SQLQuery, createSelectClause, haveColumns } from '@grafana/sql';\n\nexport function toRawSql({ sql, dataset, table }: SQLQuery): string {\n  let rawQuery = '';\n\n  // Return early with empty string if there is no sql column\n  if (!sql || !haveColumns(sql.columns)) {\n    return rawQuery;\n  }\n\n  rawQuery += createSelectClause(sql.columns);\n\n  if (dataset && table) {\n    rawQuery += `FROM ${dataset}.${table} `;\n  }\n\n  if (sql.whereString) {\n    rawQuery += `WHERE ${sql.whereString} `;\n  }\n\n  if (sql.groupBy?.[0]?.property.name) {\n    const groupBy = sql.groupBy.map((g) => g.property.name).filter((g) => !isEmpty(g));\n    rawQuery += `GROUP BY ${groupBy.join(', ')} `;\n  }\n\n  if (sql.orderBy?.property.name) {\n    rawQuery += `ORDER BY ${sql.orderBy.property.name} `;\n  }\n\n  if (sql.orderBy?.property.name && sql.orderByDirection) {\n    rawQuery += `${sql.orderByDirection} `;\n  }\n\n  // Altough LIMIT 0 doesn't make sense, it is still possible to have LIMIT 0\n  if (sql.limit !== undefined && sql.limit >= 0) {\n    rawQuery += `LIMIT ${sql.limit} `;\n  }\n  return rawQuery;\n}\n\n// Puts backticks (`) around the identifier if it is necessary.\nexport function quoteIdentifierIfNecessary(value: string) {\n  return isValidIdentifier(value) ? value : `\\`${value}\\``;\n}\n\n/**\n * Validates the identifier from MySql and returns true if it\n * doesn't need to be escaped.\n */\nexport function isValidIdentifier(identifier: string): boolean {\n  const isValidName = /^[a-zA-Z_][a-zA-Z0-9_$]*$/g.test(identifier);\n  const isReservedWord = RESERVED_WORDS.includes(identifier.toUpperCase());\n  return !isReservedWord && isValidName;\n}\n\n// remove identifier quoting from identifier to use in metadata queries\nexport function unquoteIdentifier(value: string) {\n  if (value[0] === '\"' && value[value.length - 1] === '\"') {\n    return value.substring(1, value.length - 1).replace(/\"\"/g, '\"');\n  } else if (value[0] === '`' && value[value.length - 1] === '`') {\n    return value.substring(1, value.length - 1);\n  } else {\n    return value;\n  }\n}\n\nexport function quoteLiteral(value: string) {\n  return \"'\" + value.replace(/'/g, \"''\") + \"'\";\n}\n\n/**\n * Copied from MySQL 8.0.31 INFORMATION_SCHEMA.KEYWORDS\n */\nconst RESERVED_WORDS = [\n  'ACCESSIBLE',\n  'ADD',\n  'ALL',\n  'ALTER',\n  'ANALYZE',\n  'AND',\n  'AS',\n  'ASC',\n  'ASENSITIVE',\n  'BEFORE',\n  'BETWEEN',\n  'BIGINT',\n  'BINARY',\n  'BLOB',\n  'BOTH',\n  'BY',\n  'CALL',\n  'CASCADE',\n  'CASE',\n  'CHANGE',\n  'CHAR',\n  'CHARACTER',\n  'CHECK',\n  'COLLATE',\n  'COLUMN',\n  'CONDITION',\n  'CONSTRAINT',\n  'CONTINUE',\n  'CONVERT',\n  'CREATE',\n  'CROSS',\n  'CUBE',\n  'CUME_DIST',\n  'CURRENT_DATE',\n  'CURRENT_TIME',\n  'CURRENT_TIMESTAMP',\n  'CURRENT_USER',\n  'CURSOR',\n  'DATABASE',\n  'DATABASES',\n  'DAY_HOUR',\n  'DAY_MICROSECOND',\n  'DAY_MINUTE',\n  'DAY_SECOND',\n  'DEC',\n  'DECIMAL',\n  'DECLARE',\n  'DEFAULT',\n  'DELAYED',\n  'DELETE',\n  'DENSE_RANK',\n  'DESC',\n  'DESCRIBE',\n  'DETERMINISTIC',\n  'DISTINCT',\n  'DISTINCTROW',\n  'DIV',\n  'DOUBLE',\n  'DROP',\n  'DUAL',\n  'EACH',\n  'ELSE',\n  'ELSEIF',\n  'EMPTY',\n  'ENCLOSED',\n  'ESCAPED',\n  'EXCEPT',\n  'EXISTS',\n  'EXIT',\n  'EXPLAIN',\n  'FALSE',\n  'FETCH',\n  'FIRST_VALUE',\n  'FLOAT',\n  'FLOAT4',\n  'FLOAT8',\n  'FOR',\n  'FORCE',\n  'FOREIGN',\n  'FROM',\n  'FULLTEXT',\n  'FUNCTION',\n  'GENERATED',\n  'GET',\n  'GRANT',\n  'GROUP',\n  'GROUPING',\n  'GROUPS',\n  'HAVING',\n  'HIGH_PRIORITY',\n  'HOUR_MICROSECOND',\n  'HOUR_MINUTE',\n  'HOUR_SECOND',\n  'IF',\n  'IGNORE',\n  'IN',\n  'INDEX',\n  'INFILE',\n  'INNER',\n  'INOUT',\n  'INSENSITIVE',\n  'INSERT',\n  'INT',\n  'INT1',\n  'INT2',\n  'INT3',\n  'INT4',\n  'INT8',\n  'INTEGER',\n  'INTERSECT',\n  'INTERVAL',\n  'INTO',\n  'IO_AFTER_GTIDS',\n  'IO_BEFORE_GTIDS',\n  'IS',\n  'ITERATE',\n  'JOIN',\n  'JSON_TABLE',\n  'KEY',\n  'KEYS',\n  'KILL',\n  'LAG',\n  'LAST_VALUE',\n  'LATERAL',\n  'LEAD',\n  'LEADING',\n  'LEAVE',\n  'LEFT',\n  'LIKE',\n  'LIMIT',\n  'LINEAR',\n  'LINES',\n  'LOAD',\n  'LOCALTIME',\n  'LOCALTIMESTAMP',\n  'LOCK',\n  'LONG',\n  'LONGBLOB',\n  'LONGTEXT',\n  'LOOP',\n  'LOW_PRIORITY',\n  'MASTER_BIND',\n  'MASTER_SSL_VERIFY_SERVER_CERT',\n  'MATCH',\n  'MAXVALUE',\n  'MEDIUMBLOB',\n  'MEDIUMINT',\n  'MEDIUMTEXT',\n  'MIDDLEINT',\n  'MINUTE_MICROSECOND',\n  'MINUTE_SECOND',\n  'MOD',\n  'MODIFIES',\n  'NATURAL',\n  'NOT',\n  'NO_WRITE_TO_BINLOG',\n  'NTH_VALUE',\n  'NTILE',\n  'NULL',\n  'NUMERIC',\n  'OF',\n  'ON',\n  'OPTIMIZE',\n  'OPTIMIZER_COSTS',\n  'OPTION',\n  'OPTIONALLY',\n  'OR',\n  'ORDER',\n  'OUT',\n  'OUTER',\n  'OUTFILE',\n  'OVER',\n  'PARTITION',\n  'PERCENT_RANK',\n  'PRECISION',\n  'PRIMARY',\n  'PROCEDURE',\n  'PURGE',\n  'RANGE',\n  'RANK',\n  'READ',\n  'READS',\n  'READ_WRITE',\n  'REAL',\n  'RECURSIVE',\n  'REFERENCES',\n  'REGEXP',\n  'RELEASE',\n  'RENAME',\n  'REPEAT',\n  'REPLACE',\n  'REQUIRE',\n  'RESIGNAL',\n  'RESTRICT',\n  'RETURN',\n  'REVOKE',\n  'RIGHT',\n  'RLIKE',\n  'ROW',\n  'ROWS',\n  'ROW_NUMBER',\n  'SCHEMA',\n  'SCHEMAS',\n  'SECOND_MICROSECOND',\n  'SELECT',\n  'SENSITIVE',\n  'SEPARATOR',\n  'SET',\n  'SHOW',\n  'SIGNAL',\n  'SMALLINT',\n  'SPATIAL',\n  'SPECIFIC',\n  'SQL',\n  'SQLEXCEPTION',\n  'SQLSTATE',\n  'SQLWARNING',\n  'SQL_BIG_RESULT',\n  'SQL_CALC_FOUND_ROWS',\n  'SQL_SMALL_RESULT',\n  'SSL',\n  'STARTING',\n  'STORED',\n  'STRAIGHT_JOIN',\n  'SYSTEM',\n  'TABLE',\n  'TERMINATED',\n  'THEN',\n  'TINYBLOB',\n  'TINYINT',\n  'TINYTEXT',\n  'TO',\n  'TRAILING',\n  'TRIGGER',\n  'TRUE',\n  'UNDO',\n  'UNION',\n  'UNIQUE',\n  'UNLOCK',\n  'UNSIGNED',\n  'UPDATE',\n  'USAGE',\n  'USE',\n  'USING',\n  'UTC_DATE',\n  'UTC_TIME',\n  'UTC_TIMESTAMP',\n  'VALUES',\n  'VARBINARY',\n  'VARCHAR',\n  'VARCHARACTER',\n  'VARYING',\n  'VIRTUAL',\n  'WHEN',\n  'WHERE',\n  'WHILE',\n  'WINDOW',\n  'WITH',\n  'WRITE',\n  'XOR',\n  'YEAR_MONTH',\n  'ZEROFILL',\n];\n","import { quoteLiteral, unquoteIdentifier } from './sqlUtil';\n\nexport function buildTableQuery(dataset?: string) {\n  const database = dataset !== undefined ? quoteIdentAsLiteral(dataset) : 'database()';\n  return `SELECT table_name FROM information_schema.tables WHERE table_schema = ${database} ORDER BY table_name`;\n}\n\nexport function showDatabases() {\n  return `SELECT DISTINCT TABLE_SCHEMA from information_schema.TABLES where TABLE_TYPE != 'SYSTEM VIEW' ORDER BY TABLE_SCHEMA`;\n}\n\nexport function buildColumnQuery(table: string, dbName?: string) {\n  let query = 'SELECT column_name, data_type FROM information_schema.columns WHERE ';\n  query += buildTableConstraint(table, dbName);\n\n  query += ' ORDER BY column_name';\n\n  return query;\n}\n\nexport function buildTableConstraint(table: string, dbName?: string) {\n  let query = '';\n\n  // check for schema qualified table\n  if (table.includes('.')) {\n    const parts = table.split('.');\n    query = 'table_schema = ' + quoteIdentAsLiteral(parts[0]);\n    query += ' AND table_name = ' + quoteIdentAsLiteral(parts[1]);\n    return query;\n  } else {\n    const database = dbName !== undefined ? quoteIdentAsLiteral(dbName) : 'database()';\n    query = `table_schema = ${database} AND table_name = ` + quoteIdentAsLiteral(table);\n\n    return query;\n  }\n}\n\nexport function quoteIdentAsLiteral(value: string) {\n  return quoteLiteral(unquoteIdentifier(value));\n}\n","import {\n  CompletionItemKind,\n  CompletionItemPriority,\n  getStandardSQLCompletionProvider,\n  LanguageCompletionProvider,\n  LinkedToken,\n  PositionContext,\n  StatementPlacementProvider,\n  SuggestionKind,\n  SuggestionKindProvider,\n  TableDefinition,\n  TableIdentifier,\n  TokenType,\n} from '@grafana/experimental';\n\ninterface CompletionProviderGetterArgs {\n  getMeta: (t?: TableIdentifier) => Promise<TableDefinition[]>;\n}\n\nexport const getSqlCompletionProvider: (args: CompletionProviderGetterArgs) => LanguageCompletionProvider =\n  ({ getMeta }) =>\n  (monaco, language) => ({\n    ...(language && getStandardSQLCompletionProvider(monaco, language)),\n    customStatementPlacement: customStatementPlacementProvider,\n    customSuggestionKinds: customSuggestionKinds(getMeta),\n  });\n\nconst customStatementPlacement = {\n  afterDatabase: 'afterDatabase',\n};\n\nconst customSuggestionKind = {\n  tablesWithinDatabase: 'tablesWithinDatabase',\n};\n\nconst FROMKEYWORD = 'FROM';\n\nexport const customStatementPlacementProvider: StatementPlacementProvider = () => [\n  {\n    id: customStatementPlacement.afterDatabase,\n    resolve: (currentToken, previousKeyword, previousNonWhiteSpace) => {\n      return Boolean(\n        currentToken?.is(TokenType.Delimiter, '.') &&\n          previousKeyword?.value === FROMKEYWORD &&\n          (previousNonWhiteSpace?.is(TokenType.IdentifierQuote) || previousNonWhiteSpace?.isIdentifier()) &&\n          // don't match after table name\n          currentToken\n            ?.getPreviousUntil(TokenType.Keyword, [TokenType.IdentifierQuote], FROMKEYWORD)\n            ?.filter((t) => t.isIdentifier()).length === 1\n      );\n    },\n  },\n];\n\nexport const customSuggestionKinds: (getMeta: CompletionProviderGetterArgs['getMeta']) => SuggestionKindProvider =\n  (getMeta) => () => [\n    {\n      id: SuggestionKind.Tables,\n      overrideDefault: true,\n      suggestionsResolver: async (ctx) => {\n        const databaseName = getDatabaseName(ctx.currentToken);\n\n        const suggestions = await getMeta({ schema: databaseName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n    {\n      id: SuggestionKind.Columns,\n      overrideDefault: true,\n      suggestionsResolver: async (ctx) => {\n        const databaseToken = getDatabaseToken(ctx.currentToken);\n        const databaseName = getDatabaseName(databaseToken);\n        const tableName = getTableName(databaseToken);\n\n        if (!databaseName || !tableName) {\n          return [];\n        }\n\n        const suggestions = await getMeta({ schema: databaseName, table: tableName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n    {\n      id: customSuggestionKind.tablesWithinDatabase,\n      applyTo: [customStatementPlacement.afterDatabase],\n      suggestionsResolver: async (ctx) => {\n        const databaseName = getDatabaseName(ctx.currentToken);\n\n        const suggestions = await getMeta({ schema: databaseName });\n\n        return suggestions.map(mapToSuggestion(ctx));\n      },\n    },\n  ];\n\nfunction mapToSuggestion(ctx: PositionContext) {\n  return function (tableDefinition: TableDefinition) {\n    return {\n      label: tableDefinition.name,\n      insertText: tableDefinition.completion ?? tableDefinition.name,\n      command: { id: 'editor.action.triggerSuggest', title: '' },\n      kind: CompletionItemKind.Field,\n      sortText: CompletionItemPriority.High,\n      range: {\n        ...ctx.range,\n        startColumn: ctx.range.endColumn,\n        endColumn: ctx.range.endColumn,\n      },\n    };\n  };\n}\n\nfunction getDatabaseName(token: LinkedToken | null | undefined) {\n  if (token?.isIdentifier() && token.value[token.value.length - 1] !== '.') {\n    return token.value;\n  }\n\n  if (token?.is(TokenType.Delimiter, '.')) {\n    return token.getPreviousOfType(TokenType.Identifier)?.value;\n  }\n\n  if (token?.is(TokenType.IdentifierQuote)) {\n    return token.getPreviousOfType(TokenType.Identifier)?.value || token.getNextOfType(TokenType.Identifier)?.value;\n  }\n  return;\n}\n\nfunction getTableName(token: LinkedToken | null | undefined) {\n  const identifier = token?.getNextOfType(TokenType.Identifier);\n  return identifier?.value;\n}\n\nconst getFromKeywordToken = (currentToken: LinkedToken | null) => {\n  const selectToken = currentToken?.getPreviousOfType(TokenType.Keyword, 'SELECT') ?? null;\n  return selectToken?.getNextOfType(TokenType.Keyword, FROMKEYWORD);\n};\n\nconst getDatabaseToken = (currentToken: LinkedToken | null) => {\n  const fromToken = getFromKeywordToken(currentToken);\n  const nextIdentifier = fromToken?.getNextOfType(TokenType.Identifier);\n  if (nextIdentifier?.isKeyword() && nextIdentifier.next?.is(TokenType.Parenthesis, '(')) {\n    return null;\n  } else {\n    return nextIdentifier;\n  }\n};\n","import { DataSourceInstanceSettings, TimeRange } from '@grafana/data';\nimport { CompletionItemKind, LanguageDefinition, TableIdentifier } from '@grafana/experimental';\nimport { SqlDatasource, DB, SQLQuery, formatSQL } from '@grafana/sql';\n\nimport { mapFieldsToTypes } from './fields';\nimport { buildColumnQuery, buildTableQuery, showDatabases } from './mySqlMetaQuery';\nimport { getSqlCompletionProvider } from './sqlCompletionProvider';\nimport { quoteIdentifierIfNecessary, quoteLiteral, toRawSql } from './sqlUtil';\nimport { MySQLOptions } from './types';\n\nexport class MySqlDatasource extends SqlDatasource {\n  sqlLanguageDefinition: LanguageDefinition | undefined;\n\n  constructor(private instanceSettings: DataSourceInstanceSettings<MySQLOptions>) {\n    super(instanceSettings);\n  }\n\n  getQueryModel() {\n    return { quoteLiteral };\n  }\n\n  getSqlLanguageDefinition(): LanguageDefinition {\n    if (this.sqlLanguageDefinition !== undefined) {\n      return this.sqlLanguageDefinition;\n    }\n\n    const args = {\n      getMeta: (identifier?: TableIdentifier) => this.fetchMeta(identifier),\n    };\n\n    this.sqlLanguageDefinition = {\n      id: 'mysql',\n      completionProvider: getSqlCompletionProvider(args),\n      formatter: formatSQL,\n    };\n\n    return this.sqlLanguageDefinition;\n  }\n\n  async fetchDatasets(): Promise<string[]> {\n    const datasets = await this.runSql<string[]>(showDatabases(), { refId: 'datasets' });\n    return datasets.map((t) => quoteIdentifierIfNecessary(t[0]));\n  }\n\n  async fetchTables(dataset?: string): Promise<string[]> {\n    const tables = await this.runSql<string[]>(buildTableQuery(dataset), { refId: 'tables' });\n    return tables.map((t) => quoteIdentifierIfNecessary(t[0]));\n  }\n\n  async fetchFields(query: Partial<SQLQuery>) {\n    if (!query.dataset || !query.table) {\n      return [];\n    }\n    const queryString = buildColumnQuery(query.table, query.dataset);\n    const frame = await this.runSql<string[]>(queryString, { refId: 'fields' });\n    const fields = frame.map((f) => ({\n      name: f[0],\n      text: f[0],\n      value: quoteIdentifierIfNecessary(f[0]),\n      type: f[1],\n      label: f[0],\n    }));\n    return mapFieldsToTypes(fields);\n  }\n\n  async fetchMeta(identifier?: TableIdentifier) {\n    const defaultDB = this.instanceSettings.jsonData.database;\n    if (!identifier?.schema && defaultDB) {\n      const tables = await this.fetchTables(defaultDB);\n      return tables.map((t) => ({ name: t, completion: `${defaultDB}.${t}`, kind: CompletionItemKind.Class }));\n    } else if (!identifier?.schema && !defaultDB) {\n      const datasets = await this.fetchDatasets();\n      return datasets.map((d) => ({ name: d, completion: `${d}.`, kind: CompletionItemKind.Module }));\n    } else {\n      if (!identifier?.table && (!defaultDB || identifier?.schema)) {\n        const tables = await this.fetchTables(identifier?.schema);\n        return tables.map((t) => ({ name: t, completion: t, kind: CompletionItemKind.Class }));\n      } else if (identifier?.table && identifier.schema) {\n        const fields = await this.fetchFields({ dataset: identifier.schema, table: identifier.table });\n        return fields.map((t) => ({ name: t.name, completion: t.value, kind: CompletionItemKind.Field }));\n      } else {\n        return [];\n      }\n    }\n  }\n\n  getDB(): DB {\n    if (this.db !== undefined) {\n      return this.db;\n    }\n\n    return {\n      datasets: () => this.fetchDatasets(),\n      tables: (dataset?: string) => this.fetchTables(dataset),\n      fields: (query: SQLQuery) => this.fetchFields(query),\n      validateQuery: (query: SQLQuery, _range?: TimeRange) =>\n        Promise.resolve({ query, error: '', isError: false, isValid: true }),\n      dsID: () => this.id,\n      toRawSql,\n      functions: () => ['VARIANCE', 'STDDEV'],\n      getEditorLanguageDefinition: () => this.getSqlLanguageDefinition(),\n    };\n  }\n}\n","import React, { SyntheticEvent, useState } from 'react';\n\nimport {\n  DataSourcePluginOptionsEditorProps,\n  onUpdateDatasourceJsonDataOption,\n  onUpdateDatasourceSecureJsonDataOption,\n  updateDatasourcePluginJsonDataOption,\n  updateDatasourcePluginResetOption,\n} from '@grafana/data';\nimport { ConfigSection, ConfigSubSection, DataSourceDescription, Stack } from '@grafana/experimental';\nimport { config } from '@grafana/runtime';\nimport { ConnectionLimits, Divider, TLSSecretsConfig, useMigrateDatabaseFields } from '@grafana/sql';\nimport {\n  Collapse,\n  Field,\n  Icon,\n  Input,\n  Label,\n  SecretInput,\n  SecureSocksProxySettings,\n  Switch,\n  Tooltip,\n} from '@grafana/ui';\n\nimport { MySQLOptions } from '../types';\n\nexport const ConfigurationEditor = (props: DataSourcePluginOptionsEditorProps<MySQLOptions>) => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const { options, onOptionsChange } = props;\n  const jsonData = options.jsonData;\n\n  useMigrateDatabaseFields(props);\n\n  const onResetPassword = () => {\n    updateDatasourcePluginResetOption(props, 'password');\n  };\n\n  const onDSOptionChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      onOptionsChange({ ...options, ...{ [property]: event.currentTarget.value } });\n    };\n  };\n\n  const onSwitchChanged = (property: keyof MySQLOptions) => {\n    return (event: SyntheticEvent<HTMLInputElement>) => {\n      updateDatasourcePluginJsonDataOption(props, property, event.currentTarget.checked);\n    };\n  };\n\n  const WIDTH_LONG = 40;\n\n  return (\n    <>\n      <DataSourceDescription\n        dataSourceName=\"MySQL\"\n        docsLink=\"https://grafana.com/docs/grafana/latest/datasources/mysql/\"\n        hasRequiredFields={true}\n      />\n\n      <Divider />\n\n      <Collapse collapsible label=\"User Permission\" isOpen={isOpen} onToggle={() => setIsOpen((x) => !x)}>\n        The database user should only be granted SELECT permissions on the specified database &amp; tables you want to\n        query. <br />\n        Grafana does not validate that queries are safe so queries can contain any SQL statement. For example,\n        statements like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. <br />\n        To protect against this we <strong>Highly</strong> recommend you create a specific MySQL user with restricted\n        permissions. Check out the docs for more information.\n      </Collapse>\n\n      <Divider />\n\n      <ConfigSection title=\"Connection\">\n        <Field label=\"Host URL\" required>\n          <Input\n            width={WIDTH_LONG}\n            name=\"host\"\n            type=\"text\"\n            value={options.url || ''}\n            placeholder=\"localhost:3306\"\n            onChange={onDSOptionChanged('url')}\n          />\n        </Field>\n\n        <Field label=\"Database name\">\n          <Input\n            width={WIDTH_LONG}\n            name=\"database\"\n            value={jsonData.database || ''}\n            placeholder=\"Database\"\n            onChange={onUpdateDatasourceJsonDataOption(props, 'database')}\n          />\n        </Field>\n      </ConfigSection>\n\n      <Divider />\n\n      <ConfigSection title=\"Authentication\">\n        <Field label=\"Username\" required>\n          <Input\n            width={WIDTH_LONG}\n            value={options.user || ''}\n            placeholder=\"Username\"\n            onChange={onDSOptionChanged('user')}\n          />\n        </Field>\n\n        <Field label=\"Password\">\n          <SecretInput\n            width={WIDTH_LONG}\n            placeholder=\"Password\"\n            isConfigured={options.secureJsonFields && options.secureJsonFields.password}\n            onReset={onResetPassword}\n            onBlur={onUpdateDatasourceSecureJsonDataOption(props, 'password')}\n          />\n        </Field>\n\n        <Field\n          label=\"Use TLS Client Auth\"\n          description=\"Enables TLS authentication using client cert configured in secure json data.\"\n        >\n          <Switch onChange={onSwitchChanged('tlsAuth')} value={jsonData.tlsAuth || false} />\n        </Field>\n\n        <Field label=\"With CA Cert\" description=\"Needed for verifying self-signed TLS Certs.\">\n          <Switch onChange={onSwitchChanged('tlsAuthWithCACert')} value={jsonData.tlsAuthWithCACert || false} />\n        </Field>\n\n        <Field\n          label=\"Skip TLS Verification\"\n          description=\"When enabled, skips verification of the MySQL server's TLS certificate chain and host name.\"\n        >\n          <Switch onChange={onSwitchChanged('tlsSkipVerify')} value={jsonData.tlsSkipVerify || false} />\n        </Field>\n\n        <Field\n          label=\"Allow Cleartext Passwords\"\n          description=\"Allows using the cleartext client side plugin if required by an account.\"\n        >\n          <Switch\n            onChange={onSwitchChanged('allowCleartextPasswords')}\n            value={jsonData.allowCleartextPasswords || false}\n          />\n        </Field>\n      </ConfigSection>\n\n      {jsonData.tlsAuth || jsonData.tlsAuthWithCACert ? (\n        <>\n          <Divider />\n\n          <ConfigSection title=\"TLS/SSL Auth Details\">\n            {jsonData.tlsAuth || jsonData.tlsAuthWithCACert ? (\n              <TLSSecretsConfig\n                showCACert={jsonData.tlsAuthWithCACert}\n                showKeyPair={jsonData.tlsAuth}\n                editorProps={props}\n                labelWidth={WIDTH_LONG}\n              />\n            ) : null}\n          </ConfigSection>\n        </>\n      ) : null}\n\n      <Divider />\n\n      <ConfigSection title=\"Additional settings\" isCollapsible>\n        <ConfigSubSection title=\"MySQL Options\">\n          <Field\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>Session timezone</span>\n                  <Tooltip\n                    content={\n                      <span>\n                        Specify the timezone used in the database session, such as <code>Europe/Berlin</code> or\n                        <code>+02:00</code>. Required if the timezone of the database (or the host of the database) is\n                        set to something other than UTC. Set this to <code>+00:00</code> so Grafana can handle times\n                        properly. Set the value used in the session with <code>SET time_zone=&apos;...&apos;</code>. If\n                        you leave this field empty, the timezone will not be updated. You can find more information in\n                        the MySQL documentation.\n                      </span>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n          >\n            <Input\n              width={WIDTH_LONG}\n              value={jsonData.timezone || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'timezone')}\n              placeholder=\"Europe/Berlin or +02:00\"\n            />\n          </Field>\n\n          <Field\n            label={\n              <Label>\n                <Stack gap={0.5}>\n                  <span>Min time interval</span>\n                  <Tooltip\n                    content={\n                      <span>\n                        A lower limit for the auto group by time interval. Recommended to be set to write frequency, for\n                        example\n                        <code>1m</code> if your data is written every minute.\n                      </span>\n                    }\n                  >\n                    <Icon name=\"info-circle\" size=\"sm\" />\n                  </Tooltip>\n                </Stack>\n              </Label>\n            }\n            description=\"A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example 1m if your data is written every minute.\"\n          >\n            <Input\n              width={WIDTH_LONG}\n              placeholder=\"1m\"\n              value={jsonData.timeInterval || ''}\n              onChange={onUpdateDatasourceJsonDataOption(props, 'timeInterval')}\n            />\n          </Field>\n        </ConfigSubSection>\n\n        <ConnectionLimits options={options} onOptionsChange={onOptionsChange} />\n\n        {config.secureSocksDSProxyEnabled && (\n          <SecureSocksProxySettings options={options} onOptionsChange={onOptionsChange} />\n        )}\n      </ConfigSection>\n    </>\n  );\n};\n","import { DataSourcePlugin } from '@grafana/data';\nimport { SQLQuery, SqlQueryEditor } from '@grafana/sql';\n\nimport { CheatSheet } from './CheatSheet';\nimport { MySqlDatasource } from './MySqlDatasource';\nimport { ConfigurationEditor } from './configuration/ConfigurationEditor';\nimport { MySQLOptions } from './types';\n\nexport const plugin = new DataSourcePlugin<MySqlDatasource, SQLQuery, MySQLOptions>(MySqlDatasource)\n  .setQueryEditor(SqlQueryEditor)\n  .setQueryEditorHelp(CheatSheet)\n  .setConfigEditor(ConfigurationEditor);\n"],"names":["CheatSheet","styles","getStyles","theme","mapFieldsToTypes","columns","fields","col","type","mapColumnTypeToIcon","toRawSql","sql","dataset","table","rawQuery","groupBy","g","quoteIdentifierIfNecessary","value","isValidIdentifier","identifier","isValidName","RESERVED_WORDS","unquoteIdentifier","quoteLiteral","buildTableQuery","quoteIdentAsLiteral","showDatabases","buildColumnQuery","dbName","query","buildTableConstraint","parts","getSqlCompletionProvider","getMeta","monaco","language","customStatementPlacementProvider","customSuggestionKinds","customStatementPlacement","customSuggestionKind","FROMKEYWORD","currentToken","previousKeyword","previousNonWhiteSpace","t","ctx","databaseName","getDatabaseName","mapToSuggestion","databaseToken","getDatabaseToken","tableName","getTableName","tableDefinition","token","getFromKeywordToken","nextIdentifier","MySqlDatasource","instanceSettings","args","queryString","f","defaultDB","d","_range","ConfigurationEditor","props","isOpen","setIsOpen","options","onOptionsChange","jsonData","onResetPassword","onDSOptionChanged","property","event","onSwitchChanged","WIDTH_LONG","DataSourceDescription","Collapse","x","ConfigSection","Field","Input","SecretInput","Switch","ConfigSubSection","Label","Stack","Tooltip","Icon","config","SecureSocksProxySettings"],"sourceRoot":""}