{"version":3,"file":"3726.cdb0caf7f23e3932d743.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/datasource/alertmanager/consts.ts","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiverExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/export/GrafanaReceiversExporter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/ReceiverMetadataBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplatesTable.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/NotificationTemplates.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/ContactPointsFilter.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/GlobalConfigAlert.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/Modals.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/components/UnusedBadge.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/ContactPoints.tsx","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/useContactPoints.tsx","webpack://grafana/./public/app/features/alerting/unified/utils/receivers.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/useReceiversMetadata.ts","webpack://grafana/./public/app/features/alerting/unified/components/contact-points/utils.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/alertManagerSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/autocomplete.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/definition.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/register.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/TemplateEditor.tsx","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/snippets.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/editor/templateDataSuggestions.ts","webpack://grafana/./public/app/features/alerting/unified/components/receivers/grafanaAppReceivers/types.ts","webpack://grafana/./public/app/features/alerting/unified/components/rules/ActionIcon.tsx","webpack://grafana/./public/app/features/alerting/unified/styles/table.ts"],"sourcesContent":["export const receiverTypeNames: Record<string, string> = {\n  pagerduty: 'PagerDuty',\n  pushover: 'Pushover',\n  slack: 'Slack',\n  opsgenie: 'OpsGenie',\n  webhook: 'Webhook',\n  victorops: 'VictorOps',\n  wechat: 'WeChat',\n  discord: 'Discord',\n  webex: 'Cisco Webex Teams',\n  sns: 'Amazon SNS',\n  telegram: 'Telegram',\n  msteams: 'Microsoft Teams',\n};\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiverExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiverExportPreview = ({\n  receiverName,\n  decrypt,\n  exportFormat,\n  onClose,\n}: GrafanaReceiverExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiverQuery({\n    receiverName: receiverName,\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `cp-${receiverName}-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiverExporterProps {\n  onClose: () => void;\n  receiverName: string;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiverExporter = ({ onClose, receiverName, decrypt }: GrafanaReceiverExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiverExportPreview\n        receiverName={receiverName}\n        decrypt={decrypt}\n        exportFormat={activeTab}\n        onClose={onClose}\n      />\n    </GrafanaExportDrawer>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { LoadingPlaceholder } from '@grafana/ui';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\n\nimport { FileExportPreview } from './FileExportPreview';\nimport { GrafanaExportDrawer } from './GrafanaExportDrawer';\nimport { allGrafanaExportProviders, ExportFormats } from './providers';\n\ninterface GrafanaReceiversExportPreviewProps {\n  exportFormat: ExportFormats;\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nconst GrafanaReceiversExportPreview = ({ decrypt, exportFormat, onClose }: GrafanaReceiversExportPreviewProps) => {\n  const { currentData: receiverDefinition = '', isFetching } = alertRuleApi.useExportReceiversQuery({\n    decrypt: decrypt,\n    format: exportFormat,\n  });\n\n  const downloadFileName = `contact-points-${new Date().getTime()}`;\n\n  if (isFetching) {\n    return <LoadingPlaceholder text=\"Loading....\" />;\n  }\n\n  return (\n    <FileExportPreview\n      format={exportFormat}\n      textDefinition={receiverDefinition}\n      downloadFileName={downloadFileName}\n      onClose={onClose}\n    />\n  );\n};\n\ninterface GrafanaReceiversExporterProps {\n  onClose: () => void;\n  decrypt: boolean;\n}\n\nexport const GrafanaReceiversExporter = ({ onClose, decrypt }: GrafanaReceiversExporterProps) => {\n  const [activeTab, setActiveTab] = useState<ExportFormats>('yaml');\n\n  return (\n    <GrafanaExportDrawer\n      activeTab={activeTab}\n      onTabChange={setActiveTab}\n      onClose={onClose}\n      formatProviders={Object.values(allGrafanaExportProviders)}\n    >\n      <GrafanaReceiversExportPreview decrypt={decrypt} exportFormat={activeTab} onClose={onClose} />\n    </GrafanaExportDrawer>\n  );\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, LinkButton, Tooltip, useStyles2, Stack } from '@grafana/ui';\n\nimport { ReceiverPluginMetadata } from './useReceiversMetadata';\n\ninterface Props {\n  metadata: ReceiverPluginMetadata;\n}\n\nexport const ReceiverMetadataBadge = ({ metadata: { icon, title, externalUrl, warning } }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack alignItems=\"center\" gap={0.5}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {warning ? (\n          <Tooltip content={warning} theme=\"error\">\n            <Icon name=\"exclamation-triangle\" className={styles.warnIcon} />\n          </Tooltip>\n        ) : (\n          <img src={icon} alt={title} height=\"16px\" />\n        )}\n        <span>{title}</span>\n      </Stack>\n      {externalUrl && (\n        <LinkButton icon=\"external-link-alt\" href={externalUrl} target=\"_blank\" variant=\"secondary\" size=\"sm\" />\n      )}\n    </Stack>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  warnIcon: css({\n    fill: theme.colors.warning.text,\n  }),\n});\n","import React, { Fragment, useMemo, useState } from 'react';\n\nimport { ConfirmModal, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { Authorize } from '../../components/Authorize';\nimport { AlertmanagerAction } from '../../hooks/useAbilities';\nimport { deleteTemplateAction } from '../../state/actions';\nimport { getAlertTableStyles } from '../../styles/table';\nimport { makeAMLink } from '../../utils/misc';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { DetailsField } from '../DetailsField';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { ActionIcon } from '../rules/ActionIcon';\n\nimport { TemplateEditor } from './TemplateEditor';\n\ninterface Props {\n  config: AlertManagerCortexConfig;\n  alertManagerName: string;\n}\n\nexport const TemplatesTable = ({ config, alertManagerName }: Props) => {\n  const dispatch = useDispatch();\n  const [expandedTemplates, setExpandedTemplates] = useState<Record<string, boolean>>({});\n  const tableStyles = useStyles2(getAlertTableStyles);\n\n  const templateRows = useMemo(() => {\n    const templates = Object.entries(config.template_files);\n\n    return templates.map(([name, template]) => ({\n      name,\n      template,\n      provenance: (config.template_file_provenances ?? {})[name],\n    }));\n  }, [config]);\n  const [templateToDelete, setTemplateToDelete] = useState<string>();\n\n  const deleteTemplate = () => {\n    if (templateToDelete) {\n      dispatch(deleteTemplateAction(templateToDelete, alertManagerName));\n    }\n    setTemplateToDelete(undefined);\n  };\n\n  return (\n    <>\n      <table className={tableStyles.table} data-testid=\"templates-table\">\n        <colgroup>\n          <col className={tableStyles.colExpand} />\n          <col />\n          <col />\n        </colgroup>\n        <thead>\n          <tr>\n            <th></th>\n            <th>Template</th>\n            <Authorize\n              actions={[\n                AlertmanagerAction.CreateNotificationTemplate,\n                AlertmanagerAction.UpdateNotificationTemplate,\n                AlertmanagerAction.DeleteNotificationTemplate,\n              ]}\n            >\n              <th>Actions</th>\n            </Authorize>\n          </tr>\n        </thead>\n        <tbody>\n          {!templateRows.length && (\n            <tr className={tableStyles.evenRow}>\n              <td colSpan={3}>No templates defined.</td>\n            </tr>\n          )}\n          {templateRows.map(({ name, template, provenance }, idx) => {\n            const isExpanded = !!expandedTemplates[name];\n            return (\n              <Fragment key={name}>\n                <tr key={name} className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                  <td>\n                    <CollapseToggle\n                      isCollapsed={!expandedTemplates[name]}\n                      onToggle={() => setExpandedTemplates({ ...expandedTemplates, [name]: !isExpanded })}\n                    />\n                  </td>\n                  <td>\n                    {name} {provenance && <ProvisioningBadge />}\n                  </td>\n                  <td className={tableStyles.actionsCell}>\n                    {provenance && (\n                      <ActionIcon\n                        to={makeAMLink(\n                          `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                          alertManagerName\n                        )}\n                        tooltip=\"view template\"\n                        icon=\"file-alt\"\n                      />\n                    )}\n                    {!provenance && (\n                      <Authorize actions={[AlertmanagerAction.UpdateNotificationTemplate]}>\n                        <ActionIcon\n                          to={makeAMLink(\n                            `/alerting/notifications/templates/${encodeURIComponent(name)}/edit`,\n                            alertManagerName\n                          )}\n                          tooltip=\"edit template\"\n                          icon=\"pen\"\n                        />\n                      </Authorize>\n                    )}\n                    <Authorize actions={[AlertmanagerAction.CreateContactPoint]}>\n                      <ActionIcon\n                        to={makeAMLink(\n                          `/alerting/notifications/templates/${encodeURIComponent(name)}/duplicate`,\n                          alertManagerName\n                        )}\n                        tooltip=\"Copy template\"\n                        icon=\"copy\"\n                      />\n                    </Authorize>\n                    {!provenance && (\n                      <Authorize actions={[AlertmanagerAction.DeleteNotificationTemplate]}>\n                        <ActionIcon\n                          onClick={() => setTemplateToDelete(name)}\n                          tooltip=\"delete template\"\n                          icon=\"trash-alt\"\n                        />\n                      </Authorize>\n                    )}\n                  </td>\n                </tr>\n                {isExpanded && (\n                  <tr className={idx % 2 === 0 ? tableStyles.evenRow : undefined}>\n                    <td></td>\n                    <td colSpan={2}>\n                      <DetailsField label=\"Description\" horizontal={true}>\n                        <TemplateEditor\n                          width={'auto'}\n                          height={'auto'}\n                          autoHeight={true}\n                          value={template}\n                          showLineNumbers={false}\n                          monacoOptions={{\n                            readOnly: true,\n                            scrollBeyondLastLine: false,\n                          }}\n                        />\n                      </DetailsField>\n                    </td>\n                  </tr>\n                )}\n              </Fragment>\n            );\n          })}\n        </tbody>\n      </table>\n\n      {!!templateToDelete && (\n        <ConfirmModal\n          isOpen={true}\n          title=\"Delete template\"\n          body={`Are you sure you want to delete template \"${templateToDelete}\"?`}\n          confirmText=\"Yes, delete\"\n          onConfirm={deleteTemplate}\n          onDismiss={() => setTemplateToDelete(undefined)}\n        />\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Alert } from '@grafana/ui';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { TemplatesTable } from '../receivers/TemplatesTable';\n\nexport const NotificationTemplates = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { data, error } = useAlertmanagerConfig(selectedAlertmanager);\n\n  if (error) {\n    return <Alert title=\"Failed to fetch notification templates\">{String(error)}</Alert>;\n  }\n\n  if (data) {\n    return <TemplatesTable config={data} alertManagerName={selectedAlertmanager!} />;\n  }\n\n  return null;\n};\n","import { css } from '@emotion/css';\nimport React, { useCallback, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { Stack } from '@grafana/experimental';\nimport { Button, Field, Icon, Input, useStyles2 } from '@grafana/ui';\n\nimport { useURLSearchParams } from '../../../hooks/useURLSearchParams';\n\nconst ContactPointsFilter = () => {\n  const styles = useStyles2(getStyles);\n\n  const [searchParams, setSearchParams] = useURLSearchParams();\n\n  const defaultValue = searchParams.get('search') ?? '';\n  const [searchValue, setSearchValue] = useState(defaultValue);\n\n  const [_, cancel] = useDebounce(\n    () => {\n      setSearchParams({ search: searchValue }, true);\n    },\n    300,\n    [setSearchParams, searchValue]\n  );\n\n  const clear = useCallback(() => {\n    cancel();\n    setSearchValue('');\n    setSearchParams({ search: '' }, true);\n  }, [cancel, setSearchParams]);\n\n  const hasInput = Boolean(defaultValue);\n\n  return (\n    <Stack direction=\"row\" alignItems=\"end\" gap={0.5}>\n      <Field className={styles.noBottom} label=\"Search by name or type\">\n        <Input\n          aria-label=\"search contact points\"\n          placeholder=\"Search\"\n          width={46}\n          prefix={<Icon name=\"search\" />}\n          onChange={(event) => {\n            setSearchValue(event.currentTarget.value);\n          }}\n          value={searchValue}\n        />\n      </Field>\n      <Button variant=\"secondary\" icon=\"times\" onClick={() => clear()} disabled={!hasInput} aria-label=\"clear\">\n        Clear\n      </Button>\n    </Stack>\n  );\n};\n\nconst getStyles = () => ({\n  noBottom: css({\n    marginBottom: 0,\n  }),\n});\n\nexport { ContactPointsFilter };\n","import React from 'react';\n\nimport { Alert, LinkButton } from '@grafana/ui';\n\nimport { AlertmanagerAction } from '../../../hooks/useAbilities';\nimport { isVanillaPrometheusAlertManagerDataSource } from '../../../utils/datasource';\nimport { makeAMLink } from '../../../utils/misc';\nimport { Authorize } from '../../Authorize';\n\ninterface GlobalConfigAlertProps {\n  alertManagerName: string;\n}\n\nexport const GlobalConfigAlert = ({ alertManagerName }: GlobalConfigAlertProps) => {\n  const isVanillaAM = isVanillaPrometheusAlertManagerDataSource(alertManagerName);\n\n  return (\n    <Authorize actions={[AlertmanagerAction.UpdateExternalConfiguration]}>\n      <Alert severity=\"info\" title=\"Global config for contact points\">\n        <p>\n          For each external Alertmanager you can define global settings, like server addresses, usernames and password,\n          for all the supported contact points.\n        </p>\n        <LinkButton href={makeAMLink('alerting/notifications/global-config', alertManagerName)} variant=\"secondary\">\n          {isVanillaAM ? 'View global config' : 'Edit global config'}\n        </LinkButton>\n      </Alert>\n    </Authorize>\n  );\n};\n","import React, { useCallback, useMemo, useState } from 'react';\n\nimport { Button, Modal, ModalProps } from '@grafana/ui';\n\nimport { stringifyErrorLike } from '../../../utils/misc';\n\ntype ModalHook<T = undefined> = [JSX.Element, (item: T) => void, () => void];\n\n/**\n * This hook controls the delete modal for contact points, showing loading and error states when appropriate\n */\nexport const useDeleteContactPointModal = (\n  handleDelete: (name: string) => Promise<void>,\n  isLoading: boolean\n): ModalHook<string> => {\n  const [showModal, setShowModal] = useState(false);\n  const [contactPoint, setContactPoint] = useState<string>();\n  const [error, setError] = useState<unknown | undefined>();\n\n  const handleDismiss = useCallback(() => {\n    if (isLoading) {\n      return;\n    }\n\n    setContactPoint(undefined);\n    setShowModal(false);\n    setError(undefined);\n  }, [isLoading]);\n\n  const handleShow = useCallback((name: string) => {\n    setContactPoint(name);\n    setShowModal(true);\n    setError(undefined);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    if (contactPoint) {\n      handleDelete(contactPoint)\n        .then(() => setShowModal(false))\n        .catch(setError);\n    }\n  }, [handleDelete, contactPoint]);\n\n  const modalElement = useMemo(() => {\n    if (error) {\n      return <ErrorModal isOpen={showModal} onDismiss={handleDismiss} error={error} />;\n    }\n\n    return (\n      <Modal\n        isOpen={showModal}\n        onDismiss={handleDismiss}\n        closeOnBackdropClick={!isLoading}\n        closeOnEscape={!isLoading}\n        title=\"Delete contact point\"\n      >\n        <p>Deleting this contact point will permanently remove it.</p>\n        <p>Are you sure you want to delete this contact point?</p>\n\n        <Modal.ButtonRow>\n          <Button type=\"button\" variant=\"destructive\" onClick={handleSubmit} disabled={isLoading}>\n            {isLoading ? 'Deleting...' : 'Yes, delete contact point'}\n          </Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={handleDismiss} disabled={isLoading}>\n            Cancel\n          </Button>\n        </Modal.ButtonRow>\n      </Modal>\n    );\n  }, [error, handleDismiss, handleSubmit, isLoading, showModal]);\n\n  return [modalElement, handleShow, handleDismiss];\n};\n\ninterface ErrorModalProps extends Pick<ModalProps, 'isOpen' | 'onDismiss'> {\n  error: unknown;\n}\nconst ErrorModal = ({ isOpen, onDismiss, error }: ErrorModalProps) => (\n  <Modal\n    isOpen={isOpen}\n    onDismiss={onDismiss}\n    closeOnBackdropClick={true}\n    closeOnEscape={true}\n    title={'Something went wrong'}\n  >\n    <p>Failed to update your configuration:</p>\n    <p>\n      <pre>\n        <code>{stringifyErrorLike(error)}</code>\n      </pre>\n    </p>\n  </Modal>\n);\n","import React from 'react';\n\nimport { Badge } from '@grafana/ui';\n\nexport const UnusedContactPointBadge = () => (\n  <Badge\n    text=\"Unused\"\n    aria-label=\"unused\"\n    color=\"orange\"\n    icon=\"exclamation-triangle\"\n    // is not used in any policy, but it can receive notifications from an auto auto generated policy. Non admin users can't see auto generated policies.\n    tooltip=\"This contact point is not used in any notification policy\"\n  />\n);\n","import { css } from '@emotion/css';\nimport uFuzzy from '@leeoniya/ufuzzy';\nimport { SerializedError } from '@reduxjs/toolkit';\nimport { groupBy, size, uniq, upperFirst } from 'lodash';\nimport pluralize from 'pluralize';\nimport React, { Fragment, ReactNode, useCallback, useMemo, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useToggle } from 'react-use';\n\nimport { dateTime, GrafanaTheme2 } from '@grafana/data';\nimport {\n  Alert,\n  Button,\n  Dropdown,\n  Icon,\n  LinkButton,\n  LoadingPlaceholder,\n  Menu,\n  Pagination,\n  Stack,\n  Tab,\n  TabContent,\n  TabsBar,\n  Text,\n  Tooltip,\n  useStyles2,\n} from '@grafana/ui';\nimport ConditionalWrap from 'app/features/alerting/unified/components/ConditionalWrap';\nimport { receiverTypeNames } from 'app/plugins/datasource/alertmanager/consts';\nimport { GrafanaManagedReceiverConfig } from 'app/plugins/datasource/alertmanager/types';\nimport { GrafanaNotifierType, NotifierStatus } from 'app/types/alerting';\n\nimport { AlertmanagerAction, useAlertmanagerAbility } from '../../hooks/useAbilities';\nimport { usePagination } from '../../hooks/usePagination';\nimport { useURLSearchParams } from '../../hooks/useURLSearchParams';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { INTEGRATION_ICONS } from '../../types/contact-points';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { createUrl } from '../../utils/url';\nimport { GrafanaAlertmanagerDeliveryWarning } from '../GrafanaAlertmanagerDeliveryWarning';\nimport { MetaText } from '../MetaText';\nimport MoreButton from '../MoreButton';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { Spacer } from '../Spacer';\nimport { Strong } from '../Strong';\nimport { GrafanaReceiverExporter } from '../export/GrafanaReceiverExporter';\nimport { GrafanaReceiversExporter } from '../export/GrafanaReceiversExporter';\nimport { ReceiverMetadataBadge } from '../receivers/grafanaAppReceivers/ReceiverMetadataBadge';\nimport { ReceiverPluginMetadata } from '../receivers/grafanaAppReceivers/useReceiversMetadata';\n\nimport { NotificationTemplates } from './NotificationTemplates';\nimport { ContactPointsFilter } from './components/ContactPointsFilter';\nimport { GlobalConfigAlert } from './components/GlobalConfigAlert';\nimport { useDeleteContactPointModal } from './components/Modals';\nimport { UnusedContactPointBadge } from './components/UnusedBadge';\nimport {\n  RECEIVER_META_KEY,\n  RECEIVER_PLUGIN_META_KEY,\n  RECEIVER_STATUS_KEY,\n  useContactPointsWithStatus,\n  useDeleteContactPoint,\n} from './useContactPoints';\nimport {\n  ContactPointWithMetadata,\n  getReceiverDescription,\n  isProvisioned,\n  ReceiverConfigWithMetadata,\n  RouteReference,\n} from './utils';\n\nenum ActiveTab {\n  ContactPoints,\n  NotificationTemplates,\n}\n\nconst DEFAULT_PAGE_SIZE = 10;\n\nconst ContactPoints = () => {\n  const { selectedAlertmanager } = useAlertmanager();\n  // TODO hook up to query params\n  const [activeTab, setActiveTab] = useState<ActiveTab>(ActiveTab.ContactPoints);\n  let { isLoading, error, contactPoints } = useContactPointsWithStatus();\n  const { deleteTrigger, updateAlertmanagerState } = useDeleteContactPoint(selectedAlertmanager!);\n  const [addContactPointSupported, addContactPointAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.CreateContactPoint\n  );\n  const [exportContactPointsSupported, exportContactPointsAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.ExportContactPoint\n  );\n  const [createTemplateSupported, createTemplateAllowed] = useAlertmanagerAbility(\n    AlertmanagerAction.CreateNotificationTemplate\n  );\n\n  const [DeleteModal, showDeleteModal] = useDeleteContactPointModal(deleteTrigger, updateAlertmanagerState.isLoading);\n  const [ExportDrawer, showExportDrawer] = useExportContactPoint();\n\n  const [searchParams] = useURLSearchParams();\n  const { search } = getContactPointsFilters(searchParams);\n\n  const showingContactPoints = activeTab === ActiveTab.ContactPoints;\n  const showNotificationTemplates = activeTab === ActiveTab.NotificationTemplates;\n\n  if (error) {\n    // TODO fix this type casting, when error comes from \"getContactPointsStatus\" it probably won't be a SerializedError\n    return <Alert title=\"Failed to fetch contact points\">{(error as SerializedError).message}</Alert>;\n  }\n\n  const isGrafanaManagedAlertmanager = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n\n  return (\n    <>\n      <GrafanaAlertmanagerDeliveryWarning currentAlertmanager={selectedAlertmanager!} />\n\n      <Stack direction=\"column\">\n        <TabsBar>\n          <Tab\n            label=\"Contact Points\"\n            active={showingContactPoints}\n            counter={contactPoints.length}\n            onChangeTab={() => setActiveTab(ActiveTab.ContactPoints)}\n          />\n          <Tab\n            label=\"Notification Templates\"\n            active={showNotificationTemplates}\n            onChangeTab={() => setActiveTab(ActiveTab.NotificationTemplates)}\n          />\n        </TabsBar>\n        <TabContent>\n          <Stack direction=\"column\">\n            <>\n              {isLoading && <LoadingPlaceholder text={'Loading...'} />}\n              {/* Contact Points tab */}\n              {showingContactPoints && (\n                <>\n                  {error ? (\n                    <Alert title=\"Failed to fetch contact points\">{String(error)}</Alert>\n                  ) : (\n                    <>\n                      {/* TODO we can add some additional info here with a ToggleTip */}\n                      <Stack direction=\"row\" alignItems=\"end\">\n                        <ContactPointsFilter />\n                        <Spacer />\n                        <Stack direction=\"row\" gap={1}>\n                          {addContactPointSupported && (\n                            <LinkButton\n                              icon=\"plus\"\n                              aria-label=\"add contact point\"\n                              variant=\"primary\"\n                              href=\"/alerting/notifications/receivers/new\"\n                              disabled={!addContactPointAllowed}\n                            >\n                              Add contact point\n                            </LinkButton>\n                          )}\n                          {exportContactPointsSupported && (\n                            <Button\n                              icon=\"download-alt\"\n                              variant=\"secondary\"\n                              aria-label=\"export all\"\n                              disabled={!exportContactPointsAllowed}\n                              onClick={() => showExportDrawer(ALL_CONTACT_POINTS)}\n                            >\n                              Export all\n                            </Button>\n                          )}\n                        </Stack>\n                      </Stack>\n                      <ContactPointsList\n                        contactPoints={contactPoints}\n                        search={search}\n                        pageSize={DEFAULT_PAGE_SIZE}\n                        onDelete={(name) => showDeleteModal(name)}\n                        disabled={updateAlertmanagerState.isLoading}\n                      />\n                      {/* Grafana manager Alertmanager does not support global config, Mimir and Cortex do */}\n                      {!isGrafanaManagedAlertmanager && <GlobalConfigAlert alertManagerName={selectedAlertmanager!} />}\n                    </>\n                  )}\n                </>\n              )}\n              {/* Notification Templates tab */}\n              {showNotificationTemplates && (\n                <>\n                  <Stack direction=\"row\" alignItems=\"center\">\n                    <Text variant=\"body\" color=\"secondary\">\n                      Create notification templates to customize your notifications.\n                    </Text>\n                    <Spacer />\n                    {createTemplateSupported && (\n                      <LinkButton\n                        icon=\"plus\"\n                        variant=\"primary\"\n                        href=\"/alerting/notifications/templates/new\"\n                        disabled={!createTemplateAllowed}\n                      >\n                        Add notification template\n                      </LinkButton>\n                    )}\n                  </Stack>\n                  <NotificationTemplates />\n                </>\n              )}\n            </>\n          </Stack>\n        </TabContent>\n      </Stack>\n      {DeleteModal}\n      {ExportDrawer}\n    </>\n  );\n};\n\ninterface ContactPointsListProps {\n  contactPoints: ContactPointWithMetadata[];\n  search?: string;\n  disabled?: boolean;\n  onDelete: (name: string) => void;\n  pageSize?: number;\n}\n\nconst ContactPointsList = ({\n  contactPoints,\n  disabled = false,\n  search,\n  pageSize = DEFAULT_PAGE_SIZE,\n  onDelete,\n}: ContactPointsListProps) => {\n  const searchResults = useContactPointsSearch(contactPoints, search);\n  const { page, pageItems, numberOfPages, onPageChange } = usePagination(searchResults, 1, pageSize);\n\n  return (\n    <>\n      {pageItems.map((contactPoint, index) => {\n        const provisioned = isProvisioned(contactPoint);\n        const policies = contactPoint.policies ?? [];\n        const key = `${contactPoint.name}-${index}`;\n\n        return (\n          <ContactPoint\n            key={key}\n            name={contactPoint.name}\n            disabled={disabled}\n            onDelete={onDelete}\n            receivers={contactPoint.grafana_managed_receiver_configs}\n            provisioned={provisioned}\n            policies={policies}\n          />\n        );\n      })}\n      <Pagination currentPage={page} numberOfPages={numberOfPages} onNavigate={onPageChange} hideWhenSinglePage />\n    </>\n  );\n};\n\nconst fuzzyFinder = new uFuzzy({\n  intraMode: 1,\n  intraIns: 1,\n  intraSub: 1,\n  intraDel: 1,\n  intraTrn: 1,\n});\n\n// let's search in two different haystacks, the name of the contact point and the type of the receiver(s)\nfunction useContactPointsSearch(\n  contactPoints: ContactPointWithMetadata[],\n  search?: string\n): ContactPointWithMetadata[] {\n  const nameHaystack = useMemo(() => {\n    return contactPoints.map((contactPoint) => contactPoint.name);\n  }, [contactPoints]);\n\n  const typeHaystack = useMemo(() => {\n    return contactPoints.map((contactPoint) =>\n      // we're using the resolved metadata key here instead of the \"type\" property – ex. we alias \"teams\" to \"microsoft teams\"\n      contactPoint.grafana_managed_receiver_configs.map((receiver) => receiver[RECEIVER_META_KEY].name).join(' ')\n    );\n  }, [contactPoints]);\n\n  if (!search) {\n    return contactPoints;\n  }\n\n  const nameHits = fuzzyFinder.filter(nameHaystack, search) ?? [];\n  const typeHits = fuzzyFinder.filter(typeHaystack, search) ?? [];\n\n  const hits = [...nameHits, ...typeHits];\n\n  return uniq(hits).map((id) => contactPoints[id]) ?? [];\n}\n\ninterface ContactPointProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  receivers: ReceiverConfigWithMetadata[];\n  policies?: RouteReference[];\n  onDelete: (name: string) => void;\n}\n\nexport const ContactPoint = ({\n  name,\n  disabled = false,\n  provisioned = false,\n  receivers,\n  policies = [],\n  onDelete,\n}: ContactPointProps) => {\n  const styles = useStyles2(getStyles);\n\n  // TODO probably not the best way to figure out if we want to show either only the summary or full metadata for the receivers?\n  const showFullMetadata = receivers.some((receiver) => Boolean(receiver[RECEIVER_STATUS_KEY]));\n\n  return (\n    <div className={styles.contactPointWrapper} data-testid=\"contact-point\">\n      <Stack direction=\"column\" gap={0}>\n        <ContactPointHeader\n          name={name}\n          policies={policies}\n          provisioned={provisioned}\n          disabled={disabled}\n          onDelete={onDelete}\n        />\n        {showFullMetadata ? (\n          <div>\n            {receivers.map((receiver, index) => {\n              const diagnostics = receiver[RECEIVER_STATUS_KEY];\n              const metadata = receiver[RECEIVER_META_KEY];\n              const sendingResolved = !Boolean(receiver.disableResolveMessage);\n              const pluginMetadata = receiver[RECEIVER_PLUGIN_META_KEY];\n              const key = metadata.name + index;\n\n              return (\n                <ContactPointReceiver\n                  key={key}\n                  name={metadata.name}\n                  type={receiver.type}\n                  description={getReceiverDescription(receiver)}\n                  diagnostics={diagnostics}\n                  pluginMetadata={pluginMetadata}\n                  sendingResolved={sendingResolved}\n                />\n              );\n            })}\n          </div>\n        ) : (\n          <div className={styles.integrationWrapper}>\n            <ContactPointReceiverSummary receivers={receivers} />\n          </div>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\ninterface ContactPointHeaderProps {\n  name: string;\n  disabled?: boolean;\n  provisioned?: boolean;\n  policies?: RouteReference[];\n  onDelete: (name: string) => void;\n}\n\nconst ContactPointHeader = (props: ContactPointHeaderProps) => {\n  const { name, disabled = false, provisioned = false, policies = [], onDelete } = props;\n  const styles = useStyles2(getStyles);\n\n  const [exportSupported, exportAllowed] = useAlertmanagerAbility(AlertmanagerAction.ExportContactPoint);\n  const [editSupported, editAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n  const [deleteSupported, deleteAllowed] = useAlertmanagerAbility(AlertmanagerAction.UpdateContactPoint);\n\n  const [ExportDrawer, openExportDrawer] = useExportContactPoint();\n\n  const numberOfPolicies = policies.length;\n  const isReferencedByAnyPolicy = numberOfPolicies > 0;\n  const isReferencedByRegularPolicies = policies.some((ref) => ref.route.type !== 'auto-generated');\n\n  const canEdit = editSupported && editAllowed && !provisioned;\n  const canDelete = deleteSupported && deleteAllowed && !provisioned && !isReferencedByRegularPolicies;\n\n  const menuActions: JSX.Element[] = [];\n\n  if (exportSupported) {\n    menuActions.push(\n      <Fragment key=\"export-contact-point\">\n        <Menu.Item\n          icon=\"download-alt\"\n          label=\"Export\"\n          ariaLabel=\"export\"\n          disabled={!exportAllowed}\n          data-testid=\"export\"\n          onClick={() => openExportDrawer(name)}\n        />\n        <Menu.Divider />\n      </Fragment>\n    );\n  }\n\n  if (deleteSupported) {\n    menuActions.push(\n      <ConditionalWrap\n        key=\"delete-contact-point\"\n        shouldWrap={!canDelete}\n        wrap={(children) => (\n          <Tooltip content=\"Contact point is currently in use by one or more notification policies\" placement=\"top\">\n            <span>{children}</span>\n          </Tooltip>\n        )}\n      >\n        <Menu.Item\n          label=\"Delete\"\n          ariaLabel=\"delete\"\n          icon=\"trash-alt\"\n          destructive\n          disabled={disabled || !canDelete}\n          onClick={() => onDelete(name)}\n        />\n      </ConditionalWrap>\n    );\n  }\n\n  return (\n    <div className={styles.headerWrapper}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        <Stack alignItems=\"center\" gap={1}>\n          <Text variant=\"body\" weight=\"medium\">\n            {name}\n          </Text>\n        </Stack>\n        {isReferencedByAnyPolicy && (\n          <MetaText>\n            <Link to={createUrl('/alerting/routes', { contactPoint: name })}>\n              is used by <Strong>{numberOfPolicies}</Strong> {pluralize('notification policy', numberOfPolicies)}\n            </Link>\n          </MetaText>\n        )}\n        {provisioned && <ProvisioningBadge />}\n        {!isReferencedByAnyPolicy && <UnusedContactPointBadge />}\n        <Spacer />\n        <LinkButton\n          tooltipPlacement=\"top\"\n          tooltip={provisioned ? 'Provisioned contact points cannot be edited in the UI' : undefined}\n          variant=\"secondary\"\n          size=\"sm\"\n          icon={canEdit ? 'pen' : 'eye'}\n          type=\"button\"\n          disabled={disabled}\n          aria-label={`${canEdit ? 'edit' : 'view'}-action`}\n          data-testid={`${canEdit ? 'edit' : 'view'}-action`}\n          href={`/alerting/notifications/receivers/${encodeURIComponent(name)}/edit`}\n        >\n          {canEdit ? 'Edit' : 'View'}\n        </LinkButton>\n        {menuActions.length > 0 && (\n          <Dropdown overlay={<Menu>{menuActions}</Menu>}>\n            <MoreButton />\n          </Dropdown>\n        )}\n      </Stack>\n      {ExportDrawer}\n    </div>\n  );\n};\n\ninterface ContactPointReceiverProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  sendingResolved?: boolean;\n  diagnostics?: NotifierStatus;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nconst ContactPointReceiver = (props: ContactPointReceiverProps) => {\n  const { name, type, description, diagnostics, pluginMetadata, sendingResolved = true } = props;\n  const styles = useStyles2(getStyles);\n\n  const hasMetadata = diagnostics !== undefined;\n\n  return (\n    <div className={styles.integrationWrapper}>\n      <Stack direction=\"column\" gap={0.5}>\n        <ContactPointReceiverTitleRow\n          name={name}\n          type={type}\n          description={description}\n          pluginMetadata={pluginMetadata}\n        />\n        {hasMetadata && <ContactPointReceiverMetadataRow diagnostics={diagnostics} sendingResolved={sendingResolved} />}\n      </Stack>\n    </div>\n  );\n};\n\nexport interface ContactPointReceiverTitleRowProps {\n  name: string;\n  type: GrafanaNotifierType | string;\n  description?: ReactNode;\n  pluginMetadata?: ReceiverPluginMetadata;\n}\n\nexport function ContactPointReceiverTitleRow(props: ContactPointReceiverTitleRowProps) {\n  const { name, type, description, pluginMetadata } = props;\n\n  const iconName = INTEGRATION_ICONS[type];\n\n  return (\n    <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n        {iconName && <Icon name={iconName} />}\n        {pluginMetadata ? (\n          <ReceiverMetadataBadge metadata={pluginMetadata} />\n        ) : (\n          <Text variant=\"body\" color=\"primary\">\n            {name}\n          </Text>\n        )}\n      </Stack>\n      {description && (\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          {description}\n        </Text>\n      )}\n    </Stack>\n  );\n}\n\ninterface ContactPointReceiverMetadata {\n  sendingResolved: boolean;\n  diagnostics: NotifierStatus;\n}\n\ntype ContactPointReceiverSummaryProps = {\n  receivers: GrafanaManagedReceiverConfig[];\n};\n\n/**\n * This summary is used when we're dealing with non-Grafana managed alertmanager since they\n * don't have any metadata worth showing other than a summary of what types are configured for the contact point\n */\nexport const ContactPointReceiverSummary = ({ receivers }: ContactPointReceiverSummaryProps) => {\n  const countByType = groupBy(receivers, (receiver) => receiver.type);\n\n  return (\n    <Stack direction=\"column\" gap={0}>\n      <Stack direction=\"row\" alignItems=\"center\" gap={1}>\n        {Object.entries(countByType).map(([type, receivers], index) => {\n          const iconName = INTEGRATION_ICONS[type];\n          const receiverName = receiverTypeNames[type] ?? upperFirst(type);\n          const isLastItem = size(countByType) - 1 === index;\n\n          return (\n            <React.Fragment key={type}>\n              <Stack direction=\"row\" alignItems=\"center\" gap={0.5}>\n                {iconName && <Icon name={iconName} />}\n                <Text variant=\"body\">\n                  {receiverName}\n                  {receivers.length > 1 && <> ({receivers.length})</>}\n                </Text>\n              </Stack>\n              {!isLastItem && '⋅'}\n            </React.Fragment>\n          );\n        })}\n      </Stack>\n    </Stack>\n  );\n};\n\nconst ContactPointReceiverMetadataRow = ({ diagnostics, sendingResolved }: ContactPointReceiverMetadata) => {\n  const styles = useStyles2(getStyles);\n\n  const failedToSend = Boolean(diagnostics.lastNotifyAttemptError);\n  const lastDeliveryAttempt = dateTime(diagnostics.lastNotifyAttempt);\n  const lastDeliveryAttemptDuration = diagnostics.lastNotifyAttemptDuration;\n  const hasDeliveryAttempt = lastDeliveryAttempt.isValid();\n\n  return (\n    <div className={styles.metadataRow}>\n      <Stack direction=\"row\" gap={1}>\n        {/* this is shown when the last delivery failed – we don't show any additional metadata */}\n        {failedToSend ? (\n          <>\n            <MetaText color=\"error\" icon=\"exclamation-circle\">\n              <Tooltip content={diagnostics.lastNotifyAttemptError!}>\n                <span>Last delivery attempt failed</span>\n              </Tooltip>\n            </MetaText>\n          </>\n        ) : (\n          <>\n            {/* this is shown when we have a last delivery attempt */}\n            {hasDeliveryAttempt && (\n              <>\n                <MetaText icon=\"clock-nine\">\n                  Last delivery attempt{' '}\n                  <Tooltip content={lastDeliveryAttempt.toLocaleString()}>\n                    <span>\n                      <Strong>{lastDeliveryAttempt.locale('en').fromNow()}</Strong>\n                    </span>\n                  </Tooltip>\n                </MetaText>\n                <MetaText icon=\"stopwatch\">\n                  took <Strong>{lastDeliveryAttemptDuration}</Strong>\n                </MetaText>\n              </>\n            )}\n            {/* when we have no last delivery attempt */}\n            {!hasDeliveryAttempt && <MetaText icon=\"clock-nine\">No delivery attempts</MetaText>}\n            {/* this is only shown for contact points that only want \"firing\" updates */}\n            {!sendingResolved && (\n              <MetaText icon=\"info-circle\">\n                Delivering <Strong>only firing</Strong> notifications\n              </MetaText>\n            )}\n          </>\n        )}\n      </Stack>\n    </div>\n  );\n};\n\nconst ALL_CONTACT_POINTS = Symbol('all contact points');\n\ntype ExportProps = [JSX.Element | null, (receiver: string | typeof ALL_CONTACT_POINTS) => void];\n\nconst useExportContactPoint = (): ExportProps => {\n  const [receiverName, setReceiverName] = useState<string | typeof ALL_CONTACT_POINTS | null>(null);\n  const [isExportDrawerOpen, toggleShowExportDrawer] = useToggle(false);\n  const [decryptSecretsSupported, decryptSecretsAllowed] = useAlertmanagerAbility(AlertmanagerAction.DecryptSecrets);\n\n  const canReadSecrets = decryptSecretsSupported && decryptSecretsAllowed;\n\n  const handleClose = useCallback(() => {\n    setReceiverName(null);\n    toggleShowExportDrawer(false);\n  }, [toggleShowExportDrawer]);\n\n  const handleOpen = (receiverName: string | typeof ALL_CONTACT_POINTS) => {\n    setReceiverName(receiverName);\n    toggleShowExportDrawer(true);\n  };\n\n  const drawer = useMemo(() => {\n    if (!receiverName || !isExportDrawerOpen) {\n      return null;\n    }\n\n    if (receiverName === ALL_CONTACT_POINTS) {\n      // use this drawer when we want to export all contact points\n      return <GrafanaReceiversExporter decrypt={canReadSecrets} onClose={handleClose} />;\n    } else {\n      // use this one for exporting a single contact point\n      return <GrafanaReceiverExporter receiverName={receiverName} decrypt={canReadSecrets} onClose={handleClose} />;\n    }\n  }, [canReadSecrets, isExportDrawerOpen, handleClose, receiverName]);\n\n  return [drawer, handleOpen];\n};\n\nconst getContactPointsFilters = (searchParams: URLSearchParams) => ({\n  search: searchParams.get('search') ?? undefined,\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  contactPointWrapper: css({\n    borderRadius: `${theme.shape.radius.default}`,\n    border: `solid 1px ${theme.colors.border.weak}`,\n    borderBottom: 'none',\n  }),\n  integrationWrapper: css({\n    position: 'relative',\n\n    background: `${theme.colors.background.primary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n  }),\n  headerWrapper: css({\n    background: `${theme.colors.background.secondary}`,\n    padding: `${theme.spacing(1)} ${theme.spacing(1.5)}`,\n\n    borderBottom: `solid 1px ${theme.colors.border.weak}`,\n    borderTopLeftRadius: `${theme.shape.radius.default}`,\n    borderTopRightRadius: `${theme.shape.radius.default}`,\n  }),\n  metadataRow: css({\n    borderBottomLeftRadius: `${theme.shape.radius.default}`,\n    borderBottomRightRadius: `${theme.shape.radius.default}`,\n  }),\n});\n\nexport default ContactPoints;\n","/**\n * This hook will combine data from both the Alertmanager config\n * and (if available) it will also fetch the status from the Grafana Managed status endpoint\n */\n\nimport { produce } from 'immer';\nimport { remove } from 'lodash';\n\nimport { alertmanagerApi } from '../../api/alertmanagerApi';\nimport { onCallApi, OnCallIntegrationDTO } from '../../api/onCallApi';\nimport { usePluginBridge } from '../../hooks/usePluginBridge';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { SupportedPlugin } from '../../types/pluginBridges';\n\nimport { enhanceContactPointsWithMetadata } from './utils';\n\nexport const RECEIVER_STATUS_KEY = Symbol('receiver_status');\nexport const RECEIVER_META_KEY = Symbol('receiver_metadata');\nexport const RECEIVER_PLUGIN_META_KEY = Symbol('receiver_plugin_metadata');\n\nconst RECEIVER_STATUS_POLLING_INTERVAL = 10 * 1000; // 10 seconds\n\n/**\n * This hook will combine data from several endpoints;\n * 1. the alertmanager config endpoint where the definition of the receivers are\n * 2. (if available) the alertmanager receiver status endpoint, currently Grafana Managed only\n * 3. (if available) additional metadata about Grafana Managed contact points\n * 4. (if available) the OnCall plugin metadata\n */\ninterface UseContactPointsWithStatusOptions {\n  includePoliciesCount: boolean;\n  receiverStatusPollingInterval?: number;\n}\n\nconst defaultHookOptions = {\n  includePoliciesCount: true,\n  receiverStatusPollingInterval: RECEIVER_STATUS_POLLING_INTERVAL,\n};\n\nexport function useContactPointsWithStatus({\n  includePoliciesCount,\n  receiverStatusPollingInterval,\n}: UseContactPointsWithStatusOptions = defaultHookOptions) {\n  const { selectedAlertmanager, isGrafanaAlertmanager } = useAlertmanager();\n  const { installed: onCallPluginInstalled, loading: onCallPluginStatusLoading } = usePluginBridge(\n    SupportedPlugin.OnCall\n  );\n\n  // fetch receiver status if we're dealing with a Grafana Managed Alertmanager\n  const fetchContactPointsStatus = alertmanagerApi.endpoints.getContactPointsStatus.useQuery(undefined, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n    // re-fetch status every so often for up-to-date information, allow disabling by passing \"receiverStatusPollingInterval: 0\"\n    pollingInterval: receiverStatusPollingInterval,\n    // skip fetching receiver statuses if not Grafana AM\n    skip: !isGrafanaAlertmanager,\n  });\n\n  // fetch notifier metadata from the Grafana API if we're using a Grafana AM – this will be used to add additional\n  // metadata and canonical names to the receiver\n  const fetchReceiverMetadata = alertmanagerApi.endpoints.grafanaNotifiers.useQuery(undefined, {\n    skip: !isGrafanaAlertmanager,\n  });\n\n  // if the OnCall plugin is installed, fetch its list of integrations so we can match those to the Grafana Managed contact points\n  const { data: onCallIntegrations, isLoading: onCallPluginIntegrationsLoading } =\n    onCallApi.endpoints.grafanaOnCallIntegrations.useQuery(undefined, {\n      skip: !onCallPluginInstalled || !isGrafanaAlertmanager,\n    });\n\n  // null = no installed, undefined = loading, [n] is installed with integrations\n  let onCallMetadata: null | undefined | OnCallIntegrationDTO[] = undefined;\n  if (onCallPluginInstalled) {\n    onCallMetadata = onCallIntegrations ?? [];\n  } else if (onCallPluginInstalled === false) {\n    onCallMetadata = null;\n  }\n\n  // fetch the latest config from the Alertmanager\n  // we use this endpoint only when we need to get the number of policies\n  const fetchAlertmanagerConfiguration = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(\n    selectedAlertmanager!,\n    {\n      refetchOnFocus: true,\n      refetchOnReconnect: true,\n      selectFromResult: (result) => ({\n        ...result,\n        contactPoints: result.data\n          ? enhanceContactPointsWithMetadata(\n              fetchContactPointsStatus.data,\n              fetchReceiverMetadata.data,\n              onCallMetadata,\n              result.data.alertmanager_config.receivers ?? [],\n              result.data\n            )\n          : [],\n      }),\n      skip: !includePoliciesCount,\n    }\n  );\n\n  // for Grafana Managed Alertmanager, we use the new read-only endpoint for getting the list of contact points\n  const fetchGrafanaContactPoints = alertmanagerApi.endpoints.getContactPointsList.useQuery(undefined, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n    selectFromResult: (result) => ({\n      ...result,\n      contactPoints: result.data\n        ? enhanceContactPointsWithMetadata(\n            fetchContactPointsStatus.data,\n            fetchReceiverMetadata.data,\n            onCallMetadata,\n            result.data, // contact points from the new readonly endpoint\n            undefined //no config data\n          )\n        : [],\n    }),\n    skip: includePoliciesCount || !isGrafanaAlertmanager,\n  });\n\n  // we will fail silently for fetching OnCall plugin status and integrations\n  const error =\n    fetchAlertmanagerConfiguration.error || fetchGrafanaContactPoints.error || fetchContactPointsStatus.error;\n  const isLoading =\n    fetchAlertmanagerConfiguration.isLoading ||\n    fetchGrafanaContactPoints.isLoading ||\n    fetchContactPointsStatus.isLoading ||\n    onCallPluginStatusLoading ||\n    onCallPluginIntegrationsLoading;\n\n  const unsortedContactPoints = includePoliciesCount\n    ? fetchAlertmanagerConfiguration.contactPoints\n    : fetchGrafanaContactPoints.contactPoints;\n  const contactPoints = unsortedContactPoints.sort((a, b) => a.name.localeCompare(b.name));\n  return {\n    error,\n    isLoading,\n    contactPoints,\n    refetchReceivers: fetchGrafanaContactPoints.refetch,\n  };\n}\n\nexport function useDeleteContactPoint(selectedAlertmanager: string) {\n  const [fetchAlertmanagerConfig] = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useLazyQuery();\n  const [updateAlertManager, updateAlertmanagerState] =\n    alertmanagerApi.endpoints.updateAlertmanagerConfiguration.useMutation();\n\n  const deleteTrigger = (contactPointName: string) => {\n    return fetchAlertmanagerConfig(selectedAlertmanager).then(({ data }) => {\n      if (!data) {\n        return;\n      }\n\n      const newConfig = produce(data, (draft) => {\n        remove(draft?.alertmanager_config?.receivers ?? [], (receiver) => receiver.name === contactPointName);\n        return draft;\n      });\n\n      return updateAlertManager({\n        selectedAlertmanager,\n        config: newConfig,\n      }).unwrap();\n    });\n  };\n\n  return {\n    deleteTrigger,\n    updateAlertmanagerState,\n  };\n}\n","import { isEmpty, times } from 'lodash';\n\nimport { GrafanaManagedReceiverConfig, Receiver } from 'app/plugins/datasource/alertmanager/types';\n\n/**\n * This function will extract the integrations that have been defined for either grafana managed contact point\n * or vanilla Alertmanager receiver.\n *\n * It will attempt to normalize the data structure to how they have been defined for Grafana managed contact points.\n * That way we can work with the same data structure in the UI.\n *\n * We don't normalize the configuration settings and those are blank for vanilla Alertmanager receivers.\n *\n * Example input:\n *  { name: 'my receiver', email_configs: [{ from: \"foo@bar.com\" }] }\n *\n * Example output:\n *  { name: 'my receiver', grafana_managed_receiver_configs: [{ type: 'email', settings: {} }] }\n */\nexport function extractReceivers(receiver: Receiver): GrafanaManagedReceiverConfig[] {\n  if ('grafana_managed_receiver_configs' in receiver) {\n    return receiver.grafana_managed_receiver_configs ?? [];\n  }\n\n  const integrations = Object.entries(receiver)\n    .filter(([key]) => key !== 'grafana_managed_receiver_configs' && key.endsWith('_configs'))\n    .filter(([_, value]) => Array.isArray(value) && !isEmpty(value))\n    .reduce((acc: GrafanaManagedReceiverConfig[], [key, value]) => {\n      const type = key.replace('_configs', '');\n\n      const configs = times(value.length, () => ({\n        name: receiver.name,\n        type: type,\n        settings: [], // we don't normalize the configuration values\n        disableResolveMessage: false,\n      }));\n\n      return acc.concat(configs);\n    }, []);\n\n  return integrations;\n}\n","import { GrafanaManagedReceiverConfig } from '../../../../../../plugins/datasource/alertmanager/types';\nimport { OnCallIntegrationDTO } from '../../../api/onCallApi';\nimport { SupportedPlugin } from '../../../types/pluginBridges';\nimport { createBridgeURL } from '../../PluginBridge';\n\nimport { GRAFANA_APP_RECEIVERS_SOURCE_IMAGE } from './types';\n\nexport interface ReceiverPluginMetadata {\n  icon: string;\n  title: string;\n  description?: string;\n  externalUrl?: string;\n  warning?: string;\n}\n\nconst onCallReceiverICon = GRAFANA_APP_RECEIVERS_SOURCE_IMAGE[SupportedPlugin.OnCall];\nconst onCallReceiverTitle = 'Grafana OnCall';\n\nconst onCallReceiverMeta: ReceiverPluginMetadata = {\n  title: onCallReceiverTitle,\n  icon: onCallReceiverICon,\n};\n\nexport function getOnCallMetadata(\n  onCallIntegrations: OnCallIntegrationDTO[] | undefined | null,\n  receiver: GrafanaManagedReceiverConfig\n): ReceiverPluginMetadata {\n  // oncall status is still loading\n  if (onCallIntegrations === undefined) {\n    return onCallReceiverMeta;\n  }\n\n  // indication that onCall is not enabled\n  if (onCallIntegrations == null) {\n    return {\n      ...onCallReceiverMeta,\n      warning: 'Grafana OnCall is not installed or is disabled',\n    };\n  }\n\n  const matchingOnCallIntegration = onCallIntegrations.find(\n    (integration) => integration.integration_url === receiver.settings?.url\n  );\n\n  return {\n    ...onCallReceiverMeta,\n    description: matchingOnCallIntegration?.display_name,\n    externalUrl: matchingOnCallIntegration\n      ? createBridgeURL(SupportedPlugin.OnCall, `/integrations/${matchingOnCallIntegration.value}`)\n      : undefined,\n    warning: matchingOnCallIntegration ? undefined : 'OnCall Integration no longer exists',\n  };\n}\n","import { difference, groupBy, take, trim, upperFirst } from 'lodash';\nimport { ReactNode } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport {\n  AlertManagerCortexConfig,\n  GrafanaManagedContactPoint,\n  GrafanaManagedReceiverConfig,\n  MatcherOperator,\n  Receiver,\n  Route,\n} from 'app/plugins/datasource/alertmanager/types';\nimport { NotifierDTO, NotifierStatus, ReceiversStateDTO } from 'app/types';\n\nimport { OnCallIntegrationDTO } from '../../api/onCallApi';\nimport { computeInheritedTree } from '../../utils/notification-policies';\nimport { extractReceivers } from '../../utils/receivers';\nimport { ReceiverTypes } from '../receivers/grafanaAppReceivers/onCall/onCall';\nimport { getOnCallMetadata, ReceiverPluginMetadata } from '../receivers/grafanaAppReceivers/useReceiversMetadata';\n\nimport { RECEIVER_META_KEY, RECEIVER_PLUGIN_META_KEY, RECEIVER_STATUS_KEY } from './useContactPoints';\n\nconst AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY = '__grafana_receiver__';\n\nexport function isProvisioned(contactPoint: GrafanaManagedContactPoint) {\n  // for some reason the provenance is on the receiver and not the entire contact point\n  const provenance = contactPoint.grafana_managed_receiver_configs?.find((receiver) => receiver.provenance)?.provenance;\n\n  return Boolean(provenance);\n}\n\n// TODO we should really add some type information to these receiver settings...\nexport function getReceiverDescription(receiver: ReceiverConfigWithMetadata): ReactNode | undefined {\n  if (!receiver.settings) {\n    return undefined;\n  }\n  switch (receiver.type) {\n    case 'email': {\n      const hasEmailAddresses = 'addresses' in receiver.settings; // when dealing with alertmanager email_configs we don't normalize the settings\n      return hasEmailAddresses ? summarizeEmailAddresses(receiver.settings['addresses']) : undefined;\n    }\n    case 'slack': {\n      const recipient: string | undefined = receiver.settings['recipient'];\n      if (!recipient) {\n        return;\n      }\n\n      // Slack channel name might have a \"#\" in the recipient already\n      const channelName = recipient.replace(/^#/, '');\n      return `#${channelName}`;\n    }\n    case 'kafka': {\n      const topicName: string | undefined = receiver.settings['kafkaTopic'];\n      return topicName;\n    }\n    case 'webhook': {\n      const url: string | undefined = receiver.settings['url'];\n      return url;\n    }\n    case ReceiverTypes.OnCall: {\n      return receiver[RECEIVER_PLUGIN_META_KEY]?.description;\n    }\n    default:\n      return receiver[RECEIVER_META_KEY]?.description;\n  }\n}\n\n// input: foo+1@bar.com, foo+2@bar.com, foo+3@bar.com, foo+4@bar.com\n// output: foo+1@bar.com, foo+2@bar.com, +2 more\nexport function summarizeEmailAddresses(addresses: string): string {\n  const MAX_ADDRESSES_SHOWN = 3;\n  const SUPPORTED_SEPARATORS = /,|;|\\n+/g;\n\n  // split all email addresses\n  const emails = addresses.trim().split(SUPPORTED_SEPARATORS).map(trim);\n\n  // grab the first 3 and the rest\n  const summary = take(emails, MAX_ADDRESSES_SHOWN);\n  const rest = difference(emails, summary);\n\n  if (rest.length) {\n    summary.push(`+${rest.length} more`);\n  }\n\n  return summary.join(', ');\n}\n\n// Grafana Managed contact points have receivers with additional diagnostics\nexport interface ReceiverConfigWithMetadata extends GrafanaManagedReceiverConfig {\n  // we're using a symbol here so we'll never have a conflict on keys for a receiver\n  // we also specify that the diagnostics might be \"undefined\" for vanilla Alertmanager\n  [RECEIVER_STATUS_KEY]?: NotifierStatus | undefined;\n  [RECEIVER_META_KEY]: {\n    name: string;\n    description?: string;\n  };\n  // optional metadata that comes from a particular plugin (like Grafana OnCall)\n  [RECEIVER_PLUGIN_META_KEY]?: ReceiverPluginMetadata;\n}\n\nexport interface ContactPointWithMetadata extends GrafanaManagedContactPoint {\n  policies?: RouteReference[]; // now is optional as we don't have the data from the read-only endpoint\n  grafana_managed_receiver_configs: ReceiverConfigWithMetadata[];\n}\n\n/**\n * This function adds the status information for each of the integrations (contact point types) in a contact point\n * 1. we iterate over all contact points\n * 2. for each contact point we \"enhance\" it with the status or \"undefined\" for vanilla Alertmanager\n * contactPoints: list of contact points\n * alertmanagerConfiguration: optional as is passed when we need to get number of policies for each contact point\n * and we prefer using the data from the read-only endpoint.\n */\nexport function enhanceContactPointsWithMetadata(\n  status: ReceiversStateDTO[] = [],\n  notifiers: NotifierDTO[] = [],\n  onCallIntegrations: OnCallIntegrationDTO[] | undefined | null,\n  contactPoints: Receiver[],\n  alertmanagerConfiguration?: AlertManagerCortexConfig\n): ContactPointWithMetadata[] {\n  // compute the entire inherited tree before finding what notification policies are using a particular contact point\n  const fullyInheritedTree = computeInheritedTree(alertmanagerConfiguration?.alertmanager_config?.route ?? {});\n  const usedContactPoints = getUsedContactPoints(fullyInheritedTree);\n  const usedContactPointsByName = groupBy(usedContactPoints, 'receiver');\n\n  const contactPointsList = alertmanagerConfiguration\n    ? alertmanagerConfiguration?.alertmanager_config.receivers ?? []\n    : contactPoints ?? [];\n\n  return contactPointsList.map((contactPoint) => {\n    const receivers = extractReceivers(contactPoint);\n    const statusForReceiver = status.find((status) => status.name === contactPoint.name);\n\n    return {\n      ...contactPoint,\n      policies:\n        alertmanagerConfiguration && usedContactPointsByName && (usedContactPointsByName[contactPoint.name] ?? []),\n      grafana_managed_receiver_configs: receivers.map((receiver, index) => {\n        const isOnCallReceiver = receiver.type === ReceiverTypes.OnCall;\n        return {\n          ...receiver,\n          [RECEIVER_STATUS_KEY]: statusForReceiver?.integrations[index],\n          [RECEIVER_META_KEY]: getNotifierMetadata(notifiers, receiver),\n          // if OnCall plugin is installed, we'll add it to the receiver's plugin metadata\n          [RECEIVER_PLUGIN_META_KEY]: isOnCallReceiver ? getOnCallMetadata(onCallIntegrations, receiver) : undefined,\n        };\n      }),\n    };\n  });\n}\n\nexport function isAutoGeneratedPolicy(route: Route) {\n  const simplifiedRoutingToggleEnabled = config.featureToggles.alertingSimplifiedRouting ?? false;\n  if (!simplifiedRoutingToggleEnabled) {\n    return false;\n  }\n  if (!route.object_matchers) {\n    return false;\n  }\n  return (\n    route.object_matchers.some((objectMatcher) => {\n      return (\n        objectMatcher[0] === AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY && objectMatcher[1] === MatcherOperator.equal\n      );\n    }) ?? false\n  );\n}\n\nexport interface RouteReference {\n  receiver: string;\n  route: {\n    type: 'auto-generated' | 'normal';\n  };\n}\n\nexport function getUsedContactPoints(route: Route): RouteReference[] {\n  const childrenContactPoints = route.routes?.flatMap((route) => getUsedContactPoints(route)) ?? [];\n\n  if (route.receiver) {\n    return [\n      {\n        receiver: route.receiver,\n        route: {\n          type: isAutoGeneratedPolicy(route) ? 'auto-generated' : 'normal',\n        },\n      },\n      ...childrenContactPoints,\n    ];\n  }\n\n  return childrenContactPoints;\n}\n\nfunction getNotifierMetadata(notifiers: NotifierDTO[], receiver: GrafanaManagedReceiverConfig) {\n  const match = notifiers.find((notifier) => notifier.type === receiver.type);\n\n  return {\n    name: match?.name ?? upperFirst(receiver.type),\n    description: match?.description,\n  };\n}\n","import type { Monaco } from '@grafana/ui';\n\nimport { AlertmanagerTemplateFunction } from './language';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\nexport function getAlertManagerSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Function;\n  return [\n    {\n      label: AlertmanagerTemplateFunction.toUpper,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.toLower,\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.title,\n      documentation: 'Capitalizes the first letter of each word',\n      detail: 'function(s string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.join,\n      documentation: { value: 'Joins an array of strings using the separator provided.' },\n      detail: 'function(separator string, s []string)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.match,\n      detail: 'function',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.safeHtml,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.reReplaceAll,\n      detail: 'function(pattern, repl, text)',\n      kind,\n    },\n    {\n      label: AlertmanagerTemplateFunction.stringSlice,\n      detail: 'function(s ...string)',\n      kind,\n    },\n  ];\n}\n","import { concat } from 'lodash';\nimport type { languages, editor, Position, IRange, IDisposable } from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport type { Monaco } from '@grafana/ui';\n\nimport { getAlertManagerSuggestions } from './alertManagerSuggestions';\nimport { SuggestionDefinition } from './suggestionDefinition';\nimport {\n  getAlertsSuggestions,\n  getAlertSuggestions,\n  getGlobalSuggestions,\n  getKeyValueSuggestions,\n  getSnippetsSuggestions,\n} from './templateDataSuggestions';\n\nexport function registerGoTemplateAutocomplete(monaco: Monaco): IDisposable {\n  const goTemplateAutocompleteProvider: languages.CompletionItemProvider = {\n    triggerCharacters: ['.'],\n    provideCompletionItems(model, position, context): languages.ProviderResult<languages.CompletionList> {\n      const word = model.getWordUntilPosition(position);\n      const range = {\n        startLineNumber: position.lineNumber,\n        endLineNumber: position.lineNumber,\n        startColumn: word.startColumn,\n        endColumn: word.endColumn,\n      };\n\n      const completionProvider = new CompletionProvider(monaco, range);\n\n      const insideExpression = isInsideGoExpression(model, position);\n      if (!insideExpression) {\n        return completionProvider.getSnippetsSuggestions();\n      }\n\n      if (context.triggerKind === monaco.languages.CompletionTriggerKind.Invoke && !context.triggerCharacter) {\n        return completionProvider.getFunctionsSuggestions();\n      }\n\n      const wordBeforeDot = model.getWordUntilPosition({\n        lineNumber: position.lineNumber,\n        column: position.column - 1,\n      });\n\n      return completionProvider.getTemplateDataSuggestions(wordBeforeDot.word);\n    },\n  };\n\n  return monaco.languages.registerCompletionItemProvider('go-template', goTemplateAutocompleteProvider);\n}\n\nfunction isInsideGoExpression(model: editor.ITextModel, position: Position) {\n  const searchRange = {\n    startLineNumber: position.lineNumber,\n    endLineNumber: position.lineNumber,\n    startColumn: model.getLineMinColumn(position.lineNumber),\n    endColumn: model.getLineMaxColumn(position.lineNumber),\n  };\n\n  const goSyntaxRegex = '\\\\{\\\\{[a-zA-Z0-9._() \"]+\\\\}\\\\}';\n  const matches = model.findMatches(goSyntaxRegex, searchRange, true, false, null, true);\n\n  return matches.some((match) => match.range.containsPosition(position));\n}\n\nexport class CompletionProvider {\n  constructor(\n    private readonly monaco: Monaco,\n    private readonly range: IRange\n  ) {}\n\n  getSnippetsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getSnippetsSuggestions(this.monaco));\n  };\n\n  getFunctionsSuggestions = (): languages.ProviderResult<languages.CompletionList> => {\n    return this.getCompletionsFromDefinitions(getAlertManagerSuggestions(this.monaco));\n  };\n\n  getTemplateDataSuggestions = (wordContext: string): languages.ProviderResult<languages.CompletionList> => {\n    switch (wordContext) {\n      case '':\n        return this.getCompletionsFromDefinitions(getGlobalSuggestions(this.monaco), getAlertSuggestions(this.monaco));\n      case 'Alerts':\n        return this.getCompletionsFromDefinitions(getAlertsSuggestions(this.monaco));\n      case 'GroupLabels':\n      case 'CommonLabels':\n      case 'CommonAnnotations':\n      case 'Labels':\n      case 'Annotations':\n        return this.getCompletionsFromDefinitions(getKeyValueSuggestions(this.monaco));\n      default:\n        return { suggestions: [] };\n    }\n  };\n\n  private getCompletionsFromDefinitions = (...args: SuggestionDefinition[][]): languages.CompletionList => {\n    const allDefinitions = concat(...args);\n\n    return {\n      suggestions: allDefinitions.map((definition) => buildAutocompleteSuggestion(definition, this.range)),\n    };\n  };\n}\n\nfunction buildAutocompleteSuggestion(\n  { label, detail, documentation, kind, insertText }: SuggestionDefinition,\n  range: IRange\n): languages.CompletionItem {\n  const insertFallback = typeof label === 'string' ? label : label.label;\n  const labelObject = typeof label === 'string' ? { label: label, description: detail } : { ...label };\n\n  labelObject.description ??= detail;\n\n  return {\n    label: labelObject,\n    kind: kind,\n    insertText: insertText ?? insertFallback,\n    range,\n    documentation: documentation,\n    detail: detail,\n  };\n}\n","import { LanguageDefinition } from './register';\n\nexport const GO_TEMPLATE_LANGUAGE_ID = 'go-template';\n\nconst goTemplateLanguageDefinition: LanguageDefinition = {\n  id: GO_TEMPLATE_LANGUAGE_ID,\n  extensions: [],\n  aliases: [],\n  mimetypes: [],\n  loader: () => import('./language'),\n};\nexport default goTemplateLanguageDefinition;\n","import type * as monacoType from 'monaco-editor/esm/vs/editor/editor.api';\n\nimport { Monaco } from '@grafana/ui';\n\nexport type LanguageDefinition = {\n  id: string;\n  extensions: string[];\n  aliases: string[];\n  mimetypes: string[];\n  loader: () => Promise<{\n    language: monacoType.languages.IMonarchLanguage;\n    conf: monacoType.languages.LanguageConfiguration;\n  }>;\n};\n\nexport const registerLanguage = (\n  monaco: Monaco,\n  language: LanguageDefinition\n  // completionItemProvider: Completeable\n) => {\n  const { id, loader } = language;\n\n  const languages = monaco.languages.getLanguages();\n  if (languages.find((l) => l.id === id)) {\n    return;\n  }\n\n  monaco.languages.register({ id });\n  loader().then((monarch) => {\n    monaco.languages.setMonarchTokensProvider(id, monarch.language);\n    monaco.languages.setLanguageConfiguration(id, monarch.conf);\n    // monaco.languages.registerCompletionItemProvider(id, completionItemProvider.getCompletionProvider(monaco, language));\n  });\n};\n","/**\n * This file contains the template editor we'll be using for alertmanager templates.\n *\n * It includes auto-complete for template data and syntax highlighting\n */\nimport { editor, IDisposable } from 'monaco-editor';\nimport React, { useEffect, useRef } from 'react';\n\nimport { CodeEditor } from '@grafana/ui';\nimport { CodeEditorProps } from '@grafana/ui/src/components/Monaco/types';\n\nimport { registerGoTemplateAutocomplete } from './editor/autocomplete';\nimport goTemplateLanguageDefinition, { GO_TEMPLATE_LANGUAGE_ID } from './editor/definition';\nimport { registerLanguage } from './editor/register';\n\ntype TemplateEditorProps = Omit<CodeEditorProps, 'language' | 'theme'> & {\n  autoHeight?: boolean;\n};\n\nconst TemplateEditor = (props: TemplateEditorProps) => {\n  const shouldAutoHeight = Boolean(props.autoHeight);\n  const disposeSuggestions = useRef<IDisposable | null>(null);\n\n  const onEditorDidMount = (editor: editor.IStandaloneCodeEditor) => {\n    if (shouldAutoHeight) {\n      const contentHeight = editor.getContentHeight();\n\n      try {\n        // we're passing NaN in to the width because the type definition wants a number (NaN is a number, go figure)\n        // but the width could be defined as a string \"auto\", passing NaN seems to just ignore our width update here\n        editor.layout({ height: contentHeight, width: NaN });\n      } catch (err) {}\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      disposeSuggestions.current?.dispose();\n    };\n  }, []);\n\n  return (\n    <CodeEditor\n      showLineNumbers={true}\n      showMiniMap={false}\n      {...props}\n      onEditorDidMount={onEditorDidMount}\n      onBeforeEditorMount={(monaco) => {\n        registerLanguage(monaco, goTemplateLanguageDefinition);\n        disposeSuggestions.current = registerGoTemplateAutocomplete(monaco);\n      }}\n      language={GO_TEMPLATE_LANGUAGE_ID}\n    />\n  );\n};\n\nexport { TemplateEditor };\n","export const alertsLoopSnippet = `\n{{ range .Alerts }}\n  Status: {{ .Status }}\n  Starts at: {{ .StartsAt }}\n{{ end }}\n`;\n\nexport const alertDetailsSnippet = `\n[{{.Status}}] {{ .Labels.alertname }}\n\nLabels:\n{{ range .Labels.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n\n{{ if gt (len .Annotations) 0 }}\nAnnotations:\n{{ range .Annotations.SortedPairs }}\n  {{ .Name }}: {{ .Value }}\n{{ end }}\n{{ end }}\n\n{{ if gt (len .SilenceURL ) 0 }}\n  Silence alert: {{ .SilenceURL }}\n{{ end }}\n{{ if gt (len .DashboardURL ) 0 }}\n  Go to dashboard: {{ .DashboardURL }}\n{{ end }}\n`;\n\nexport const groupLabelsLoopSnippet = getKeyValueTemplate('GroupLabels.SortedPairs');\nexport const commonLabelsLoopSnippet = getKeyValueTemplate('CommonLabels.SortedPairs');\nexport const commonAnnotationsLoopSnippet = getKeyValueTemplate('CommonAnnotations.SortedPairs');\nexport const labelsLoopSnippet = getKeyValueTemplate('Labels.SortedPairs');\nexport const annotationsLoopSnippet = getKeyValueTemplate('Annotations.SortedPairs');\n\nfunction getKeyValueTemplate(arrayName: string) {\n  return `\n{{ range .${arrayName} }}\n  {{ .Name }} = {{ .Value }}\n{{ end }}`;\n}\n","import type { Monaco } from '@grafana/ui';\n\nimport {\n  alertDetailsSnippet,\n  alertsLoopSnippet,\n  annotationsLoopSnippet,\n  commonAnnotationsLoopSnippet,\n  commonLabelsLoopSnippet,\n  groupLabelsLoopSnippet,\n  labelsLoopSnippet,\n} from './snippets';\nimport { SuggestionDefinition } from './suggestionDefinition';\n\n// Suggestions available at the top level of a template\nexport function getGlobalSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: 'Alerts',\n      kind,\n      detail: 'Alert[]',\n      documentation: { value: 'An Array containing all alerts' },\n    },\n    { label: 'Receiver', kind, detail: 'string' },\n    { label: 'Status', kind, detail: 'string' },\n    { label: 'GroupLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonLabels', kind, detail: '[]KeyValue' },\n    { label: 'CommonAnnotations', kind, detail: '[]KeyValue' },\n    { label: 'ExternalURL', kind, detail: 'string' },\n  ];\n}\n\n// Suggestions that are valid only in the scope of an alert (e.g. in the .Alerts loop)\nexport function getAlertSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    {\n      label: { label: 'Status', detail: '(Alert)', description: 'string' },\n      kind,\n      detail: 'string',\n      documentation: { value: 'Status of the alert. It can be `firing` or `resolved`' },\n    },\n    {\n      label: { label: 'Labels', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: { value: 'A set of labels attached to the alert.' },\n    },\n    {\n      label: { label: 'Annotations', detail: '(Alert)' },\n      kind,\n      detail: '[]KeyValue',\n      documentation: 'A set of annotations attached to the alert.',\n    },\n    {\n      label: { label: 'StartsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation: 'Time the alert started firing.',\n    },\n    {\n      label: { label: 'EndsAt', detail: '(Alert)' },\n      kind,\n      detail: 'time.Time',\n      documentation:\n        'Only set if the end time of an alert is known. Otherwise set to a configurable timeout period from the time since the last alert was received.',\n    },\n    {\n      label: { label: 'GeneratorURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Back link to Grafana or external Alertmanager.',\n    },\n    {\n      label: { label: 'SilenceURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation:\n        'Link to Grafana silence for with labels for this alert pre-filled. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'DashboardURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'PanelURL', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Link to Grafana dashboard panel, if alert rule belongs to one. Only for Grafana managed alerts.',\n    },\n    {\n      label: { label: 'Fingerprint', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'Fingerprint that can be used to identify the alert.',\n    },\n    {\n      label: { label: 'ValueString', detail: '(Alert)' },\n      kind,\n      detail: 'string',\n      documentation: 'String that contains labels and values of each reduced expression in the alert.',\n    },\n  ];\n}\n\n// Suggestions for .Alerts\nexport function getAlertsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'Firing', kind, detail: 'Alert[]' },\n    { label: 'Resolved', kind, detail: 'Alert[]' },\n  ];\n}\n\n// Suggestions for the KeyValue types\nexport function getKeyValueSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const kind = monaco.languages.CompletionItemKind.Field;\n\n  return [\n    { label: 'SortedPairs', kind, detail: '[]KeyValue' },\n    { label: 'Names', kind, detail: '[]string' },\n    { label: 'Values', kind, detail: '[]string' },\n    {\n      label: 'Remove',\n      detail: 'KeyValue[] function(keys []string)',\n      kind: monaco.languages.CompletionItemKind.Method,\n    },\n  ];\n}\n\nexport const snippets = {\n  alerts: {\n    label: 'alertsloop',\n    description: 'Renders a loop through alerts',\n    snippet: alertsLoopSnippet,\n  },\n  alertDetails: {\n    label: 'alertdetails',\n    description: 'Renders all information available about the alert',\n    snippet: alertDetailsSnippet,\n  },\n  groupLabels: {\n    label: 'grouplabelsloop',\n    description: 'Renders a loop through group labels',\n    snippet: groupLabelsLoopSnippet,\n  },\n  commonLabels: {\n    label: 'commonlabelsloop',\n    description: 'Renders a loop through common labels',\n    snippet: commonLabelsLoopSnippet,\n  },\n  commonAnnotations: {\n    label: 'commonannotationsloop',\n    description: 'Renders a loop through common annotations',\n    snippet: commonAnnotationsLoopSnippet,\n  },\n  labels: {\n    label: 'labelsloop',\n    description: 'Renders a loop through labels',\n    snippet: labelsLoopSnippet,\n  },\n  annotations: {\n    label: 'annotationsloop',\n    description: 'Renders a loop through annotations',\n    snippet: annotationsLoopSnippet,\n  },\n};\n\n// Snippets\nexport function getSnippetsSuggestions(monaco: Monaco): SuggestionDefinition[] {\n  const snippetKind = monaco.languages.CompletionItemKind.Snippet;\n  const snippetInsertRule = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n\n  const { alerts, alertDetails, groupLabels, commonLabels, commonAnnotations, labels, annotations } = snippets;\n\n  return [\n    {\n      label: alerts.label,\n      documentation: alerts.description,\n      kind: snippetKind,\n      insertText: alerts.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: {\n        label: alertDetails.label,\n        detail: '(Alert)',\n      },\n      documentation: alertDetails.description,\n      kind: snippetKind,\n      insertText: alertDetails.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: groupLabels.label,\n      documentation: groupLabels.description,\n      kind: snippetKind,\n      insertText: groupLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonLabels.label,\n      documentation: commonLabels.description,\n      kind: snippetKind,\n      insertText: commonLabels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: commonAnnotations.label,\n      documentation: commonAnnotations.description,\n      kind: snippetKind,\n      insertText: commonAnnotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: labels.label, detail: '(Alert)' },\n      documentation: labels.description,\n      kind: snippetKind,\n      insertText: labels.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n    {\n      label: { label: annotations.label, detail: '(Alert)' },\n      documentation: annotations.description,\n      kind: snippetKind,\n      insertText: annotations.snippet,\n      insertTextRules: snippetInsertRule,\n    },\n  ];\n}\n","import { SupportedPlugin } from '../../../types/pluginBridges';\n\nexport interface AmRouteReceiver {\n  label: string;\n  value: string;\n  grafanaAppReceiverType?: SupportedPlugin;\n}\n\nexport const GRAFANA_APP_RECEIVERS_SOURCE_IMAGE: Record<SupportedPlugin, string> = {\n  [SupportedPlugin.OnCall]: 'public/img/alerting/oncall_logo.svg',\n\n  [SupportedPlugin.Incident]: '',\n  [SupportedPlugin.MachineLearning]: '',\n};\n","import React from 'react';\n\nimport { IconName, Tooltip, LinkButton, Button } from '@grafana/ui';\nimport { PopoverContent, TooltipPlacement } from '@grafana/ui/src/components/Tooltip';\n\ninterface Props {\n  tooltip: PopoverContent;\n  icon: IconName;\n  className?: string;\n  tooltipPlacement?: TooltipPlacement;\n  to?: string;\n  target?: string;\n  onClick?: () => void;\n  'data-testid'?: string;\n}\n\nexport const ActionIcon = ({\n  tooltip,\n  icon,\n  to,\n  target,\n  onClick,\n  className,\n  tooltipPlacement = 'top',\n  ...rest\n}: Props) => {\n  const ariaLabel = typeof tooltip === 'string' ? tooltip : undefined;\n\n  return (\n    <Tooltip content={tooltip} placement={tooltipPlacement}>\n      {to ? (\n        <LinkButton\n          variant=\"secondary\"\n          fill=\"text\"\n          icon={icon}\n          href={to}\n          size=\"sm\"\n          target={target}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      ) : (\n        <Button\n          className={className}\n          variant=\"secondary\"\n          fill=\"text\"\n          size=\"sm\"\n          icon={icon}\n          type=\"button\"\n          onClick={onClick}\n          {...rest}\n          aria-label={ariaLabel}\n        />\n      )}\n    </Tooltip>\n  );\n};\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\n\nexport const getAlertTableStyles = (theme: GrafanaTheme2) => ({\n  table: css`\n    width: 100%;\n    border-radius: ${theme.shape.radius.default};\n    border: solid 1px ${theme.colors.border.weak};\n    background-color: ${theme.colors.background.secondary};\n\n    th {\n      padding: ${theme.spacing(1)};\n    }\n\n    td {\n      padding: 0 ${theme.spacing(1)};\n    }\n\n    tr {\n      height: 38px;\n    }\n  `,\n  evenRow: css`\n    background-color: ${theme.colors.background.primary};\n  `,\n  colExpand: css`\n    width: 36px;\n  `,\n  nameCell: css`\n    gap: ${theme.spacing(1)};\n  `,\n  actionsCell: css`\n    text-align: right;\n    width: 1%;\n    white-space: nowrap;\n\n    & > * + * {\n      margin-left: ${theme.spacing(0.5)};\n    }\n  `,\n});\n"],"names":["receiverTypeNames","GrafanaReceiverExportPreview","receiverName","decrypt","exportFormat","onClose","receiverDefinition","isFetching","alertRuleApi","downloadFileName","LoadingPlaceholder","FileExportPreview","GrafanaReceiverExporter","activeTab","setActiveTab","GrafanaExportDrawer","GrafanaReceiversExportPreview","GrafanaReceiversExporter","ReceiverMetadataBadge","icon","title","externalUrl","warning","styles","getStyles","Stack","Tooltip","Icon","theme","TemplatesTable","config","alertManagerName","dispatch","expandedTemplates","setExpandedTemplates","tableStyles","templateRows","name","template","templateToDelete","setTemplateToDelete","deleteTemplate","Authorize","provenance","idx","isExpanded","CollapseToggle","Provisioning","ActionIcon","DetailsField","TemplateEditor","ConfirmModal","NotificationTemplates","selectedAlertmanager","data","error","useAlertmanagerConfig","Alert","ContactPointsFilter","searchParams","setSearchParams","useURLSearchParams","defaultValue","searchValue","setSearchValue","_","cancel","useDebounce","clear","hasInput","Field","Input","event","Button","GlobalConfigAlert","isVanillaAM","useDeleteContactPointModal","handleDelete","isLoading","showModal","setShowModal","contactPoint","setContactPoint","setError","handleDismiss","handleShow","handleSubmit","ErrorModal","Modal","isOpen","onDismiss","UnusedContactPointBadge","Badge","ActiveTab","DEFAULT_PAGE_SIZE","ContactPoints","contactPoints","useContactPoints","deleteTrigger","updateAlertmanagerState","addContactPointSupported","addContactPointAllowed","exportContactPointsSupported","exportContactPointsAllowed","createTemplateSupported","createTemplateAllowed","DeleteModal","showDeleteModal","ExportDrawer","showExportDrawer","useExportContactPoint","search","getContactPointsFilters","showingContactPoints","showNotificationTemplates","isGrafanaManagedAlertmanager","GrafanaAlertmanagerDeliveryWarning","TabsBar","Tab","TabContent","Spacer","ALL_CONTACT_POINTS","ContactPointsList","Text","disabled","pageSize","onDelete","searchResults","useContactPointsSearch","page","pageItems","numberOfPages","onPageChange","usePagination","index","provisioned","policies","key","ContactPoint","Pagination","fuzzyFinder","nameHaystack","typeHaystack","receiver","nameHits","typeHits","hits","id","receivers","showFullMetadata","ContactPointHeader","diagnostics","metadata","sendingResolved","pluginMetadata","ContactPointReceiver","ContactPointReceiverSummary","props","exportSupported","exportAllowed","editSupported","editAllowed","deleteSupported","deleteAllowed","openExportDrawer","numberOfPolicies","isReferencedByAnyPolicy","isReferencedByRegularPolicies","ref","canEdit","canDelete","menuActions","Menu","ConditionalWrap","children","MetaText","Strong","Dropdown","MoreButton","type","description","hasMetadata","ContactPointReceiverTitleRow","ContactPointReceiverMetadataRow","iconName","countByType","isLastItem","failedToSend","lastDeliveryAttempt","lastDeliveryAttemptDuration","hasDeliveryAttempt","setReceiverName","isExportDrawerOpen","toggleShowExportDrawer","useToggle","decryptSecretsSupported","decryptSecretsAllowed","canReadSecrets","handleClose","handleOpen","RECEIVER_STATUS_KEY","RECEIVER_META_KEY","RECEIVER_PLUGIN_META_KEY","defaultHookOptions","useContactPointsWithStatus","includePoliciesCount","receiverStatusPollingInterval","isGrafanaAlertmanager","onCallPluginInstalled","onCallPluginStatusLoading","fetchContactPointsStatus","fetchReceiverMetadata","onCallIntegrations","onCallPluginIntegrationsLoading","onCallMetadata","fetchAlertmanagerConfiguration","result","fetchGrafanaContactPoints","a","b","useDeleteContactPoint","fetchAlertmanagerConfig","updateAlertManager","contactPointName","newConfig","draft","extractReceivers","value","acc","configs","onCallReceiverMeta","getOnCallMetadata","matchingOnCallIntegration","integration","AUTOGENERATED_RECEIVER_POLICY_MATCHER_KEY","isProvisioned","getReceiverDescription","summarizeEmailAddresses","recipient","addresses","SUPPORTED_SEPARATORS","emails","summary","rest","enhanceContactPointsWithMetadata","status","notifiers","alertmanagerConfiguration","fullyInheritedTree","usedContactPoints","getUsedContactPoints","usedContactPointsByName","statusForReceiver","isOnCallReceiver","getNotifierMetadata","isAutoGeneratedPolicy","route","objectMatcher","childrenContactPoints","match","notifier","getAlertManagerSuggestions","monaco","kind","registerGoTemplateAutocomplete","goTemplateAutocompleteProvider","model","position","context","word","range","completionProvider","CompletionProvider","isInsideGoExpression","wordBeforeDot","searchRange","wordContext","args","definition","buildAutocompleteSuggestion","label","detail","documentation","insertText","insertFallback","labelObject","GO_TEMPLATE_LANGUAGE_ID","registerLanguage","language","loader","l","monarch","shouldAutoHeight","disposeSuggestions","onEditorDidMount","editor","contentHeight","CodeEditor","alertsLoopSnippet","alertDetailsSnippet","groupLabelsLoopSnippet","getKeyValueTemplate","commonLabelsLoopSnippet","commonAnnotationsLoopSnippet","labelsLoopSnippet","annotationsLoopSnippet","arrayName","getGlobalSuggestions","getAlertSuggestions","getAlertsSuggestions","getKeyValueSuggestions","snippets","getSnippetsSuggestions","snippetKind","snippetInsertRule","alerts","alertDetails","groupLabels","commonLabels","commonAnnotations","labels","annotations","GRAFANA_APP_RECEIVERS_SOURCE_IMAGE","tooltip","to","target","onClick","className","tooltipPlacement","ariaLabel","getAlertTableStyles"],"sourceRoot":""}