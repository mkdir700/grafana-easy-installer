{"version":3,"file":"DashboardListPage.5d85dd6962b4be6fa49c.js","mappings":"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","sources":["webpack://grafana/./public/app/features/search/state/SearchStateManager.ts","webpack://grafana/./public/app/features/search/tempI18nPhrases.ts","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/BrowseActions.tsx","webpack://grafana/./public/app/features/search/page/components/ActionRow.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseFilters.tsx","webpack://grafana/./public/app/features/browse-dashboards/types.ts","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CheckboxHeaderCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/NameCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/TagsCell.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/DashboardsTree.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseView.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/NewFolderForm.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/CreateNewButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/SearchView.tsx","webpack://grafana/./public/app/features/browse-dashboards/BrowseDashboardsPage.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/DeleteModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/MoveModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/FolderActionsButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/permissions.ts"],"sourcesContent":["import { debounce } from 'lodash';\nimport { FormEvent } from 'react';\n\nimport { locationService } from '@grafana/runtime';\nimport { TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { StateManagerBase } from 'app/core/services/StateManagerBase';\nimport store from 'app/core/store';\n\nimport { SEARCH_PANELS_LOCAL_STORAGE_KEY, SEARCH_SELECTED_LAYOUT, SEARCH_SELECTED_SORT } from '../constants';\nimport {\n  reportDashboardListViewed,\n  reportSearchFailedQueryInteraction,\n  reportSearchQueryInteraction,\n  reportSearchResultInteraction,\n} from '../page/reporting';\nimport { getGrafanaSearcher, SearchQuery } from '../service';\nimport { SearchLayout, SearchQueryParams, SearchState } from '../types';\nimport { parseRouteParams } from '../utils';\n\nexport const initialState: SearchState = {\n  query: '',\n  tag: [],\n  starred: false,\n  layout: SearchLayout.Folders,\n  sort: undefined,\n  prevSort: undefined,\n  eventTrackingNamespace: 'dashboard_search',\n};\n\nexport const defaultQueryParams: SearchQueryParams = {\n  sort: null,\n  starred: null,\n  query: null,\n  tag: null,\n  layout: null,\n};\n\nconst getLocalStorageLayout = () => {\n  const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT);\n  if (selectedLayout === SearchLayout.List) {\n    return SearchLayout.List;\n  } else {\n    return SearchLayout.Folders;\n  }\n};\nexport class SearchStateManager extends StateManagerBase<SearchState> {\n  updateLocation = debounce((query) => locationService.partial(query, true), 300);\n  doSearchWithDebounce = debounce(() => this.doSearch(), 300);\n  lastQuery?: SearchQuery;\n\n  lastSearchTimestamp = 0;\n\n  initStateFromUrl(folderUid?: string, doInitialSearch = true) {\n    const stateFromUrl = parseRouteParams(locationService.getSearchObject());\n\n    // Force list view when conditions are specified from the URL\n    if (stateFromUrl.query || stateFromUrl.datasource || stateFromUrl.panel_type) {\n      stateFromUrl.layout = SearchLayout.List;\n    }\n\n    const layout = getLocalStorageLayout();\n    const prevSort = localStorage.getItem(SEARCH_SELECTED_SORT) ?? undefined;\n    const sort = layout === SearchLayout.List ? stateFromUrl.sort || prevSort : null;\n\n    stateManager.setState({\n      ...initialState,\n      ...stateFromUrl,\n      layout,\n      sort: sort ?? initialState.sort,\n      prevSort,\n      folderUid: folderUid,\n      eventTrackingNamespace: folderUid ? 'manage_dashboards' : 'dashboard_search',\n    });\n\n    if (doInitialSearch && this.hasSearchFilters()) {\n      this.doSearch();\n    }\n  }\n\n  /**\n   * Updates internal and url state, then triggers a new search\n   */\n  setStateAndDoSearch(state: Partial<SearchState>) {\n    const sort = state.sort || this.state.sort || localStorage.getItem(SEARCH_SELECTED_SORT) || undefined;\n\n    // Set internal state\n    this.setState({ sort, ...state });\n\n    // Update url state\n    this.updateLocation({\n      query: this.state.query.length === 0 ? null : this.state.query,\n      tag: this.state.tag,\n      datasource: this.state.datasource,\n      panel_type: this.state.panel_type,\n      starred: this.state.starred ? this.state.starred : null,\n      sort: this.state.sort,\n    });\n\n    // Prevent searching when user is only clearing the input.\n    // We don't show these results anyway\n    if (this.hasSearchFilters()) {\n      this.doSearchWithDebounce();\n    }\n  }\n\n  onCloseSearch = () => {\n    this.updateLocation({\n      search: null,\n      folder: null,\n      ...defaultQueryParams,\n    });\n  };\n\n  onClearSearchAndFilters = () => {\n    this.setStateAndDoSearch({\n      query: '',\n      datasource: undefined,\n      tag: [],\n      panel_type: undefined,\n      starred: undefined,\n      sort: undefined,\n    });\n  };\n\n  onQueryChange = (query: string) => {\n    this.setStateAndDoSearch({ query });\n  };\n\n  onRemoveTag = (tagToRemove: string) => {\n    this.setStateAndDoSearch({ tag: this.state.tag.filter((tag) => tag !== tagToRemove) });\n  };\n\n  onTagFilterChange = (tags: string[]) => {\n    this.setStateAndDoSearch({ tag: tags });\n  };\n\n  onAddTag = (newTag: string) => {\n    if (this.state.tag && this.state.tag.includes(newTag)) {\n      return;\n    }\n\n    this.setStateAndDoSearch({ tag: [...this.state.tag, newTag] });\n  };\n\n  onDatasourceChange = (datasource: string | undefined) => {\n    this.setStateAndDoSearch({ datasource });\n  };\n\n  onPanelTypeChange = (panel_type?: string) => {\n    this.setStateAndDoSearch({ panel_type });\n  };\n\n  onStarredFilterChange = (e: FormEvent<HTMLInputElement>) => {\n    const starred = e.currentTarget.checked;\n    this.setStateAndDoSearch({ starred });\n  };\n\n  onClearStarred = () => {\n    this.setStateAndDoSearch({ starred: false });\n  };\n\n  onSortChange = (sort: string | undefined) => {\n    if (sort) {\n      localStorage.setItem(SEARCH_SELECTED_SORT, sort);\n    } else {\n      localStorage.removeItem(SEARCH_SELECTED_SORT);\n    }\n\n    if (this.state.layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ sort, layout: SearchLayout.List });\n    } else {\n      this.setStateAndDoSearch({ sort });\n    }\n  };\n\n  onLayoutChange = (layout: SearchLayout) => {\n    localStorage.setItem(SEARCH_SELECTED_LAYOUT, layout);\n\n    if (this.state.sort && layout === SearchLayout.Folders) {\n      this.setStateAndDoSearch({ layout, prevSort: this.state.sort, sort: undefined });\n    } else {\n      this.setStateAndDoSearch({ layout, sort: this.state.prevSort });\n    }\n  };\n\n  onSetIncludePanels = (includePanels: boolean) => {\n    this.setStateAndDoSearch({ includePanels });\n    store.set(SEARCH_PANELS_LOCAL_STORAGE_KEY, includePanels);\n  };\n\n  hasSearchFilters() {\n    return (\n      this.state.query ||\n      this.state.tag.length ||\n      this.state.starred ||\n      this.state.panel_type ||\n      this.state.sort ||\n      this.state.layout === SearchLayout.List\n    );\n  }\n\n  getSearchQuery() {\n    const q: SearchQuery = {\n      query: this.state.query,\n      tags: this.state.tag,\n      ds_uid: this.state.datasource,\n      panel_type: this.state.panel_type,\n      location: this.state.folderUid, // This will scope all results to the prefix\n      sort: this.state.sort,\n      explain: this.state.explain,\n      withAllowedActions: this.state.explain, // allowedActions are currently not used for anything on the UI and added only in `explain` mode\n      starred: this.state.starred,\n    };\n\n    // Only dashboards have additional properties\n    if (q.sort?.length && !q.sort.includes('name')) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (!q.query?.length) {\n      q.query = '*';\n      if (!q.location) {\n        q.kind = ['dashboard', 'folder']; // skip panels\n      }\n    }\n\n    if (!this.state.includePanels && !q.kind) {\n      q.kind = ['dashboard', 'folder']; // skip panels\n    }\n\n    if (q.panel_type?.length) {\n      q.kind = ['panel'];\n    }\n\n    return q;\n  }\n\n  private doSearch() {\n    const trackingInfo = {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    };\n\n    reportSearchQueryInteraction(this.state.eventTrackingNamespace, trackingInfo);\n\n    this.lastQuery = this.getSearchQuery();\n\n    this.setState({ loading: true });\n\n    const searcher = getGrafanaSearcher();\n\n    const searchTimestamp = Date.now();\n    const searchPromise = this.state.starred ? searcher.starred(this.lastQuery) : searcher.search(this.lastQuery);\n\n    searchPromise\n      .then((result) => {\n        // Only keep the results if it's was issued after the most recently resolved search.\n        // This prevents results showing out of order if first request is slower than later ones\n        if (searchTimestamp > this.lastSearchTimestamp) {\n          this.setState({ result, loading: false });\n          this.lastSearchTimestamp = searchTimestamp;\n        }\n      })\n      .catch((error) => {\n        reportSearchFailedQueryInteraction(this.state.eventTrackingNamespace, {\n          ...trackingInfo,\n          error: error?.message,\n        });\n        this.setState({ loading: false });\n      });\n  }\n\n  // This gets the possible tags from within the query results\n  getTagOptions = (): Promise<TermCount[]> => {\n    const query = this.lastQuery ?? {\n      kind: ['dashboard', 'folder'],\n      query: '*',\n    };\n    return getGrafanaSearcher().tags(query);\n  };\n\n  /**\n   * When item is selected clear some filters and report interaction\n   */\n  onSearchItemClicked = (e: React.MouseEvent<HTMLElement>) => {\n    reportSearchResultInteraction(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    });\n  };\n\n  /**\n   * Caller should handle debounce\n   */\n  onReportSearchUsage = () => {\n    reportDashboardListViewed(this.state.eventTrackingNamespace, {\n      layout: this.state.layout,\n      starred: this.state.starred,\n      sortValue: this.state.sort,\n      query: this.state.query,\n      tagCount: this.state.tag?.length,\n      includePanels: this.state.includePanels,\n    });\n  };\n}\n\nlet stateManager: SearchStateManager;\n\nexport function getSearchStateManager() {\n  if (!stateManager) {\n    const selectedLayout = localStorage.getItem(SEARCH_SELECTED_LAYOUT) as SearchLayout;\n    const layout = selectedLayout ?? initialState.layout;\n\n    let includePanels = store.getBool(SEARCH_PANELS_LOCAL_STORAGE_KEY, true);\n    if (includePanels) {\n      includePanels = false;\n    }\n\n    stateManager = new SearchStateManager({ ...initialState, layout, includePanels });\n  }\n\n  return stateManager;\n}\n\nexport function useSearchStateManager() {\n  const stateManager = getSearchStateManager();\n  const state = stateManager.useState();\n\n  return [state, stateManager] as const;\n}\n","// Temporary place to collect phrases we reuse between new and old browse/search\n// TODO: remove this when new Browse Dashboards UI is no longer feature flagged\n\nimport { t } from 'app/core/internationalization';\n\nexport function getSearchPlaceholder(includePanels = false) {\n  return includePanels\n    ? t('search.search-input.include-panels-placeholder', 'Search for dashboards, folders, and panels')\n    : t('search.search-input.placeholder', 'Search for dashboards and folders');\n}\n\nexport function getNewDashboardPhrase() {\n  return t('search.dashboard-actions.new-dashboard', 'New dashboard');\n}\n\nexport function getNewFolderPhrase() {\n  return t('search.dashboard-actions.new-folder', 'New folder');\n}\n\nexport function getImportPhrase() {\n  return t('search.dashboard-actions.import', 'Import');\n}\n\nexport function getNewPhrase() {\n  return t('search.dashboard-actions.new', 'New');\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport { Button, Tooltip, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { t, Trans } from 'app/core/internationalization';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { useDispatch } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { useDeleteItemsMutation, useMoveItemsMutation } from '../../api/browseDashboardsAPI';\nimport { setAllSelection, useActionSelectionState } from '../../state';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DeleteModal } from './DeleteModal';\nimport { MoveModal } from './MoveModal';\n\nexport interface Props {}\n\nexport function BrowseActions() {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n  const selectedItems = useActionSelectionState();\n  const [deleteItems] = useDeleteItemsMutation();\n  const [moveItems] = useMoveItemsMutation();\n  const [, stateManager] = useSearchStateManager();\n\n  // Folders can only be moved if nested folders is enabled\n  const moveIsInvalid = useMemo(\n    () => !config.featureToggles.nestedFolders && Object.values(selectedItems.folder).some((v) => v),\n    [selectedItems]\n  );\n\n  const isSearching = stateManager.hasSearchFilters();\n\n  const onActionComplete = () => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n\n    if (isSearching) {\n      // Redo search query\n      stateManager.doSearchWithDebounce();\n    }\n  };\n\n  const onDelete = async () => {\n    await deleteItems({ selectedItems });\n    trackAction('delete', selectedItems);\n    onActionComplete();\n  };\n\n  const onMove = async (destinationUID: string) => {\n    await moveItems({ selectedItems, destinationUID });\n    trackAction('move', selectedItems);\n    onActionComplete();\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems,\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems,\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  const moveButton = (\n    <Button onClick={showMoveModal} variant=\"secondary\" disabled={moveIsInvalid}>\n      <Trans i18nKey=\"browse-dashboards.action.move-button\">Move</Trans>\n    </Button>\n  );\n\n  return (\n    <div className={styles.row} data-testid=\"manage-actions\">\n      {moveIsInvalid ? (\n        <Tooltip content={t('browse-dashboards.action.cannot-move-folders', 'Folders cannot be moved')}>\n          {moveButton}\n        </Tooltip>\n      ) : (\n        moveButton\n      )}\n\n      <Button onClick={showDeleteModal} variant=\"destructive\">\n        <Trans i18nKey=\"browse-dashboards.action.delete-button\">Delete</Trans>\n      </Button>\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  row: css({\n    display: 'flex',\n    flexDirection: 'row',\n    gap: theme.spacing(1),\n    marginBottom: theme.spacing(2),\n  }),\n});\n\nconst actionMap = {\n  move: 'grafana_manage_dashboards_item_moved',\n  delete: 'grafana_manage_dashboards_item_deleted',\n} as const;\n\nfunction trackAction(action: keyof typeof actionMap, selectedItems: Omit<DashboardTreeSelection, 'panel' | '$all'>) {\n  const selectedDashboards = Object.keys(selectedItems.dashboard).filter((uid) => selectedItems.dashboard[uid]);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n\n  reportInteraction(actionMap[action], {\n    item_counts: {\n      folder: selectedFolders.length,\n      dashboard: selectedDashboards.length,\n    },\n    source: 'tree_actions',\n  });\n}\n","import { css } from '@emotion/css';\nimport React, { FormEvent } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { Button, Checkbox, HorizontalGroup, RadioButtonGroup, useStyles2 } from '@grafana/ui';\nimport { SortPicker } from 'app/core/components/Select/SortPicker';\nimport { TagFilter, TermCount } from 'app/core/components/TagFilter/TagFilter';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { SearchLayout, SearchState } from '../../types';\n\nfunction getLayoutOptions() {\n  return [\n    {\n      value: SearchLayout.Folders,\n      icon: 'folder',\n      description: t('search.actions.view-as-folders', 'View by folders'),\n    },\n    { value: SearchLayout.List, icon: 'list-ul', description: t('search.actions.view-as-list', 'View as list') },\n  ];\n}\n\ninterface Props {\n  onLayoutChange: (layout: SearchLayout) => void;\n  onSortChange: (value?: string) => void;\n  onStarredFilterChange?: (event: FormEvent<HTMLInputElement>) => void;\n  onTagFilterChange: (tags: string[]) => void;\n  getTagOptions: () => Promise<TermCount[]>;\n  getSortOptions: () => Promise<SelectableValue[]>;\n  sortPlaceholder?: string;\n  onDatasourceChange: (ds?: string) => void;\n  onPanelTypeChange: (pt?: string) => void;\n  includePanels: boolean;\n  onSetIncludePanels: (v: boolean) => void;\n  state: SearchState;\n  showStarredFilter?: boolean;\n  hideLayout?: boolean;\n}\n\nexport function getValidQueryLayout(q: SearchState): SearchLayout {\n  const layout = q.layout ?? SearchLayout.Folders;\n\n  // Folders is not valid when a query exists\n  if (layout === SearchLayout.Folders) {\n    if (q.query || q.sort || q.starred || q.tag.length > 0) {\n      return SearchLayout.List;\n    }\n  }\n\n  return layout;\n}\n\nexport const ActionRow = ({\n  onLayoutChange,\n  onSortChange,\n  onStarredFilterChange = () => {},\n  onTagFilterChange,\n  getTagOptions,\n  getSortOptions,\n  sortPlaceholder,\n  onDatasourceChange,\n  onPanelTypeChange,\n  onSetIncludePanels,\n  state,\n  showStarredFilter,\n  hideLayout,\n}: Props) => {\n  const styles = useStyles2(getStyles);\n  const layout = getValidQueryLayout(state);\n\n  // Disabled folder layout option when query is present\n  const disabledOptions =\n    state.tag.length || state.starred || state.query || state.datasource || state.panel_type\n      ? [SearchLayout.Folders]\n      : [];\n\n  return (\n    <div className={styles.actionRow}>\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        <TagFilter isClearable={false} tags={state.tag} tagOptions={getTagOptions} onChange={onTagFilterChange} />\n        {config.featureToggles.panelTitleSearch && (\n          <Checkbox\n            data-testid=\"include-panels\"\n            disabled={layout === SearchLayout.Folders}\n            value={state.includePanels}\n            onChange={() => onSetIncludePanels(!state.includePanels)}\n            label={t('search.actions.include-panels', 'Include panels')}\n          />\n        )}\n\n        {showStarredFilter && (\n          <div className={styles.checkboxWrapper}>\n            <Checkbox\n              label={t('search.actions.starred', 'Starred')}\n              onChange={onStarredFilterChange}\n              value={state.starred}\n            />\n          </div>\n        )}\n        {state.datasource && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onDatasourceChange(undefined)}>\n            <Trans i18nKey=\"search.actions.remove-datasource-filter\">\n              Datasource: {{ datasource: state.datasource }}\n            </Trans>\n          </Button>\n        )}\n        {state.panel_type && (\n          <Button icon=\"times\" variant=\"secondary\" onClick={() => onPanelTypeChange(undefined)}>\n            Panel: {state.panel_type}\n          </Button>\n        )}\n      </HorizontalGroup>\n\n      <HorizontalGroup spacing=\"md\" width=\"auto\">\n        {!hideLayout && (\n          <RadioButtonGroup\n            options={getLayoutOptions()}\n            disabledOptions={disabledOptions}\n            onChange={onLayoutChange}\n            value={layout}\n          />\n        )}\n        <SortPicker\n          onChange={(change) => onSortChange(change?.value)}\n          value={state.sort}\n          getSortOptions={getSortOptions}\n          placeholder={sortPlaceholder || t('search.actions.sort-placeholder', 'Sort')}\n          isClearable\n        />\n      </HorizontalGroup>\n    </div>\n  );\n};\n\nActionRow.displayName = 'ActionRow';\n\nexport const getStyles = (theme: GrafanaTheme2) => {\n  return {\n    actionRow: css`\n      display: none;\n\n      ${theme.breakpoints.up('md')} {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding-bottom: ${theme.spacing(2)};\n        width: 100%;\n      }\n    `,\n    checkboxWrapper: css`\n      label {\n        line-height: 1.2;\n      }\n    `,\n  };\n};\n","import React from 'react';\n\nimport { ActionRow } from 'app/features/search/page/components/ActionRow';\nimport { getGrafanaSearcher } from 'app/features/search/service';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\n\nexport function BrowseFilters() {\n  const [searchState, stateManager] = useSearchStateManager();\n\n  return (\n    <div>\n      <ActionRow\n        showStarredFilter\n        state={searchState}\n        getTagOptions={stateManager.getTagOptions}\n        getSortOptions={getGrafanaSearcher().getSortOptions}\n        sortPlaceholder={getGrafanaSearcher().sortPlaceholder}\n        includePanels={searchState.includePanels ?? false}\n        onLayoutChange={stateManager.onLayoutChange}\n        onStarredFilterChange={stateManager.onStarredFilterChange}\n        onSortChange={stateManager.onSortChange}\n        onTagFilterChange={stateManager.onTagFilterChange}\n        onDatasourceChange={stateManager.onDatasourceChange}\n        onPanelTypeChange={stateManager.onPanelTypeChange}\n        onSetIncludePanels={stateManager.onSetIncludePanels}\n      />\n    </div>\n  );\n}\n","import { CellProps, Column, HeaderProps } from 'react-table';\n\nimport { DashboardViewItem, DashboardViewItemKind } from 'app/features/search/types';\n\nexport type DashboardTreeSelection = Record<DashboardViewItemKind, Record<string, boolean | undefined>> & {\n  $all: boolean;\n};\n\n/**\n * Stores children at a particular location in the tree, and information\n * required for pagination.\n */\nexport type DashboardViewItemCollection = {\n  items: DashboardViewItem[];\n  lastFetchedKind: 'folder' | 'dashboard';\n  lastFetchedPage: number;\n  lastKindHasMoreItems: boolean;\n  isFullyLoaded: boolean;\n};\n\nexport interface BrowseDashboardsState {\n  rootItems: DashboardViewItemCollection | undefined;\n  childrenByParentUID: Record<string, DashboardViewItemCollection | undefined>;\n  selectedItems: DashboardTreeSelection;\n\n  // Only folders can ever be open or closed, so no need to seperate this by kind\n  openFolders: Record<string, boolean>;\n}\n\nexport interface UIDashboardViewItem {\n  kind: 'ui';\n  uiKind: 'empty-folder' | 'pagination-placeholder' | 'divider';\n  uid: string;\n}\n\nexport type DashboardViewItemWithUIItems = DashboardViewItem | UIDashboardViewItem;\n\nexport interface DashboardsTreeItem<T extends DashboardViewItemWithUIItems = DashboardViewItemWithUIItems> {\n  item: T;\n  level: number;\n  isOpen: boolean;\n  parentUID?: string;\n}\n\ninterface RendererUserProps {\n  // Note: userProps for cell renderers (e.g. second argument in `cell.render('Cell', foo)` )\n  // aren't typed, so we must be careful when accessing this\n  isSelected?: (kind: DashboardViewItem | '$all') => SelectionState;\n  onAllSelectionChange?: (newState: boolean) => void;\n  onItemSelectionChange?: (item: DashboardViewItem, newState: boolean) => void;\n  treeID?: string;\n}\n\nexport type DashboardsTreeColumn = Column<DashboardsTreeItem>;\nexport type DashboardsTreeCellProps = CellProps<DashboardsTreeItem, unknown> & RendererUserProps;\nexport type DashboardTreeHeaderProps = HeaderProps<DashboardsTreeItem> & RendererUserProps;\n\nexport enum SelectionState {\n  Unselected,\n  Selected,\n  Mixed,\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Checkbox, useStyles2 } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { DashboardsTreeCellProps, SelectionState } from '../types';\n\nimport { isSharedWithMe } from './utils';\n\nexport default function CheckboxCell({\n  row: { original: row },\n  isSelected,\n  onItemSelectionChange,\n}: DashboardsTreeCellProps) {\n  const item = row.item;\n\n  if (!isSelected) {\n    return <CheckboxSpacer />;\n  }\n\n  if (item.kind === 'ui') {\n    if (item.uiKind === 'pagination-placeholder') {\n      return <Checkbox disabled value={false} />;\n    } else {\n      return <CheckboxSpacer />;\n    }\n  }\n\n  if (isSharedWithMe(item.uid)) {\n    return <CheckboxSpacer />;\n  }\n\n  const state = isSelected(item);\n\n  return (\n    <Checkbox\n      data-testid={selectors.pages.BrowseDashboards.table.checkbox(item.uid)}\n      aria-label={t('browse-dashboards.dashboards-tree.select-checkbox', 'Select')}\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      onChange={(ev) => onItemSelectionChange?.(item, ev.currentTarget.checked)}\n    />\n  );\n}\n\nfunction CheckboxSpacer() {\n  const styles = useStyles2(getStyles);\n  return <span className={styles.checkboxSpacer} />;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  // Should be the same size as the <IconButton /> so Dashboard name is aligned to Folder name siblings\n  checkboxSpacer: css({\n    paddingLeft: theme.spacing(2),\n  }),\n});\n","import React from 'react';\n\nimport { Checkbox } from '@grafana/ui';\nimport { t } from 'app/core/internationalization';\n\nimport { DashboardTreeHeaderProps, SelectionState } from '../types';\n\nexport default function CheckboxHeaderCell({ isSelected, onAllSelectionChange }: DashboardTreeHeaderProps) {\n  const state = isSelected?.('$all') ?? SelectionState.Unselected;\n\n  return (\n    <Checkbox\n      value={state === SelectionState.Selected}\n      indeterminate={state === SelectionState.Mixed}\n      aria-label={t('browse-dashboards.dashboards-tree.select-all-header-checkbox', 'Select all')}\n      onChange={(ev) => {\n        if (state === SelectionState.Mixed) {\n          // Ensure clicking an indeterminate checkbox always clears the selection\n          onAllSelectionChange?.(false);\n        } else {\n          onAllSelectionChange?.(ev.currentTarget.checked);\n        }\n      }}\n    />\n  );\n}\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport Skeleton from 'react-loading-skeleton';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { Icon, IconButton, Link, Spinner, useStyles2, Text } from '@grafana/ui';\nimport { getSvgSize } from '@grafana/ui/src/components/Icon/utils';\nimport { t } from 'app/core/internationalization';\nimport { getIconForItem } from 'app/features/search/service/utils';\n\nimport { Indent } from '../../../core/components/Indent/Indent';\nimport { useChildrenByParentUIDState } from '../state';\nimport { DashboardsTreeCellProps } from '../types';\n\nimport { makeRowID } from './utils';\n\nconst CHEVRON_SIZE = 'md';\nconst ICON_SIZE = 'sm';\n\ntype NameCellProps = DashboardsTreeCellProps & {\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n};\n\nexport function NameCell({ row: { original: data }, onFolderClick, treeID }: NameCellProps) {\n  const styles = useStyles2(getStyles);\n  const { item, level, isOpen } = data;\n  const childrenByParentUID = useChildrenByParentUIDState();\n  const isLoading = isOpen && !childrenByParentUID[item.uid];\n  const iconName = getIconForItem(data.item, isOpen);\n\n  if (item.kind === 'ui') {\n    return (\n      <>\n        <Indent\n          level={level}\n          spacing={{\n            xs: 1,\n            md: 3,\n          }}\n        />\n        <span className={styles.folderButtonSpacer} />\n        {item.uiKind === 'empty-folder' ? (\n          <em className={styles.emptyText}>\n            <Text variant=\"body\" color=\"secondary\" truncate>\n              No items\n            </Text>\n          </em>\n        ) : (\n          <Skeleton width={200} />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Indent\n        level={level}\n        spacing={{\n          xs: 1,\n          md: 3,\n        }}\n      />\n\n      {item.kind === 'folder' ? (\n        <IconButton\n          size={CHEVRON_SIZE}\n          className={styles.chevron}\n          onClick={() => {\n            onFolderClick(item.uid, !isOpen);\n          }}\n          name={isOpen ? 'angle-down' : 'angle-right'}\n          aria-label={\n            isOpen\n              ? t('browse-dashboards.dashboards-tree.collapse-folder-button', 'Collapse folder {{title}}', {\n                  title: item.title,\n                })\n              : t('browse-dashboards.dashboards-tree.expand-folder-button', 'Expand folder {{title}}', {\n                  title: item.title,\n                })\n          }\n        />\n      ) : (\n        <span className={styles.folderButtonSpacer} />\n      )}\n\n      <div className={styles.iconNameContainer}>\n        {isLoading ? <Spinner size={ICON_SIZE} /> : <Icon size={ICON_SIZE} name={iconName} />}\n\n        <Text variant=\"body\" truncate id={treeID && makeRowID(treeID, item)}>\n          {item.url ? (\n            <Link\n              onClick={() => {\n                reportInteraction('manage_dashboards_result_clicked');\n              }}\n              href={item.url}\n              className={styles.link}\n            >\n              {item.title}\n            </Link>\n          ) : (\n            item.title\n          )}\n        </Text>\n      </div>\n    </>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    chevron: css({\n      marginRight: theme.spacing(1),\n      width: getSvgSize(CHEVRON_SIZE),\n    }),\n    emptyText: css({\n      // needed for text to truncate correctly\n      overflow: 'hidden',\n    }),\n    // Should be the same size as the <IconButton /> so Dashboard name is aligned to Folder name siblings\n    folderButtonSpacer: css({\n      paddingLeft: `calc(${getSvgSize(CHEVRON_SIZE)}px + ${theme.spacing(1)})`,\n    }),\n    iconNameContainer: css({\n      alignItems: 'center',\n      display: 'flex',\n      gap: theme.spacing(1),\n      overflow: 'hidden',\n    }),\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport React from 'react';\nimport { CellProps } from 'react-table';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { TagList, useStyles2 } from '@grafana/ui';\n\nimport { DashboardsTreeItem } from '../types';\n\nexport function TagsCell({ row: { original: data } }: CellProps<DashboardsTreeItem, unknown>) {\n  const styles = useStyles2(getStyles);\n  const item = data.item;\n\n  if (item.kind === 'ui') {\n    if (item.uiKind === 'pagination-placeholder') {\n      return <TagList.Skeleton />;\n    } else {\n      return null;\n    }\n  }\n\n  if (!item.tags) {\n    return null;\n  }\n\n  return <TagList className={styles.tagList} tags={item.tags} />;\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    // TagList is annoying and has weird default alignment\n    tagList: css({\n      justifyContent: 'flex-start',\n      flexWrap: 'nowrap',\n    }),\n  };\n}\n","import { css, cx } from '@emotion/css';\nimport React, { useCallback, useEffect, useId, useMemo, useRef } from 'react';\nimport { TableInstance, useTable } from 'react-table';\nimport { VariableSizeList as List } from 'react-window';\nimport InfiniteLoader from 'react-window-infinite-loader';\n\nimport { GrafanaTheme2, isTruthy } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { useStyles2 } from '@grafana/ui';\nimport { t, Trans } from 'app/core/internationalization';\nimport { DashboardViewItem } from 'app/features/search/types';\n\nimport { DashboardsTreeCellProps, DashboardsTreeColumn, DashboardsTreeItem, SelectionState } from '../types';\n\nimport CheckboxCell from './CheckboxCell';\nimport CheckboxHeaderCell from './CheckboxHeaderCell';\nimport { NameCell } from './NameCell';\nimport { TagsCell } from './TagsCell';\nimport { useCustomFlexLayout } from './customFlexTableLayout';\nimport { makeRowID } from './utils';\n\ninterface DashboardsTreeProps {\n  items: DashboardsTreeItem[];\n  width: number;\n  height: number;\n  canSelect: boolean;\n  isSelected: (kind: DashboardViewItem | '$all') => SelectionState;\n  onFolderClick: (uid: string, newOpenState: boolean) => void;\n  onAllSelectionChange: (newState: boolean) => void;\n  onItemSelectionChange: (item: DashboardViewItem, newState: boolean) => void;\n\n  isItemLoaded: (itemIndex: number) => boolean;\n  requestLoadMore: (folderUid: string | undefined) => void;\n}\n\nconst HEADER_HEIGHT = 36;\nconst ROW_HEIGHT = 36;\nconst DIVIDER_HEIGHT = 0; // Yes - make it appear as a border on the row rather than a row itself\n\nexport function DashboardsTree({\n  items,\n  width,\n  height,\n  isSelected,\n  onFolderClick,\n  onAllSelectionChange,\n  onItemSelectionChange,\n  isItemLoaded,\n  requestLoadMore,\n  canSelect = false,\n}: DashboardsTreeProps) {\n  const treeID = useId();\n\n  const infiniteLoaderRef = useRef<InfiniteLoader>(null);\n  const listRef = useRef<List | null>(null);\n  const styles = useStyles2(getStyles);\n\n  useEffect(() => {\n    // If the tree changed identity, then some indexes that were previously loaded may now be unloaded,\n    // especially after a refetch after a move/delete.\n    // Clear that cache, and check if we need to trigger another load\n    if (infiniteLoaderRef.current) {\n      infiniteLoaderRef.current.resetloadMoreItemsCache(true);\n    }\n\n    if (listRef.current) {\n      listRef.current.resetAfterIndex(0);\n    }\n  }, [items]);\n\n  const tableColumns = useMemo(() => {\n    const checkboxColumn: DashboardsTreeColumn = {\n      id: 'checkbox',\n      width: 0,\n      Header: CheckboxHeaderCell,\n      Cell: CheckboxCell,\n    };\n\n    const nameColumn: DashboardsTreeColumn = {\n      id: 'name',\n      width: 3,\n      Header: (\n        <span style={{ paddingLeft: 24 }}>\n          <Trans i18nKey=\"browse-dashboards.dashboards-tree.name-column\">Name</Trans>\n        </span>\n      ),\n      Cell: (props: DashboardsTreeCellProps) => <NameCell {...props} onFolderClick={onFolderClick} />,\n    };\n\n    const tagsColumns: DashboardsTreeColumn = {\n      id: 'tags',\n      width: 2,\n      Header: t('browse-dashboards.dashboards-tree.tags-column', 'Tags'),\n      Cell: TagsCell,\n    };\n    const columns = [canSelect && checkboxColumn, nameColumn, tagsColumns].filter(isTruthy);\n\n    return columns;\n  }, [onFolderClick, canSelect]);\n\n  const table = useTable({ columns: tableColumns, data: items }, useCustomFlexLayout);\n  const { getTableProps, getTableBodyProps, headerGroups } = table;\n\n  const virtualData = useMemo(\n    () => ({\n      table,\n      isSelected,\n      onAllSelectionChange,\n      onItemSelectionChange,\n      treeID,\n    }),\n    // we need this to rerender if items changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [table, isSelected, onAllSelectionChange, onItemSelectionChange, items, treeID]\n  );\n\n  const handleIsItemLoaded = useCallback(\n    (itemIndex: number) => {\n      return isItemLoaded(itemIndex);\n    },\n    [isItemLoaded]\n  );\n\n  const handleLoadMore = useCallback(\n    (startIndex: number, endIndex: number) => {\n      const { parentUID } = items[startIndex];\n      requestLoadMore(parentUID);\n    },\n    [requestLoadMore, items]\n  );\n\n  const getRowHeight = useCallback(\n    (rowIndex: number) => {\n      const row = items[rowIndex];\n      if (row.item.kind === 'ui' && row.item.uiKind === 'divider') {\n        return DIVIDER_HEIGHT;\n      }\n\n      return ROW_HEIGHT;\n    },\n    [items]\n  );\n\n  return (\n    <div {...getTableProps()} role=\"table\">\n      {headerGroups.map((headerGroup) => {\n        const { key, ...headerGroupProps } = headerGroup.getHeaderGroupProps({\n          style: { width },\n        });\n\n        return (\n          <div key={key} {...headerGroupProps} className={cx(styles.row, styles.headerRow)}>\n            {headerGroup.headers.map((column) => {\n              const { key, ...headerProps } = column.getHeaderProps();\n\n              return (\n                <div key={key} {...headerProps} role=\"columnheader\" className={styles.cell}>\n                  {column.render('Header', { isSelected, onAllSelectionChange })}\n                </div>\n              );\n            })}\n          </div>\n        );\n      })}\n\n      <div {...getTableBodyProps()} data-testid={selectors.pages.BrowseDashboards.table.body}>\n        <InfiniteLoader\n          ref={infiniteLoaderRef}\n          itemCount={items.length}\n          isItemLoaded={handleIsItemLoaded}\n          loadMoreItems={handleLoadMore}\n        >\n          {({ onItemsRendered, ref }) => (\n            <List\n              ref={(elem) => {\n                ref(elem);\n                listRef.current = elem;\n              }}\n              height={height - HEADER_HEIGHT}\n              width={width}\n              itemCount={items.length}\n              itemData={virtualData}\n              estimatedItemSize={ROW_HEIGHT}\n              itemSize={getRowHeight}\n              onItemsRendered={onItemsRendered}\n            >\n              {VirtualListRow}\n            </List>\n          )}\n        </InfiniteLoader>\n      </div>\n    </div>\n  );\n}\n\ninterface VirtualListRowProps {\n  index: number;\n  style: React.CSSProperties;\n  data: {\n    table: TableInstance<DashboardsTreeItem>;\n    isSelected: DashboardsTreeCellProps['isSelected'];\n    onAllSelectionChange: DashboardsTreeCellProps['onAllSelectionChange'];\n    onItemSelectionChange: DashboardsTreeCellProps['onItemSelectionChange'];\n    treeID: string;\n  };\n}\n\nfunction VirtualListRow({ index, style, data }: VirtualListRowProps) {\n  const styles = useStyles2(getStyles);\n  const { table, isSelected, onItemSelectionChange, treeID } = data;\n  const { rows, prepareRow } = table;\n\n  const row = rows[index];\n  prepareRow(row);\n\n  const dashboardItem = row.original.item;\n\n  if (dashboardItem.kind === 'ui' && dashboardItem.uiKind === 'divider') {\n    return (\n      <div {...row.getRowProps({ style })}>\n        <hr className={styles.divider} />\n      </div>\n    );\n  }\n\n  return (\n    <div\n      {...row.getRowProps({ style })}\n      className={cx(styles.row, styles.bodyRow)}\n      aria-labelledby={makeRowID(treeID, dashboardItem)}\n      data-testid={selectors.pages.BrowseDashboards.table.row(\n        'title' in dashboardItem ? dashboardItem.title : dashboardItem.uid\n      )}\n    >\n      {row.cells.map((cell) => {\n        const { key, ...cellProps } = cell.getCellProps();\n\n        return (\n          <div key={key} {...cellProps} className={styles.cell}>\n            {cell.render('Cell', { isSelected, onItemSelectionChange, treeID })}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    // Column flex properties (cell sizing) are set by customFlexTableLayout.ts\n\n    row: css({\n      gap: theme.spacing(1),\n    }),\n\n    divider: css({\n      borderTop: `1px solid ${theme.colors.border.weak}`,\n      width: '100%',\n      margin: 0,\n    }),\n\n    headerRow: css({\n      backgroundColor: theme.colors.background.secondary,\n      height: HEADER_HEIGHT,\n    }),\n\n    bodyRow: css({\n      height: ROW_HEIGHT,\n\n      '&:hover': {\n        backgroundColor: theme.colors.emphasize(theme.colors.background.primary, 0.03),\n      },\n    }),\n\n    cell: css({\n      padding: theme.spacing(1),\n      overflow: 'hidden', // Required so flex children can do text-overflow: ellipsis\n      display: 'flex',\n      alignItems: 'center',\n    }),\n\n    link: css({\n      '&:hover': {\n        textDecoration: 'underline',\n      },\n    }),\n  };\n};\n","import React, { useCallback } from 'react';\n\nimport { CallToActionCard } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { DashboardViewItem } from 'app/features/search/types';\nimport { useDispatch } from 'app/types';\n\nimport { PAGE_SIZE } from '../api/services';\nimport {\n  useFlatTreeState,\n  useCheckboxSelectionState,\n  setFolderOpenState,\n  setItemSelectionState,\n  useChildrenByParentUIDState,\n  setAllSelection,\n  useBrowseLoadingStatus,\n  useLoadNextChildrenPage,\n  fetchNextChildrenPage,\n} from '../state';\nimport { BrowseDashboardsState, DashboardTreeSelection, SelectionState } from '../types';\n\nimport { DashboardsTree } from './DashboardsTree';\n\ninterface BrowseViewProps {\n  height: number;\n  width: number;\n  folderUID: string | undefined;\n  canSelect: boolean;\n}\n\nexport function BrowseView({ folderUID, width, height, canSelect }: BrowseViewProps) {\n  const status = useBrowseLoadingStatus(folderUID);\n  const dispatch = useDispatch();\n  const flatTree = useFlatTreeState(folderUID);\n  const selectedItems = useCheckboxSelectionState();\n  const childrenByParentUID = useChildrenByParentUIDState();\n\n  const handleFolderClick = useCallback(\n    (clickedFolderUID: string, isOpen: boolean) => {\n      dispatch(setFolderOpenState({ folderUID: clickedFolderUID, isOpen }));\n\n      if (isOpen) {\n        dispatch(fetchNextChildrenPage({ parentUID: clickedFolderUID, pageSize: PAGE_SIZE }));\n      }\n    },\n    [dispatch]\n  );\n\n  const handleItemSelectionChange = useCallback(\n    (item: DashboardViewItem, isSelected: boolean) => {\n      dispatch(setItemSelectionState({ item, isSelected }));\n    },\n    [dispatch]\n  );\n\n  const isSelected = useCallback(\n    (item: DashboardViewItem | '$all'): SelectionState => {\n      if (item === '$all') {\n        // We keep the boolean $all state up to date in redux, so we can short-circut\n        // the logic if we know this has been selected\n        if (selectedItems.$all) {\n          return SelectionState.Selected;\n        }\n\n        // Otherwise, if we have any selected items, then it should be in 'mixed' state\n        for (const selection of Object.values(selectedItems)) {\n          if (typeof selection === 'boolean') {\n            continue;\n          }\n\n          for (const uid in selection) {\n            const isSelected = selection[uid];\n            if (isSelected) {\n              return SelectionState.Mixed;\n            }\n          }\n        }\n\n        // Otherwise otherwise, nothing is selected and header should be unselected\n        return SelectionState.Unselected;\n      }\n\n      const isSelected = selectedItems[item.kind][item.uid];\n      if (isSelected) {\n        return SelectionState.Selected;\n      }\n\n      // Because if _all_ children, then the parent is selected (and bailed in the previous check),\n      // this .some check will only return true if the children are partially selected\n      const isMixed = hasSelectedDescendants(item, childrenByParentUID, selectedItems);\n      if (isMixed) {\n        return SelectionState.Mixed;\n      }\n\n      return SelectionState.Unselected;\n    },\n    [selectedItems, childrenByParentUID]\n  );\n\n  const isItemLoaded = useCallback(\n    (itemIndex: number) => {\n      const treeItem = flatTree[itemIndex];\n      if (!treeItem) {\n        return false;\n      }\n      const item = treeItem.item;\n      const result = !(item.kind === 'ui' && item.uiKind === 'pagination-placeholder');\n\n      return result;\n    },\n    [flatTree]\n  );\n\n  const handleLoadMore = useLoadNextChildrenPage();\n\n  if (status === 'fulfilled' && flatTree.length === 0) {\n    return (\n      <div style={{ width }}>\n        {canSelect ? (\n          <EmptyListCTA\n            title={folderUID ? \"This folder doesn't have any dashboards yet\" : 'No dashboards yet. Create your first!'}\n            buttonIcon=\"plus\"\n            buttonTitle=\"Create Dashboard\"\n            buttonLink={folderUID ? `dashboard/new?folderUid=${folderUID}` : 'dashboard/new'}\n            proTip={folderUID && 'Add/move dashboards to your folder at ->'}\n            proTipLink={folderUID && 'dashboards'}\n            proTipLinkTitle={folderUID && 'Browse dashboards'}\n            proTipTarget=\"\"\n          />\n        ) : (\n          <CallToActionCard callToActionElement={<span>This folder is empty</span>} />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <DashboardsTree\n      canSelect={canSelect}\n      items={flatTree}\n      width={width}\n      height={height}\n      isSelected={isSelected}\n      onFolderClick={handleFolderClick}\n      onAllSelectionChange={(newState) => dispatch(setAllSelection({ isSelected: newState, folderUID }))}\n      onItemSelectionChange={handleItemSelectionChange}\n      isItemLoaded={isItemLoaded}\n      requestLoadMore={handleLoadMore}\n    />\n  );\n}\n\nfunction hasSelectedDescendants(\n  item: DashboardViewItem,\n  childrenByParentUID: BrowseDashboardsState['childrenByParentUID'],\n  selectedItems: DashboardTreeSelection\n): boolean {\n  const collection = childrenByParentUID[item.uid];\n  if (!collection) {\n    return false;\n  }\n\n  return collection.items.some((v) => {\n    const thisIsSelected = selectedItems[v.kind][v.uid];\n    if (thisIsSelected) {\n      return thisIsSelected;\n    }\n\n    return hasSelectedDescendants(v, childrenByParentUID, selectedItems);\n  });\n}\n","import React from 'react';\nimport { useForm } from 'react-hook-form';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Button, Input, Field, Stack } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { validationSrv } from '../../manage-dashboards/services/ValidationSrv';\n\ninterface Props {\n  onConfirm: (folderName: string) => void;\n  onCancel: () => void;\n}\n\ninterface FormModel {\n  folderName: string;\n}\n\nconst initialFormModel: FormModel = { folderName: '' };\n\nexport function NewFolderForm({ onCancel, onConfirm }: Props) {\n  const {\n    handleSubmit,\n    register,\n    formState: { errors },\n  } = useForm<FormModel>({ defaultValues: initialFormModel });\n\n  const translatedFolderNameRequiredPhrase = t(\n    'browse-dashboards.action.new-folder-name-required-phrase',\n    'Folder name is required.'\n  );\n  const validateFolderName = async (folderName: string) => {\n    try {\n      await validationSrv.validateNewFolderName(folderName);\n      return true;\n    } catch (e) {\n      if (e instanceof Error) {\n        return e.message;\n      } else {\n        throw e;\n      }\n    }\n  };\n\n  const fieldNameLabel = t('browse-dashboards.new-folder-form.name-label', 'Folder name');\n\n  return (\n    <form\n      name=\"addFolder\"\n      onSubmit={handleSubmit((form) => onConfirm(form.folderName))}\n      data-testid={selectors.pages.BrowseDashboards.NewFolderForm.form}\n    >\n      <Field\n        label={fieldNameLabel}\n        invalid={!!errors.folderName}\n        error={errors.folderName && errors.folderName.message}\n      >\n        <Input\n          data-testid={selectors.pages.BrowseDashboards.NewFolderForm.nameInput}\n          id=\"folder-name-input\"\n          defaultValue={initialFormModel.folderName}\n          {...register('folderName', {\n            required: translatedFolderNameRequiredPhrase,\n            validate: async (v) => await validateFolderName(v),\n          })}\n        />\n      </Field>\n      <Stack>\n        <Button variant=\"secondary\" fill=\"outline\" onClick={onCancel}>\n          <Trans i18nKey=\"browse-dashboards.new-folder-form.cancel-label\">Cancel</Trans>\n        </Button>\n        <Button type=\"submit\">\n          <Trans i18nKey=\"browse-dashboards.new-folder-form.create-label\">Create</Trans>\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { reportInteraction } from '@grafana/runtime';\nimport { Button, Drawer, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport {\n  getNewDashboardPhrase,\n  getNewFolderPhrase,\n  getImportPhrase,\n  getNewPhrase,\n} from 'app/features/search/tempI18nPhrases';\nimport { FolderDTO } from 'app/types';\n\nimport { useNewFolderMutation } from '../api/browseDashboardsAPI';\n\nimport { NewFolderForm } from './NewFolderForm';\n\ninterface Props {\n  parentFolder?: FolderDTO;\n  canCreateFolder: boolean;\n  canCreateDashboard: boolean;\n}\n\nexport default function CreateNewButton({ parentFolder, canCreateDashboard, canCreateFolder }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const location = useLocation();\n  const [newFolder] = useNewFolderMutation();\n  const [showNewFolderDrawer, setShowNewFolderDrawer] = useState(false);\n\n  const onCreateFolder = async (folderName: string) => {\n    try {\n      await newFolder({\n        title: folderName,\n        parentUid: parentFolder?.uid,\n      });\n      const depth = parentFolder?.parents ? parentFolder.parents.length + 1 : 0;\n      reportInteraction('grafana_manage_dashboards_folder_created', {\n        is_subfolder: Boolean(parentFolder?.uid),\n        folder_depth: depth,\n      });\n    } finally {\n      setShowNewFolderDrawer(false);\n    }\n  };\n\n  const newMenu = (\n    <Menu>\n      {canCreateDashboard && (\n        <MenuItem\n          label={getNewDashboardPhrase()}\n          onClick={() =>\n            reportInteraction('grafana_menu_item_clicked', {\n              url: addFolderUidToUrl('/dashboard/new', parentFolder?.uid),\n              from: location.pathname,\n            })\n          }\n          url={addFolderUidToUrl('/dashboard/new', parentFolder?.uid)}\n        />\n      )}\n      {canCreateFolder && <MenuItem onClick={() => setShowNewFolderDrawer(true)} label={getNewFolderPhrase()} />}\n      {canCreateDashboard && (\n        <MenuItem\n          label={getImportPhrase()}\n          onClick={() =>\n            reportInteraction('grafana_menu_item_clicked', {\n              url: addFolderUidToUrl('/dashboard/import', parentFolder?.uid),\n              from: location.pathname,\n            })\n          }\n          url={addFolderUidToUrl('/dashboard/import', parentFolder?.uid)}\n        />\n      )}\n    </Menu>\n  );\n\n  return (\n    <>\n      <Dropdown overlay={newMenu} onVisibleChange={setIsOpen}>\n        <Button>\n          {getNewPhrase()}\n          <Icon name={isOpen ? 'angle-up' : 'angle-down'} />\n        </Button>\n      </Dropdown>\n      {showNewFolderDrawer && (\n        <Drawer\n          title={getNewFolderPhrase()}\n          subtitle={parentFolder?.title ? `Location: ${parentFolder.title}` : undefined}\n          onClose={() => setShowNewFolderDrawer(false)}\n          size=\"sm\"\n        >\n          <NewFolderForm onConfirm={onCreateFolder} onCancel={() => setShowNewFolderDrawer(false)} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n\n/**\n *\n * @param url without any parameters\n * @param folderUid  folder id\n * @returns url with paramter if folder is present\n */\nfunction addFolderUidToUrl(url: string, folderUid: string | undefined) {\n  return folderUid ? url + '?folderUid=' + folderUid : url;\n}\n","import React, { useCallback } from 'react';\n\nimport { DataFrameView, toDataFrame } from '@grafana/data';\nimport { Button, EmptyState } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { useKeyNavigationListener } from 'app/features/search/hooks/useSearchKeyboardSelection';\nimport { SearchResultsProps, SearchResultsTable } from 'app/features/search/page/components/SearchResultsTable';\nimport { useSearchStateManager } from 'app/features/search/state/SearchStateManager';\nimport { DashboardViewItemKind } from 'app/features/search/types';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { setAllSelection, setItemSelectionState, useHasSelection } from '../state';\n\ninterface SearchViewProps {\n  height: number;\n  width: number;\n  canSelect: boolean;\n}\n\nconst NUM_PLACEHOLDER_ROWS = 50;\nconst initialLoadingView = {\n  view: new DataFrameView(\n    toDataFrame({\n      fields: [\n        { name: 'uid', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill(null) },\n        { name: 'kind', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('dashboard') },\n        { name: 'name', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'location', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill('') },\n        { name: 'tags', display: true, values: Array(NUM_PLACEHOLDER_ROWS).fill([]) },\n      ],\n      meta: {\n        custom: {\n          locationInfo: [],\n        },\n      },\n    })\n  ),\n  loadMoreItems: () => Promise.resolve(),\n  // this is key and controls whether to show the skeleton in generateColumns\n  isItemLoaded: () => false,\n  totalRows: NUM_PLACEHOLDER_ROWS,\n};\n\nexport function SearchView({ width, height, canSelect }: SearchViewProps) {\n  const dispatch = useDispatch();\n  const selectedItems = useSelector((wholeState) => wholeState.browseDashboards.selectedItems);\n  const hasSelection = useHasSelection();\n\n  const { keyboardEvents } = useKeyNavigationListener();\n  const [searchState, stateManager] = useSearchStateManager();\n\n  const value = searchState.result ?? initialLoadingView;\n\n  const selectionChecker = useCallback(\n    (kind: string | undefined, uid: string): boolean => {\n      if (!kind) {\n        return false;\n      }\n\n      // Currently, this indicates _some_ items are selected, not nessicarily all are\n      // selected.\n      if (kind === '*' && uid === '*') {\n        return hasSelection;\n      } else if (kind === '*') {\n        // Unsure how this case can happen\n        return false;\n      }\n\n      return selectedItems[assertDashboardViewItemKind(kind)][uid] ?? false;\n    },\n    [selectedItems, hasSelection]\n  );\n\n  const clearSelection = useCallback(() => {\n    dispatch(setAllSelection({ isSelected: false, folderUID: undefined }));\n  }, [dispatch]);\n\n  const handleItemSelectionChange = useCallback(\n    (kind: string, uid: string) => {\n      const newIsSelected = !selectionChecker(kind, uid);\n\n      dispatch(\n        setItemSelectionState({ item: { kind: assertDashboardViewItemKind(kind), uid }, isSelected: newIsSelected })\n      );\n    },\n    [selectionChecker, dispatch]\n  );\n\n  if (value.totalRows === 0) {\n    return (\n      <div style={{ width }}>\n        <EmptyState\n          button={\n            <Button variant=\"secondary\" onClick={stateManager.onClearSearchAndFilters}>\n              <Trans i18nKey=\"browse-dashboards.no-results.clear\">Clear search and filters</Trans>\n            </Button>\n          }\n          message={t('browse-dashboards.no-results.text', 'No results found for your query')}\n          variant=\"not-found\"\n        />\n      </div>\n    );\n  }\n\n  const props: SearchResultsProps = {\n    response: value,\n    selection: canSelect ? selectionChecker : undefined,\n    selectionToggle: canSelect ? handleItemSelectionChange : undefined,\n    clearSelection,\n    width: width,\n    height: height,\n    onTagSelected: stateManager.onAddTag,\n    keyboardEvents,\n    onDatasourceChange: searchState.datasource ? stateManager.onDatasourceChange : undefined,\n    onClickItem: stateManager.onSearchItemClicked,\n  };\n\n  return <SearchResultsTable {...props} />;\n}\n\nfunction assertDashboardViewItemKind(kind: string): DashboardViewItemKind {\n  switch (kind) {\n    case 'folder':\n      return 'folder';\n    case 'dashboard':\n      return 'dashboard';\n    case 'panel':\n      return 'panel';\n  }\n\n  throw new Error('Unsupported kind' + kind);\n}\n","import { css } from '@emotion/css';\nimport React, { memo, useEffect, useMemo } from 'react';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\nimport { FilterInput, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { useDispatch } from 'app/types';\n\nimport { buildNavModel, getDashboardsTabID } from '../folders/state/navModel';\nimport { useSearchStateManager } from '../search/state/SearchStateManager';\nimport { getSearchPlaceholder } from '../search/tempI18nPhrases';\n\nimport { skipToken, useGetFolderQuery, useSaveFolderMutation } from './api/browseDashboardsAPI';\nimport { BrowseActions } from './components/BrowseActions/BrowseActions';\nimport { BrowseFilters } from './components/BrowseFilters';\nimport { BrowseView } from './components/BrowseView';\nimport CreateNewButton from './components/CreateNewButton';\nimport { FolderActionsButton } from './components/FolderActionsButton';\nimport { SearchView } from './components/SearchView';\nimport { getFolderPermissions } from './permissions';\nimport { setAllSelection, useHasSelection } from './state';\n\nexport interface BrowseDashboardsPageRouteParams {\n  uid?: string;\n  slug?: string;\n}\n\nexport interface Props extends GrafanaRouteComponentProps<BrowseDashboardsPageRouteParams> {}\n\n// New Browse/Manage/Search Dashboards views for nested folders\n\nconst BrowseDashboardsPage = memo(({ match }: Props) => {\n  const { uid: folderUID } = match.params;\n  const dispatch = useDispatch();\n\n  const styles = useStyles2(getStyles);\n  const [searchState, stateManager] = useSearchStateManager();\n  const isSearching = stateManager.hasSearchFilters();\n\n  useEffect(() => {\n    stateManager.initStateFromUrl(folderUID);\n\n    // Clear selected state when folderUID changes\n    dispatch(\n      setAllSelection({\n        isSelected: false,\n        folderUID: undefined,\n      })\n    );\n  }, [dispatch, folderUID, stateManager]);\n\n  useEffect(() => {\n    // Clear the search results when we leave SearchView to prevent old results flashing\n    // when starting a new search\n    if (!isSearching && searchState.result) {\n      stateManager.setState({ result: undefined, includePanels: undefined });\n    }\n  }, [isSearching, searchState.result, stateManager]);\n\n  const { data: folderDTO } = useGetFolderQuery(folderUID ?? skipToken);\n  const [saveFolder] = useSaveFolderMutation();\n  const navModel = useMemo(() => {\n    if (!folderDTO) {\n      return undefined;\n    }\n    const model = buildNavModel(folderDTO);\n\n    // Set the \"Dashboards\" tab to active\n    const dashboardsTabID = getDashboardsTabID(folderDTO.uid);\n    const dashboardsTab = model.children?.find((child) => child.id === dashboardsTabID);\n    if (dashboardsTab) {\n      dashboardsTab.active = true;\n    }\n    return model;\n  }, [folderDTO]);\n\n  const hasSelection = useHasSelection();\n\n  const { canEditFolders, canEditDashboards, canCreateDashboards, canCreateFolders } = getFolderPermissions(folderDTO);\n\n  const showEditTitle = canEditFolders && folderUID;\n  const canSelect = canEditFolders || canEditDashboards;\n  const onEditTitle = async (newValue: string) => {\n    if (folderDTO) {\n      const result = await saveFolder({\n        ...folderDTO,\n        title: newValue,\n      });\n      if ('error' in result) {\n        reportInteraction('grafana_browse_dashboards_page_edit_folder_name', {\n          status: 'failed_with_error',\n          error: result.error,\n        });\n        throw result.error;\n      } else {\n        reportInteraction('grafana_browse_dashboards_page_edit_folder_name', { status: 'success' });\n      }\n    } else {\n      reportInteraction('grafana_browse_dashboards_page_edit_folder_name', { status: 'failed_no_folderDTO' });\n    }\n  };\n\n  return (\n    <Page\n      navId=\"dashboards/browse\"\n      pageNav={navModel}\n      onEditTitle={showEditTitle ? onEditTitle : undefined}\n      actions={\n        <>\n          {folderDTO && <FolderActionsButton folder={folderDTO} />}\n          {(canCreateDashboards || canCreateFolders) && (\n            <CreateNewButton\n              parentFolder={folderDTO}\n              canCreateDashboard={canCreateDashboards}\n              canCreateFolder={canCreateFolders}\n            />\n          )}\n        </>\n      }\n    >\n      <Page.Contents className={styles.pageContents}>\n        <FilterInput\n          placeholder={getSearchPlaceholder(searchState.includePanels)}\n          value={searchState.query}\n          escapeRegex={false}\n          onChange={(e) => stateManager.onQueryChange(e)}\n        />\n\n        {hasSelection ? <BrowseActions /> : <BrowseFilters />}\n\n        <div className={styles.subView}>\n          <AutoSizer>\n            {({ width, height }) =>\n              isSearching ? (\n                <SearchView canSelect={canSelect} width={width} height={height} />\n              ) : (\n                <BrowseView canSelect={canSelect} width={width} height={height} folderUID={folderUID} />\n              )\n            }\n          </AutoSizer>\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  pageContents: css({\n    display: 'grid',\n    gridTemplateRows: 'auto auto 1fr',\n    height: '100%',\n    rowGap: theme.spacing(1),\n  }),\n\n  // AutoSizer needs an element to measure the full height available\n  subView: css({\n    height: '100%',\n  }),\n});\n\nBrowseDashboardsPage.displayName = 'BrowseDashboardsPage';\nexport default BrowseDashboardsPage;\n","import React, { useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Alert, ConfirmModal, Text, Space } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGetAffectedItemsQuery } from '../../api/browseDashboardsAPI';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: () => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const DeleteModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const { data } = useGetAffectedItemsQuery(selectedItems);\n  const deleteIsInvalid = !config.featureToggles.nestedFolders && data && (data.alertRule || data.libraryPanel);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const onDelete = async () => {\n    setIsDeleting(true);\n    try {\n      await onConfirm();\n      setIsDeleting(false);\n      onDismiss();\n    } catch {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <ConfirmModal\n      body={\n        <>\n          <Text element=\"p\">\n            <Trans i18nKey=\"browse-dashboards.action.delete-modal-text\">\n              This action will delete the following content:\n            </Trans>\n          </Text>\n          <DescendantCount selectedItems={selectedItems} />\n          <Space v={2} />\n        </>\n      }\n      description={\n        <>\n          {deleteIsInvalid ? (\n            <Alert\n              severity=\"warning\"\n              title={t('browse-dashboards.action.delete-modal-invalid-title', 'Cannot delete folder')}\n            >\n              <Trans i18nKey=\"browse-dashboards.action.delete-modal-invalid-text\">\n                One or more folders contain library panels or alert rules. Delete these first in order to proceed.\n              </Trans>\n            </Alert>\n          ) : null}\n        </>\n      }\n      confirmationText=\"Delete\"\n      confirmText={\n        isDeleting\n          ? t('browse-dashboards.action.deleting', 'Deleting...')\n          : t('browse-dashboards.action.delete-button', 'Delete')\n      }\n      onDismiss={onDismiss}\n      onConfirm={onDelete}\n      title={t('browse-dashboards.action.delete-modal-title', 'Delete')}\n      {...props}\n    />\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Alert, Button, Field, Modal, Text, Space } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: (targetFolderUid: string) => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const MoveModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const [moveTarget, setMoveTarget] = useState<string>();\n  const [isMoving, setIsMoving] = useState(false);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n\n  const onMove = async () => {\n    if (moveTarget !== undefined) {\n      setIsMoving(true);\n      try {\n        await onConfirm(moveTarget);\n        setIsMoving(false);\n        onDismiss();\n      } catch {\n        setIsMoving(false);\n      }\n    }\n  };\n\n  return (\n    <Modal title={t('browse-dashboards.action.move-modal-title', 'Move')} onDismiss={onDismiss} {...props}>\n      {selectedFolders.length > 0 && (\n        <Alert\n          severity=\"info\"\n          title={t('browse-dashboards.action.move-modal-alert', 'Moving this item may change its permissions.')}\n        />\n      )}\n\n      <Text element=\"p\">\n        <Trans i18nKey=\"browse-dashboards.action.move-modal-text\">This action will move the following content:</Trans>\n      </Text>\n\n      <DescendantCount selectedItems={selectedItems} />\n\n      <Space v={3} />\n\n      <Field label={t('browse-dashboards.action.move-modal-field-label', 'Folder name')}>\n        <FolderPicker value={moveTarget} excludeUIDs={selectedFolders} onChange={setMoveTarget} />\n      </Field>\n\n      <Modal.ButtonRow>\n        <Button onClick={onDismiss} variant=\"secondary\" fill=\"outline\">\n          <Trans i18nKey=\"browse-dashboards.action.cancel-button\">Cancel</Trans>\n        </Button>\n        <Button disabled={moveTarget === undefined || isMoving} onClick={onMove} variant=\"primary\">\n          {isMoving\n            ? t('browse-dashboards.action.moving', 'Moving...')\n            : t('browse-dashboards.action.move-button', 'Move')}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Button, Drawer, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { appEvents } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { FolderDTO } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { useDeleteFolderMutation, useMoveFolderMutation } from '../api/browseDashboardsAPI';\nimport { getFolderPermissions } from '../permissions';\n\nimport { DeleteModal } from './BrowseActions/DeleteModal';\nimport { MoveModal } from './BrowseActions/MoveModal';\n\ninterface Props {\n  folder: FolderDTO;\n}\n\nexport function FolderActionsButton({ folder }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showPermissionsDrawer, setShowPermissionsDrawer] = useState(false);\n  const [moveFolder] = useMoveFolderMutation();\n  const [deleteFolder] = useDeleteFolderMutation();\n  const { canEditFolders, canDeleteFolders, canViewPermissions, canSetPermissions } = getFolderPermissions(folder);\n  // Can only move folders when nestedFolders is enabled\n  const canMoveFolder = config.featureToggles.nestedFolders && canEditFolders;\n\n  const onMove = async (destinationUID: string) => {\n    await moveFolder({ folder, destinationUID });\n    reportInteraction('grafana_manage_dashboards_item_moved', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n  };\n\n  const onDelete = async () => {\n    await deleteFolder(folder);\n    reportInteraction('grafana_manage_dashboards_item_deleted', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n    const { parents } = folder;\n    const parentUrl = parents && parents.length ? parents[parents.length - 1].url : '/dashboards';\n    locationService.push(parentUrl);\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  const managePermissionsLabel = t('browse-dashboards.folder-actions-button.manage-permissions', 'Manage permissions');\n  const moveLabel = t('browse-dashboards.folder-actions-button.move', 'Move');\n  const deleteLabel = t('browse-dashboards.folder-actions-button.delete', 'Delete');\n\n  const menu = (\n    <Menu>\n      {canViewPermissions && <MenuItem onClick={() => setShowPermissionsDrawer(true)} label={managePermissionsLabel} />}\n      {canMoveFolder && <MenuItem onClick={showMoveModal} label={moveLabel} />}\n      {canDeleteFolders && <MenuItem destructive onClick={showDeleteModal} label={deleteLabel} />}\n    </Menu>\n  );\n\n  if (!canViewPermissions && !canMoveFolder && !canDeleteFolders) {\n    return null;\n  }\n\n  return (\n    <>\n      <Dropdown overlay={menu} onVisibleChange={setIsOpen}>\n        <Button variant=\"secondary\">\n          <Trans i18nKey=\"browse-dashboards.folder-actions-button.folder-actions\">Folder actions</Trans>\n          <Icon name={isOpen ? 'angle-up' : 'angle-down'} />\n        </Button>\n      </Dropdown>\n      {showPermissionsDrawer && (\n        <Drawer\n          title={t('browse-dashboards.action.manage-permissions-button', 'Manage permissions')}\n          subtitle={folder.title}\n          onClose={() => setShowPermissionsDrawer(false)}\n          size=\"md\"\n        >\n          <Permissions resource=\"folders\" resourceId={folder.uid} canSetPermissions={canSetPermissions} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n","import { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, FolderDTO } from 'app/types';\n\nfunction checkFolderPermission(action: AccessControlAction, folderDTO?: FolderDTO) {\n  return folderDTO ? contextSrv.hasPermissionInMetadata(action, folderDTO) : contextSrv.hasPermission(action);\n}\n\nexport function getFolderPermissions(folderDTO?: FolderDTO) {\n  // Can only create a folder if we have permissions and either we're at root or nestedFolders is enabled\n  const canCreateDashboards = checkFolderPermission(AccessControlAction.DashboardsCreate, folderDTO);\n  const canCreateFolders = Boolean(\n    (!folderDTO || config.featureToggles.nestedFolders) && checkFolderPermission(AccessControlAction.FoldersCreate)\n  );\n  const canDeleteFolders = checkFolderPermission(AccessControlAction.FoldersDelete, folderDTO);\n  const canEditDashboards = checkFolderPermission(AccessControlAction.DashboardsWrite, folderDTO);\n  const canEditFolders = checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO);\n  const canSetPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsWrite, folderDTO);\n  const canViewPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsRead, folderDTO);\n\n  return {\n    canCreateDashboards,\n    canCreateFolders,\n    canDeleteFolders,\n    canEditDashboards,\n    canEditFolders,\n    canSetPermissions,\n    canViewPermissions,\n  };\n}\n"],"names":["initialState","defaultQueryParams","getLocalStorageLayout","SearchStateManager","StateManagerBase","query","tagToRemove","tag","tags","newTag","datasource","panel_type","e","starred","sort","layout","includePanels","store","folderUid","doInitialSearch","stateFromUrl","prevSort","stateManager","state","q","trackingInfo","searcher","searchTimestamp","result","error","getSearchStateManager","useSearchStateManager","getSearchPlaceholder","getNewDashboardPhrase","getNewFolderPhrase","getImportPhrase","getNewPhrase","BrowseActions","styles","getStyles","dispatch","selectedItems","deleteItems","moveItems","moveIsInvalid","config","v","isSearching","onActionComplete","onDelete","trackAction","onMove","destinationUID","showMoveModal","MoveModal","showDeleteModal","DeleteModal","moveButton","Button","Tooltip","theme","actionMap","action","selectedDashboards","uid","selectedFolders","getLayoutOptions","getValidQueryLayout","ActionRow","onLayoutChange","onSortChange","onStarredFilterChange","onTagFilterChange","getTagOptions","getSortOptions","sortPlaceholder","onDatasourceChange","onPanelTypeChange","onSetIncludePanels","showStarredFilter","hideLayout","disabledOptions","TagFilter","Checkbox","RadioButtonGroup","SortPicker","change","BrowseFilters","searchState","SelectionState","CheckboxCell","row","isSelected","onItemSelectionChange","item","CheckboxSpacer","selectors","ev","CheckboxHeaderCell","onAllSelectionChange","CHEVRON_SIZE","ICON_SIZE","NameCell","data","onFolderClick","treeID","level","isOpen","childrenByParentUID","isLoading","iconName","Indent","Text","IconButton","Spinner","Icon","Link","TagsCell","TagList","HEADER_HEIGHT","ROW_HEIGHT","DIVIDER_HEIGHT","DashboardsTree","items","width","height","isItemLoaded","requestLoadMore","canSelect","infiniteLoaderRef","listRef","tableColumns","checkboxColumn","nameColumn","props","tagsColumns","table","getTableProps","getTableBodyProps","headerGroups","virtualData","handleIsItemLoaded","itemIndex","handleLoadMore","startIndex","endIndex","parentUID","getRowHeight","rowIndex","headerGroup","key","headerGroupProps","column","headerProps","onItemsRendered","ref","elem","VirtualListRow","index","style","rows","prepareRow","dashboardItem","cell","cellProps","BrowseView","folderUID","status","flatTree","handleFolderClick","clickedFolderUID","handleItemSelectionChange","selection","hasSelectedDescendants","treeItem","EmptyListCTA","CallToActionCard","newState","collection","thisIsSelected","initialFormModel","NewFolderForm","onCancel","onConfirm","handleSubmit","register","errors","translatedFolderNameRequiredPhrase","validateFolderName","folderName","fieldNameLabel","form","Field","Input","Stack","CreateNewButton","parentFolder","canCreateDashboard","canCreateFolder","setIsOpen","location","newFolder","showNewFolderDrawer","setShowNewFolderDrawer","onCreateFolder","depth","newMenu","Menu","MenuItem","addFolderUidToUrl","Dropdown","Drawer","url","NUM_PLACEHOLDER_ROWS","initialLoadingView","DataFrameView","SearchView","wholeState","hasSelection","keyboardEvents","value","selectionChecker","kind","assertDashboardViewItemKind","clearSelection","newIsSelected","EmptyState","SearchResultsTable","BrowseDashboardsPage","match","folderDTO","saveFolder","navModel","model","dashboardsTabID","dashboardsTab","child","canEditFolders","canEditDashboards","canCreateDashboards","canCreateFolders","showEditTitle","onEditTitle","newValue","Page","FolderActionsButton","FilterInput","onDismiss","deleteIsInvalid","isDeleting","setIsDeleting","moveTarget","setMoveTarget","isMoving","setIsMoving","folder","showPermissionsDrawer","setShowPermissionsDrawer","moveFolder","deleteFolder","canDeleteFolders","canViewPermissions","canSetPermissions","canMoveFolder","parents","parentUrl","managePermissionsLabel","moveLabel","deleteLabel","menu","checkFolderPermission","getFolderPermissions"],"sourceRoot":""}