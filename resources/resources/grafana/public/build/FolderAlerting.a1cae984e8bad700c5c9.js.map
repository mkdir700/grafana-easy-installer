{"version":3,"file":"FolderAlerting.a1cae984e8bad700c5c9.js","mappings":"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","sources":["webpack://grafana/./public/app/features/alerting/unified/AlertsFolderView.tsx","webpack://grafana/./public/app/features/browse-dashboards/BrowseFolderAlertingPage.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/DeleteModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/BrowseActions/MoveModal.tsx","webpack://grafana/./public/app/features/browse-dashboards/components/FolderActionsButton.tsx","webpack://grafana/./public/app/features/browse-dashboards/permissions.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { orderBy } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'react-use';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Card, FilterInput, Icon, Pagination, Select, TagList, useStyles2, Stack } from '@grafana/ui';\nimport { DEFAULT_PER_PAGE_PAGINATION } from 'app/core/constants';\nimport { getQueryParamValue } from 'app/core/utils/query';\nimport { FolderState, useDispatch } from 'app/types';\nimport { CombinedRule } from 'app/types/unified-alerting';\n\nimport { useCombinedRuleNamespaces } from './hooks/useCombinedRuleNamespaces';\nimport { usePagination } from './hooks/usePagination';\nimport { useURLSearchParams } from './hooks/useURLSearchParams';\nimport { fetchPromRulesAction, fetchRulerRulesAction } from './state/actions';\nimport { combineMatcherStrings, labelsMatchMatchers, parseMatchers } from './utils/alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from './utils/datasource';\nimport { createViewLink } from './utils/misc';\n\ninterface Props {\n  folder: FolderState;\n}\n\nenum SortOrder {\n  Ascending = 'alpha-asc',\n  Descending = 'alpha-desc',\n}\n\nconst sortOptions: Array<SelectableValue<SortOrder>> = [\n  { label: 'Alphabetically [A-Z]', value: SortOrder.Ascending },\n  { label: 'Alphabetically [Z-A]', value: SortOrder.Descending },\n];\n\nexport const AlertsFolderView = ({ folder }: Props) => {\n  const styles = useStyles2(getStyles);\n  const dispatch = useDispatch();\n\n  const onTagClick = (tagName: string) => {\n    const matchersString = combineMatcherStrings(labelFilter, tagName);\n    setLabelFilter(matchersString);\n  };\n\n  useEffect(() => {\n    dispatch(fetchPromRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n    dispatch(fetchRulerRulesAction({ rulesSourceName: GRAFANA_RULES_SOURCE_NAME }));\n  }, [dispatch]);\n\n  const combinedNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const { nameFilter, labelFilter, sortOrder, setNameFilter, setLabelFilter, setSortOrder } =\n    useAlertsFolderViewParams();\n\n  const matchingNamespace = combinedNamespaces.find((namespace) => namespace.uid === folder.uid);\n\n  const alertRules = matchingNamespace?.groups.flatMap((group) => group.rules) ?? [];\n\n  const filteredRules = filterAndSortRules(alertRules, nameFilter, labelFilter, sortOrder ?? SortOrder.Ascending);\n\n  const hasNoResults = alertRules.length === 0 || filteredRules.length === 0;\n  const { page, numberOfPages, onPageChange, pageItems } = usePagination(filteredRules, 1, DEFAULT_PER_PAGE_PAGINATION);\n\n  return (\n    <div className={styles.container}>\n      <Stack direction=\"column\" gap={3}>\n        <FilterInput\n          value={nameFilter}\n          onChange={setNameFilter}\n          placeholder=\"Search alert rules by name\"\n          data-testid=\"name-filter\"\n        />\n        <Stack direction=\"row\">\n          <Select<SortOrder>\n            value={sortOrder}\n            onChange={({ value }) => value && setSortOrder(value)}\n            options={sortOptions}\n            width={25}\n            aria-label=\"Sort\"\n            placeholder={`Sort (Default A-Z)`}\n            prefix={<Icon name={sortOrder === SortOrder.Ascending ? 'sort-amount-up' : 'sort-amount-down'} />}\n          />\n          <FilterInput\n            value={labelFilter}\n            onChange={setLabelFilter}\n            placeholder=\"Search alerts by labels\"\n            className={styles.filterLabelsInput}\n            data-testid=\"label-filter\"\n          />\n        </Stack>\n\n        <Stack direction=\"column\" gap={1}>\n          {pageItems.map((currentRule) => (\n            <Card\n              key={currentRule.name}\n              href={createViewLink('grafana', currentRule, '')}\n              className={styles.card}\n              data-testid=\"alert-card-row\"\n            >\n              <Card.Heading>{currentRule.name}</Card.Heading>\n              <Card.Tags>\n                <TagList\n                  onClick={onTagClick}\n                  tags={Object.entries(currentRule.labels).map(([label, value]) => `${label}=${value}`)}\n                />\n              </Card.Tags>\n              <Card.Meta>\n                <div>\n                  <Icon name=\"folder\" /> {folder.title}\n                </div>\n              </Card.Meta>\n            </Card>\n          ))}\n        </Stack>\n        {hasNoResults && <div className={styles.noResults}>No alert rules found</div>}\n        <div className={styles.pagination}>\n          <Pagination\n            currentPage={page}\n            numberOfPages={numberOfPages}\n            onNavigate={onPageChange}\n            hideWhenSinglePage={true}\n          />\n        </div>\n      </Stack>\n    </div>\n  );\n};\n\nenum AlertFolderViewParams {\n  nameFilter = 'nameFilter',\n  labelFilter = 'labelFilter',\n  sortOrder = 'sort',\n}\n\nfunction useAlertsFolderViewParams() {\n  const [searchParams, setSearchParams] = useURLSearchParams();\n\n  const [nameFilter, setNameFilter] = useState(searchParams.get(AlertFolderViewParams.nameFilter) ?? '');\n  const [labelFilter, setLabelFilter] = useState(searchParams.get(AlertFolderViewParams.labelFilter) ?? '');\n\n  const sortParam = searchParams.get(AlertFolderViewParams.sortOrder);\n  const [sortOrder, setSortOrder] = useState<SortOrder | undefined>(\n    sortParam === SortOrder.Ascending\n      ? SortOrder.Ascending\n      : sortParam === SortOrder.Descending\n        ? SortOrder.Descending\n        : undefined\n  );\n\n  useDebounce(\n    () =>\n      setSearchParams(\n        {\n          [AlertFolderViewParams.nameFilter]: getQueryParamValue(nameFilter),\n          [AlertFolderViewParams.labelFilter]: getQueryParamValue(labelFilter),\n          [AlertFolderViewParams.sortOrder]: getQueryParamValue(sortOrder),\n        },\n        true\n      ),\n    400,\n    [nameFilter, labelFilter, sortOrder]\n  );\n\n  return { nameFilter, labelFilter, sortOrder, setNameFilter, setLabelFilter, setSortOrder };\n}\n\nfunction filterAndSortRules(\n  originalRules: CombinedRule[],\n  nameFilter: string,\n  labelFilter: string,\n  sortOrder: SortOrder\n) {\n  const matchers = parseMatchers(labelFilter);\n  let rules = originalRules.filter(\n    (rule) => rule.name.toLowerCase().includes(nameFilter.toLowerCase()) && labelsMatchMatchers(rule.labels, matchers)\n  );\n\n  return orderBy(rules, (x) => x.name.toLowerCase(), [sortOrder === SortOrder.Ascending ? 'asc' : 'desc']);\n}\n\nexport const getStyles = (theme: GrafanaTheme2) => ({\n  container: css`\n    padding: ${theme.spacing(1)};\n  `,\n  card: css`\n    grid-template-columns: auto 1fr 2fr;\n    margin: 0;\n  `,\n  pagination: css`\n    align-self: center;\n  `,\n  filterLabelsInput: css`\n    flex: 1;\n    width: auto;\n    min-width: 240px;\n  `,\n  noResults: css`\n    padding: ${theme.spacing(2)};\n    background-color: ${theme.colors.background.secondary};\n    font-style: italic;\n  `,\n});\n","import React, { useMemo } from 'react';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { buildNavModel, getAlertingTabID } from 'app/features/folders/state/navModel';\nimport { useSelector } from 'app/types';\n\nimport { AlertsFolderView } from '../alerting/unified/AlertsFolderView';\n\nimport { useGetFolderQuery, useSaveFolderMutation } from './api/browseDashboardsAPI';\nimport { FolderActionsButton } from './components/FolderActionsButton';\n\nexport interface OwnProps extends GrafanaRouteComponentProps<{ uid: string }> {}\n\nexport function BrowseFolderAlertingPage({ match }: OwnProps) {\n  const { uid: folderUID } = match.params;\n  const { data: folderDTO } = useGetFolderQuery(folderUID);\n  const folder = useSelector((state) => state.folder);\n  const [saveFolder] = useSaveFolderMutation();\n\n  const navModel = useMemo(() => {\n    if (!folderDTO) {\n      return undefined;\n    }\n    const model = buildNavModel(folderDTO);\n\n    // Set the \"Alerting\" tab to active\n    const alertingTabID = getAlertingTabID(folderDTO.uid);\n    const alertingTab = model.children?.find((child) => child.id === alertingTabID);\n    if (alertingTab) {\n      alertingTab.active = true;\n    }\n    return model;\n  }, [folderDTO]);\n\n  const onEditTitle = folderUID\n    ? async (newValue: string) => {\n        if (folderDTO) {\n          const result = await saveFolder({\n            ...folderDTO,\n            title: newValue,\n          });\n          if ('error' in result) {\n            throw result.error;\n          }\n        }\n      }\n    : undefined;\n\n  return (\n    <Page\n      navId=\"dashboards/browse\"\n      pageNav={navModel}\n      onEditTitle={onEditTitle}\n      actions={<>{folderDTO && <FolderActionsButton folder={folderDTO} />}</>}\n    >\n      <Page.Contents>\n        <AlertsFolderView folder={folder} />\n      </Page.Contents>\n    </Page>\n  );\n}\n\nexport default BrowseFolderAlertingPage;\n","import React, { useState } from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Alert, ConfirmModal, Text, Space } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nimport { useGetAffectedItemsQuery } from '../../api/browseDashboardsAPI';\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: () => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const DeleteModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const { data } = useGetAffectedItemsQuery(selectedItems);\n  const deleteIsInvalid = !config.featureToggles.nestedFolders && data && (data.alertRule || data.libraryPanel);\n  const [isDeleting, setIsDeleting] = useState(false);\n  const onDelete = async () => {\n    setIsDeleting(true);\n    try {\n      await onConfirm();\n      setIsDeleting(false);\n      onDismiss();\n    } catch {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <ConfirmModal\n      body={\n        <>\n          <Text element=\"p\">\n            <Trans i18nKey=\"browse-dashboards.action.delete-modal-text\">\n              This action will delete the following content:\n            </Trans>\n          </Text>\n          <DescendantCount selectedItems={selectedItems} />\n          <Space v={2} />\n        </>\n      }\n      description={\n        <>\n          {deleteIsInvalid ? (\n            <Alert\n              severity=\"warning\"\n              title={t('browse-dashboards.action.delete-modal-invalid-title', 'Cannot delete folder')}\n            >\n              <Trans i18nKey=\"browse-dashboards.action.delete-modal-invalid-text\">\n                One or more folders contain library panels or alert rules. Delete these first in order to proceed.\n              </Trans>\n            </Alert>\n          ) : null}\n        </>\n      }\n      confirmationText=\"Delete\"\n      confirmText={\n        isDeleting\n          ? t('browse-dashboards.action.deleting', 'Deleting...')\n          : t('browse-dashboards.action.delete-button', 'Delete')\n      }\n      onDismiss={onDismiss}\n      onConfirm={onDelete}\n      title={t('browse-dashboards.action.delete-modal-title', 'Delete')}\n      {...props}\n    />\n  );\n};\n","import React, { useState } from 'react';\n\nimport { Alert, Button, Field, Modal, Text, Space } from '@grafana/ui';\nimport { FolderPicker } from 'app/core/components/Select/FolderPicker';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { DashboardTreeSelection } from '../../types';\n\nimport { DescendantCount } from './DescendantCount';\n\nexport interface Props {\n  isOpen: boolean;\n  onConfirm: (targetFolderUid: string) => Promise<void>;\n  onDismiss: () => void;\n  selectedItems: DashboardTreeSelection;\n}\n\nexport const MoveModal = ({ onConfirm, onDismiss, selectedItems, ...props }: Props) => {\n  const [moveTarget, setMoveTarget] = useState<string>();\n  const [isMoving, setIsMoving] = useState(false);\n  const selectedFolders = Object.keys(selectedItems.folder).filter((uid) => selectedItems.folder[uid]);\n\n  const onMove = async () => {\n    if (moveTarget !== undefined) {\n      setIsMoving(true);\n      try {\n        await onConfirm(moveTarget);\n        setIsMoving(false);\n        onDismiss();\n      } catch {\n        setIsMoving(false);\n      }\n    }\n  };\n\n  return (\n    <Modal title={t('browse-dashboards.action.move-modal-title', 'Move')} onDismiss={onDismiss} {...props}>\n      {selectedFolders.length > 0 && (\n        <Alert\n          severity=\"info\"\n          title={t('browse-dashboards.action.move-modal-alert', 'Moving this item may change its permissions.')}\n        />\n      )}\n\n      <Text element=\"p\">\n        <Trans i18nKey=\"browse-dashboards.action.move-modal-text\">This action will move the following content:</Trans>\n      </Text>\n\n      <DescendantCount selectedItems={selectedItems} />\n\n      <Space v={3} />\n\n      <Field label={t('browse-dashboards.action.move-modal-field-label', 'Folder name')}>\n        <FolderPicker value={moveTarget} excludeUIDs={selectedFolders} onChange={setMoveTarget} />\n      </Field>\n\n      <Modal.ButtonRow>\n        <Button onClick={onDismiss} variant=\"secondary\" fill=\"outline\">\n          <Trans i18nKey=\"browse-dashboards.action.cancel-button\">Cancel</Trans>\n        </Button>\n        <Button disabled={moveTarget === undefined || isMoving} onClick={onMove} variant=\"primary\">\n          {isMoving\n            ? t('browse-dashboards.action.moving', 'Moving...')\n            : t('browse-dashboards.action.move-button', 'Move')}\n        </Button>\n      </Modal.ButtonRow>\n    </Modal>\n  );\n};\n","import React, { useState } from 'react';\n\nimport { config, locationService, reportInteraction } from '@grafana/runtime';\nimport { Button, Drawer, Dropdown, Icon, Menu, MenuItem } from '@grafana/ui';\nimport { Permissions } from 'app/core/components/AccessControl';\nimport { appEvents } from 'app/core/core';\nimport { t, Trans } from 'app/core/internationalization';\nimport { FolderDTO } from 'app/types';\nimport { ShowModalReactEvent } from 'app/types/events';\n\nimport { useDeleteFolderMutation, useMoveFolderMutation } from '../api/browseDashboardsAPI';\nimport { getFolderPermissions } from '../permissions';\n\nimport { DeleteModal } from './BrowseActions/DeleteModal';\nimport { MoveModal } from './BrowseActions/MoveModal';\n\ninterface Props {\n  folder: FolderDTO;\n}\n\nexport function FolderActionsButton({ folder }: Props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [showPermissionsDrawer, setShowPermissionsDrawer] = useState(false);\n  const [moveFolder] = useMoveFolderMutation();\n  const [deleteFolder] = useDeleteFolderMutation();\n  const { canEditFolders, canDeleteFolders, canViewPermissions, canSetPermissions } = getFolderPermissions(folder);\n  // Can only move folders when nestedFolders is enabled\n  const canMoveFolder = config.featureToggles.nestedFolders && canEditFolders;\n\n  const onMove = async (destinationUID: string) => {\n    await moveFolder({ folder, destinationUID });\n    reportInteraction('grafana_manage_dashboards_item_moved', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n  };\n\n  const onDelete = async () => {\n    await deleteFolder(folder);\n    reportInteraction('grafana_manage_dashboards_item_deleted', {\n      item_counts: {\n        folder: 1,\n        dashboard: 0,\n      },\n      source: 'folder_actions',\n    });\n    const { parents } = folder;\n    const parentUrl = parents && parents.length ? parents[parents.length - 1].url : '/dashboards';\n    locationService.push(parentUrl);\n  };\n\n  const showMoveModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: MoveModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onMove,\n        },\n      })\n    );\n  };\n\n  const showDeleteModal = () => {\n    appEvents.publish(\n      new ShowModalReactEvent({\n        component: DeleteModal,\n        props: {\n          selectedItems: {\n            folder: { [folder.uid]: true },\n            dashboard: {},\n            panel: {},\n            $all: false,\n          },\n          onConfirm: onDelete,\n        },\n      })\n    );\n  };\n\n  const managePermissionsLabel = t('browse-dashboards.folder-actions-button.manage-permissions', 'Manage permissions');\n  const moveLabel = t('browse-dashboards.folder-actions-button.move', 'Move');\n  const deleteLabel = t('browse-dashboards.folder-actions-button.delete', 'Delete');\n\n  const menu = (\n    <Menu>\n      {canViewPermissions && <MenuItem onClick={() => setShowPermissionsDrawer(true)} label={managePermissionsLabel} />}\n      {canMoveFolder && <MenuItem onClick={showMoveModal} label={moveLabel} />}\n      {canDeleteFolders && <MenuItem destructive onClick={showDeleteModal} label={deleteLabel} />}\n    </Menu>\n  );\n\n  if (!canViewPermissions && !canMoveFolder && !canDeleteFolders) {\n    return null;\n  }\n\n  return (\n    <>\n      <Dropdown overlay={menu} onVisibleChange={setIsOpen}>\n        <Button variant=\"secondary\">\n          <Trans i18nKey=\"browse-dashboards.folder-actions-button.folder-actions\">Folder actions</Trans>\n          <Icon name={isOpen ? 'angle-up' : 'angle-down'} />\n        </Button>\n      </Dropdown>\n      {showPermissionsDrawer && (\n        <Drawer\n          title={t('browse-dashboards.action.manage-permissions-button', 'Manage permissions')}\n          subtitle={folder.title}\n          onClose={() => setShowPermissionsDrawer(false)}\n          size=\"md\"\n        >\n          <Permissions resource=\"folders\" resourceId={folder.uid} canSetPermissions={canSetPermissions} />\n        </Drawer>\n      )}\n    </>\n  );\n}\n","import { config } from '@grafana/runtime';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, FolderDTO } from 'app/types';\n\nfunction checkFolderPermission(action: AccessControlAction, folderDTO?: FolderDTO) {\n  return folderDTO ? contextSrv.hasPermissionInMetadata(action, folderDTO) : contextSrv.hasPermission(action);\n}\n\nexport function getFolderPermissions(folderDTO?: FolderDTO) {\n  // Can only create a folder if we have permissions and either we're at root or nestedFolders is enabled\n  const canCreateDashboards = checkFolderPermission(AccessControlAction.DashboardsCreate, folderDTO);\n  const canCreateFolders = Boolean(\n    (!folderDTO || config.featureToggles.nestedFolders) && checkFolderPermission(AccessControlAction.FoldersCreate)\n  );\n  const canDeleteFolders = checkFolderPermission(AccessControlAction.FoldersDelete, folderDTO);\n  const canEditDashboards = checkFolderPermission(AccessControlAction.DashboardsWrite, folderDTO);\n  const canEditFolders = checkFolderPermission(AccessControlAction.FoldersWrite, folderDTO);\n  const canSetPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsWrite, folderDTO);\n  const canViewPermissions = checkFolderPermission(AccessControlAction.FoldersPermissionsRead, folderDTO);\n\n  return {\n    canCreateDashboards,\n    canCreateFolders,\n    canDeleteFolders,\n    canEditDashboards,\n    canEditFolders,\n    canSetPermissions,\n    canViewPermissions,\n  };\n}\n"],"names":["SortOrder","sortOptions","AlertsFolderView","folder","styles","getStyles","dispatch","onTagClick","tagName","matchersString","labelFilter","setLabelFilter","combinedNamespaces","useCombinedRuleNamespaces","nameFilter","sortOrder","setNameFilter","setSortOrder","useAlertsFolderViewParams","alertRules","namespace","group","filteredRules","filterAndSortRules","hasNoResults","page","numberOfPages","onPageChange","pageItems","usePagination","Stack","FilterInput","Select","value","Icon","currentRule","Card","TagList","label","Pagination","AlertFolderViewParams","searchParams","setSearchParams","useURLSearchParams","sortParam","useDebounce","originalRules","matchers","rules","rule","x","theme","BrowseFolderAlertingPage","match","folderUID","folderDTO","state","saveFolder","navModel","model","alertingTabID","alertingTab","child","onEditTitle","newValue","result","Page","FolderActionsButton","DeleteModal","onConfirm","onDismiss","selectedItems","props","data","deleteIsInvalid","isDeleting","setIsDeleting","onDelete","MoveModal","moveTarget","setMoveTarget","isMoving","setIsMoving","selectedFolders","uid","onMove","isOpen","setIsOpen","showPermissionsDrawer","setShowPermissionsDrawer","moveFolder","deleteFolder","canEditFolders","canDeleteFolders","canViewPermissions","canSetPermissions","canMoveFolder","destinationUID","parents","parentUrl","showMoveModal","showDeleteModal","managePermissionsLabel","moveLabel","deleteLabel","menu","checkFolderPermission","action","getFolderPermissions","canCreateDashboards","canCreateFolders","canEditDashboards"],"sourceRoot":""}