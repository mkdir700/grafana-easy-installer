{"version":3,"file":"xychart.4de639f7ac50ceaa2e10.js","mappings":"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","sources":["webpack://grafana/./public/app/plugins/panel/xychart/dims.ts","webpack://grafana/./public/app/plugins/panel/xychart/AutoEditor.tsx","webpack://grafana/./public/app/plugins/panel/xychart/ScatterSeriesEditor.tsx","webpack://grafana/./public/app/plugins/panel/xychart/ManualEditor.tsx","webpack://grafana/./public/app/plugins/panel/xychart/TooltipView.tsx","webpack://grafana/./public/app/plugins/panel/xychart/utils.ts","webpack://grafana/./public/app/plugins/panel/xychart/XYChartTooltip.tsx","webpack://grafana/./public/app/plugins/panel/xychart/config.ts","webpack://grafana/./public/app/plugins/panel/xychart/scatter.ts","webpack://grafana/./public/app/plugins/panel/xychart/XYChartPanel.tsx","webpack://grafana/./public/app/plugins/panel/xychart/module.tsx","webpack://grafana/./public/app/plugins/panel/xychart/panelcfg.gen.ts"],"sourcesContent":["import { DataFrame, Field, FieldMatcher, FieldType, getFieldDisplayName } from '@grafana/data';\nimport { XYFieldMatchers } from 'app/core/components/GraphNG/types';\n\nimport { XYDimensionConfig } from './panelcfg.gen';\n\n// TODO: fix import\n\nexport enum DimensionError {\n  NoData,\n  BadFrameSelection,\n  XNotFound,\n}\n\nexport interface XYDimensions {\n  frame: DataFrame; // matches order from configs, excluds non-graphable values\n  x: Field;\n  fields: XYFieldMatchers;\n  hasData?: boolean;\n  hasTime?: boolean;\n}\n\nexport interface XYDimensionsError {\n  error: DimensionError;\n}\n\nexport function isGraphable(field: Field) {\n  return field.type === FieldType.number;\n}\n\nexport function getXYDimensions(cfg?: XYDimensionConfig, data?: DataFrame[]): XYDimensions | XYDimensionsError {\n  if (!data || !data.length) {\n    return { error: DimensionError.NoData };\n  }\n  if (!cfg) {\n    cfg = {\n      frame: 0,\n    };\n  }\n\n  let frame = data[cfg.frame ?? 0];\n  if (!frame) {\n    return { error: DimensionError.BadFrameSelection };\n  }\n\n  let xIndex = -1;\n  for (let i = 0; i < frame.fields.length; i++) {\n    const f = frame.fields[i];\n    if (cfg.x && cfg.x === getFieldDisplayName(f, frame, data)) {\n      xIndex = i;\n      break;\n    }\n    if (isGraphable(f) && !cfg.x) {\n      xIndex = i;\n      break;\n    }\n  }\n\n  let hasTime = false;\n  const x = frame.fields[xIndex];\n  const fields: Field[] = [x];\n  for (const f of frame.fields) {\n    if (f.type === FieldType.time) {\n      hasTime = true;\n    }\n    if (f === x || !isGraphable(f)) {\n      continue;\n    }\n    if (cfg.exclude) {\n      const name = getFieldDisplayName(f, frame, data);\n      if (cfg.exclude.includes(name)) {\n        continue;\n      }\n    }\n    fields.push(f);\n  }\n\n  return {\n    x,\n    fields: {\n      x: getSimpleFieldMatcher(x),\n      y: getSimpleFieldNotMatcher(x), // Not x\n    },\n    frame: {\n      ...frame,\n      fields,\n    },\n    hasData: frame.fields.length > 0,\n    hasTime,\n  };\n}\n\nfunction getSimpleFieldMatcher(f: Field): FieldMatcher {\n  if (!f) {\n    return () => false;\n  }\n  // the field may change if sorted\n  return (field) => f === field || !!(f.state && f.state === field.state);\n}\n\nfunction getSimpleFieldNotMatcher(f: Field): FieldMatcher {\n  if (!f) {\n    return () => false;\n  }\n  const m = getSimpleFieldMatcher(f);\n  return (field) => !m(field, { fields: [], length: 0 }, []);\n}\n","import { css } from '@emotion/css';\nimport React, { useMemo } from 'react';\n\nimport {\n  SelectableValue,\n  getFrameDisplayName,\n  StandardEditorProps,\n  getFieldDisplayName,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { Field, IconButton, Select, useStyles2 } from '@grafana/ui';\n\nimport { getXYDimensions, isGraphable } from './dims';\nimport { XYDimensionConfig, Options } from './panelcfg.gen';\n\ninterface XYInfo {\n  numberFields: Array<SelectableValue<string>>;\n  xAxis?: SelectableValue<string>;\n  yFields: Array<SelectableValue<boolean>>;\n}\n\nexport const AutoEditor = ({ value, onChange, context }: StandardEditorProps<XYDimensionConfig, any, Options>) => {\n  const frameNames = useMemo(() => {\n    if (context?.data?.length) {\n      return context.data.map((f, idx) => ({\n        value: idx,\n        label: `${getFrameDisplayName(f, idx)} (index: ${idx}, rows: ${f.length})`,\n      }));\n    }\n    return [{ value: 0, label: 'First result' }];\n  }, [context.data]);\n\n  const dims = useMemo(() => getXYDimensions(value, context.data), [context.data, value]);\n\n  const info = useMemo(() => {\n    const v: XYInfo = {\n      numberFields: [],\n      yFields: [],\n      xAxis: value?.x\n        ? {\n            label: `${value.x} (Not found)`,\n            value: value.x, // empty\n          }\n        : undefined,\n    };\n    const frame = context.data ? context.data[value?.frame ?? 0] : undefined;\n    if (frame) {\n      const xName = 'x' in dims ? getFieldDisplayName(dims.x, dims.frame, context.data) : undefined;\n      for (let field of frame.fields) {\n        if (isGraphable(field)) {\n          const name = getFieldDisplayName(field, frame, context.data);\n          const sel = {\n            label: name,\n            value: name,\n          };\n          v.numberFields.push(sel);\n          if (value?.x && name === value.x) {\n            v.xAxis = sel;\n          }\n          if (xName !== name) {\n            v.yFields.push({\n              label: name,\n              value: value?.exclude?.includes(name),\n            });\n          }\n        }\n      }\n      if (!v.xAxis) {\n        v.xAxis = { label: xName, value: xName };\n      }\n    }\n\n    return v;\n  }, [dims, context.data, value]);\n\n  const styles = useStyles2(getStyles);\n\n  if (!context.data?.length) {\n    return <div>No data...</div>;\n  }\n\n  return (\n    <div>\n      <Field label={'Data'}>\n        <Select\n          isClearable={true}\n          options={frameNames}\n          placeholder={'Change filter'}\n          value={frameNames.find((v) => v.value === value?.frame)}\n          onChange={(v) => {\n            onChange({\n              ...value,\n              frame: v?.value!,\n              x: undefined,\n            });\n          }}\n        />\n      </Field>\n      <Field label={'X Field'}>\n        <Select\n          isClearable={true}\n          options={info.numberFields}\n          value={info.xAxis}\n          placeholder={`${info.numberFields?.[0].label} (First numeric)`}\n          onChange={(v) => {\n            onChange({\n              ...value,\n              x: v?.value,\n            });\n          }}\n        />\n      </Field>\n      <Field label={'Y Fields'}>\n        <div>\n          {info.yFields.map((v) => (\n            <div key={v.label} className={styles.row}>\n              <IconButton\n                name={v.value ? 'eye-slash' : 'eye'}\n                onClick={() => {\n                  const exclude: string[] = value?.exclude ? [...value.exclude] : [];\n                  let idx = exclude.indexOf(v.label!);\n                  if (idx < 0) {\n                    exclude.push(v.label!);\n                  } else {\n                    exclude.splice(idx, 1);\n                  }\n                  onChange({\n                    ...value,\n                    exclude,\n                  });\n                }}\n                tooltip={v.value ? 'Disable' : 'Enable'}\n              />\n              {v.label}\n            </div>\n          ))}\n        </div>\n      </Field>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  sorter: css`\n    margin-top: 10px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: center;\n    cursor: pointer;\n  `,\n\n  row: css`\n    padding: ${theme.spacing(0.5, 1)};\n    border-radius: ${theme.shape.radius.default};\n    background: ${theme.colors.background.secondary};\n    min-height: ${theme.spacing(4)};\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    align-items: center;\n    margin-bottom: 3px;\n    border: 1px solid ${theme.components.input.borderColor};\n  `,\n});\n","import React from 'react';\n\nimport { StandardEditorProps, FieldNamePickerBaseNameMode } from '@grafana/data';\nimport { Field } from '@grafana/ui';\nimport { FieldNamePicker } from '@grafana/ui/src/components/MatchersUI/FieldNamePicker';\nimport { ColorDimensionEditor, ScaleDimensionEditor } from 'app/features/dimensions/editors';\n\nimport { Options, ScatterSeriesConfig } from './panelcfg.gen';\n\nexport interface Props extends StandardEditorProps<ScatterSeriesConfig, unknown, Options> {\n  baseNameMode: FieldNamePickerBaseNameMode;\n  frameFilter?: number;\n}\n\nexport const ScatterSeriesEditor = ({ value, onChange, context, baseNameMode, frameFilter = -1 }: Props) => {\n  const onFieldChange = (val: unknown | undefined, field: string) => {\n    onChange({ ...value, [field]: val });\n  };\n\n  const frame = context.data && frameFilter > -1 ? context.data[frameFilter] : undefined;\n\n  return (\n    <div>\n      <Field label={'X Field'}>\n        <FieldNamePicker\n          value={value.x ?? ''}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'x')}\n          item={{\n            id: 'x',\n            name: 'x',\n            settings: {\n              filter: (field) =>\n                frame?.fields.some((obj) => obj.state?.displayName === field.state?.displayName) ?? true,\n              baseNameMode,\n              placeholderText: 'select X field',\n            },\n          }}\n        />\n      </Field>\n      <Field label={'Y Field'}>\n        <FieldNamePicker\n          value={value.y ?? ''}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'y')}\n          item={{\n            id: 'y',\n            name: 'y',\n            settings: {\n              filter: (field) =>\n                frame?.fields.some((obj) => obj.state?.displayName === field.state?.displayName) ?? true,\n              baseNameMode,\n              placeholderText: 'select Y field',\n            },\n          }}\n        />\n      </Field>\n      <Field label={'Point color'}>\n        <ColorDimensionEditor\n          value={value.pointColor!}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'pointColor')}\n          item={{\n            id: 'x',\n            name: 'x',\n            settings: {\n              baseNameMode,\n              isClearable: true,\n              placeholder: 'Use standard color scheme',\n            },\n          }}\n        />\n      </Field>\n      <Field label={'Point size'}>\n        <ScaleDimensionEditor\n          value={value.pointSize!}\n          context={context}\n          onChange={(field) => onFieldChange(field, 'pointSize')}\n          item={{\n            id: 'x',\n            name: 'x',\n            settings: {\n              min: 1,\n              max: 100,\n            },\n          }}\n        />\n      </Field>\n    </div>\n  );\n};\n","import { css, cx } from '@emotion/css';\nimport React, { useState, useEffect, useMemo } from 'react';\n\nimport {\n  GrafanaTheme2,\n  StandardEditorProps,\n  FieldNamePickerBaseNameMode,\n  StandardEditorsRegistryItem,\n  getFrameDisplayName,\n} from '@grafana/data';\nimport { Button, Field, IconButton, Select, useStyles2 } from '@grafana/ui';\nimport { LayerName } from 'app/core/components/Layers/LayerName';\n\nimport { ScatterSeriesEditor } from './ScatterSeriesEditor';\nimport { Options, ScatterSeriesConfig, defaultFieldConfig } from './panelcfg.gen';\n\nexport const ManualEditor = ({\n  value,\n  onChange,\n  context,\n}: StandardEditorProps<ScatterSeriesConfig[], unknown, Options>) => {\n  const frameNames = useMemo(() => {\n    if (context?.data?.length) {\n      return context.data.map((frame, index) => ({\n        value: index,\n        label: `${getFrameDisplayName(frame, index)} (index: ${index}, rows: ${frame.length})`,\n      }));\n    }\n    return [{ value: 0, label: 'First result' }];\n  }, [context.data]);\n\n  const [selected, setSelected] = useState(0);\n  const style = useStyles2(getStyles);\n\n  const onFieldChange = (val: unknown | undefined, index: number, field: string) => {\n    onChange(\n      value.map((obj, i) => {\n        if (i === index) {\n          return { ...obj, [field]: val };\n        }\n        return obj;\n      })\n    );\n  };\n\n  const createNewSeries = () => {\n    onChange([\n      ...value,\n      {\n        pointColor: undefined,\n        pointSize: defaultFieldConfig.pointSize,\n      },\n    ]);\n    setSelected(value.length);\n  };\n\n  // Component-did-mount callback to check if a new series should be created\n  useEffect(() => {\n    if (!value?.length) {\n      createNewSeries(); // adds a new series\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSeriesDelete = (index: number) => {\n    onChange(value.filter((_, i) => i !== index));\n  };\n\n  // const { options } = context;\n\n  const getRowStyle = (index: number) => {\n    return index === selected ? `${style.row} ${style.sel}` : style.row;\n  };\n\n  return (\n    <>\n      <Button icon=\"plus\" size=\"sm\" variant=\"secondary\" onClick={createNewSeries} className={style.marginBot}>\n        Add series\n      </Button>\n\n      <div className={style.marginBot}>\n        {value.map((series, index) => {\n          return (\n            <div\n              key={`series/${index}`}\n              className={getRowStyle(index)}\n              onClick={() => setSelected(index)}\n              role=\"button\"\n              aria-label={`Select series ${index + 1}`}\n              tabIndex={0}\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  setSelected(index);\n                }\n              }}\n            >\n              <LayerName\n                name={series.name ?? `Series ${index + 1}`}\n                onChange={(v) => onFieldChange(v, index, 'name')}\n              />\n\n              <IconButton\n                name=\"trash-alt\"\n                title={'remove'}\n                className={cx(style.actionIcon)}\n                onClick={() => onSeriesDelete(index)}\n                tooltip=\"Delete series\"\n              />\n            </div>\n          );\n        })}\n      </div>\n\n      {selected >= 0 && value[selected] && (\n        <>\n          {frameNames.length > 1 && (\n            <Field label={'Data'}>\n              <Select\n                isClearable={false}\n                options={frameNames}\n                placeholder={'Change filter'}\n                value={\n                  frameNames.find((v) => {\n                    return v.value === value[selected].frame;\n                  }) ?? 0\n                }\n                onChange={(val) => {\n                  onChange(\n                    value.map((obj, i) => {\n                      if (i === selected) {\n                        if (val === null) {\n                          return { ...value[i], frame: undefined };\n                        }\n                        return { ...value[i], frame: val?.value!, x: undefined, y: undefined };\n                      }\n                      return obj;\n                    })\n                  );\n                }}\n              />\n            </Field>\n          )}\n          <ScatterSeriesEditor\n            key={`series/${selected}`}\n            baseNameMode={FieldNamePickerBaseNameMode.ExcludeBaseNames}\n            item={{} as StandardEditorsRegistryItem}\n            context={context}\n            value={value[selected]}\n            onChange={(val) => {\n              onChange(\n                value.map((obj, i) => {\n                  if (i === selected) {\n                    return val!;\n                  }\n                  return obj;\n                })\n              );\n            }}\n            frameFilter={value[selected].frame ?? undefined}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  marginBot: css({\n    marginBottom: '20px',\n  }),\n  row: css({\n    padding: `${theme.spacing(0.5, 1)}`,\n    borderRadius: `${theme.shape.radius.default}`,\n    background: `${theme.colors.background.secondary}`,\n    minHeight: `${theme.spacing(4)}`,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginBottom: '3px',\n    cursor: 'pointer',\n\n    border: `1px solid ${theme.components.input.borderColor}`,\n    '&:hover': {\n      border: `1px solid ${theme.components.input.borderHover}`,\n    },\n  }),\n  sel: css({\n    border: `1px solid ${theme.colors.primary.border}`,\n    '&:hover': {\n      border: `1px solid ${theme.colors.primary.border}`,\n    },\n  }),\n  actionIcon: css({\n    color: `${theme.colors.text.secondary}`,\n    '&:hover': {\n      color: `${theme.colors.text}`,\n    },\n  }),\n});\n","import { css } from '@emotion/css';\nimport React from 'react';\n\nimport { DataFrame, Field, formattedValueToString, getFieldDisplayName, GrafanaTheme2, LinkModel } from '@grafana/data';\nimport { LinkButton, useStyles2, VerticalGroup, VizTooltipOptions } from '@grafana/ui';\nimport { findField } from 'app/features/dimensions';\nimport { getTitleFromHref } from 'app/features/explore/utils/links';\n\nimport { ScatterSeriesConfig, SeriesMapping } from './panelcfg.gen';\nimport { ScatterSeries } from './types';\n\ninterface YValue {\n  name: string;\n  val: number;\n  field: Field;\n  color: string;\n}\n\ninterface ExtraFacets {\n  colorFacetFieldName: string;\n  sizeFacetFieldName: string;\n  colorFacetValue: number;\n  sizeFacetValue: number;\n}\n\nexport interface Props {\n  allSeries: ScatterSeries[];\n  data: DataFrame[]; // source data\n  manualSeriesConfigs: ScatterSeriesConfig[] | undefined;\n  rowIndex?: number; // the hover row\n  seriesMapping: SeriesMapping;\n  hoveredPointIndex: number; // the hovered point\n  options: VizTooltipOptions;\n}\n\nexport const TooltipView = ({\n  allSeries,\n  data,\n  manualSeriesConfigs,\n  seriesMapping,\n  rowIndex,\n  hoveredPointIndex,\n  options,\n}: Props) => {\n  const style = useStyles2(getStyles);\n\n  if (!allSeries || rowIndex == null) {\n    return null;\n  }\n\n  const series = allSeries[hoveredPointIndex];\n  const frame = series.frame(data);\n  const xField = series.x(frame);\n  const yField = series.y(frame);\n\n  let links: LinkModel[] | undefined = undefined;\n\n  if (yField.getLinks) {\n    const v = yField.values[rowIndex];\n    const disp = yField.display ? yField.display(v) : { text: `${v}`, numeric: +v };\n    links = yField.getLinks({ calculatedValue: disp, valueRowIndex: rowIndex }).map((linkModel) => {\n      if (!linkModel.title) {\n        linkModel.title = getTitleFromHref(linkModel.href);\n      }\n\n      return linkModel;\n    });\n  }\n\n  let extraFields: Field[] = frame.fields.filter((f) => f !== xField && f !== yField);\n\n  let yValue: YValue | null = null;\n  let extraFacets: ExtraFacets | null = null;\n  if (seriesMapping === SeriesMapping.Manual && manualSeriesConfigs) {\n    const colorFacetFieldName = manualSeriesConfigs[hoveredPointIndex]?.pointColor?.field ?? '';\n    const sizeFacetFieldName = manualSeriesConfigs[hoveredPointIndex]?.pointSize?.field ?? '';\n\n    const colorFacet = colorFacetFieldName ? findField(frame, colorFacetFieldName) : undefined;\n    const sizeFacet = sizeFacetFieldName ? findField(frame, sizeFacetFieldName) : undefined;\n\n    extraFacets = {\n      colorFacetFieldName,\n      sizeFacetFieldName,\n      colorFacetValue: colorFacet?.values[rowIndex],\n      sizeFacetValue: sizeFacet?.values[rowIndex],\n    };\n\n    extraFields = extraFields.filter((f) => f !== colorFacet && f !== sizeFacet);\n  }\n\n  yValue = {\n    name: getFieldDisplayName(yField, frame),\n    val: yField.values[rowIndex],\n    field: yField,\n    color: series.pointColor(frame) as string,\n  };\n\n  return (\n    <>\n      <table className={style.infoWrap}>\n        <tr>\n          <th colSpan={2} style={{ backgroundColor: yValue.color }}></th>\n        </tr>\n        <tbody>\n          <tr>\n            <th>{getFieldDisplayName(xField, frame)}</th>\n            <td>{fmt(xField, xField.values[rowIndex])}</td>\n          </tr>\n          <tr>\n            <th>{yValue.name}:</th>\n            <td>{fmt(yValue.field, yValue.val)}</td>\n          </tr>\n          {extraFacets !== null && extraFacets.colorFacetFieldName && (\n            <tr>\n              <th>{extraFacets.colorFacetFieldName}:</th>\n              <td>{extraFacets.colorFacetValue}</td>\n            </tr>\n          )}\n          {extraFacets !== null && extraFacets.sizeFacetFieldName && (\n            <tr>\n              <th>{extraFacets.sizeFacetFieldName}:</th>\n              <td>{extraFacets.sizeFacetValue}</td>\n            </tr>\n          )}\n          {extraFields.map((field, i) => (\n            <tr key={i}>\n              <th>{getFieldDisplayName(field, frame)}:</th>\n              <td>{fmt(field, field.values[rowIndex])}</td>\n            </tr>\n          ))}\n          {links && links.length > 0 && (\n            <tr>\n              <td colSpan={2}>\n                <VerticalGroup>\n                  {links.map((link, i) => (\n                    <LinkButton\n                      key={i}\n                      icon={'external-link-alt'}\n                      target={link.target}\n                      href={link.href}\n                      onClick={link.onClick}\n                      fill=\"text\"\n                      style={{ width: '100%' }}\n                    >\n                      {link.title}\n                    </LinkButton>\n                  ))}\n                </VerticalGroup>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nfunction fmt(field: Field, val: number): string {\n  if (field.display) {\n    return formattedValueToString(field.display(val));\n  }\n  return `${val}`;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  infoWrap: css({\n    padding: '8px',\n    width: '100%',\n    th: {\n      fontWeight: theme.typography.fontWeightMedium,\n      padding: theme.spacing(0.25, 2),\n    },\n  }),\n  highlight: css({\n    background: theme.colors.action.hover,\n  }),\n  xVal: css({\n    fontWeight: theme.typography.fontWeightBold,\n  }),\n  icon: css({\n    marginRight: theme.spacing(1),\n    verticalAlign: 'middle',\n  }),\n});\n","import { Field, formattedValueToString } from '@grafana/data';\n\nexport function fmt(field: Field, val: number): string {\n  if (field.display) {\n    return formattedValueToString(field.display(val));\n  }\n\n  return `${val}`;\n}\n","import React, { ReactNode } from 'react';\n\nimport { DataFrame, Field, getFieldDisplayName } from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { useStyles2 } from '@grafana/ui';\nimport { VizTooltipContent } from '@grafana/ui/src/components/VizTooltip/VizTooltipContent';\nimport { VizTooltipFooter } from '@grafana/ui/src/components/VizTooltip/VizTooltipFooter';\nimport { VizTooltipHeader } from '@grafana/ui/src/components/VizTooltip/VizTooltipHeader';\nimport { ColorIndicator, VizTooltipItem } from '@grafana/ui/src/components/VizTooltip/types';\n\nimport { getDataLinks } from '../status-history/utils';\nimport { getStyles } from '../timeseries/TimeSeriesTooltip';\n\nimport { Options } from './panelcfg.gen';\nimport { ScatterSeries } from './types';\nimport { fmt } from './utils';\n\nexport interface Props {\n  dataIdxs: Array<number | null>;\n  seriesIdx: number | null | undefined;\n  isPinned: boolean;\n  dismiss: () => void;\n  options: Options;\n  data: DataFrame[]; // source data\n  allSeries: ScatterSeries[];\n}\n\nexport const XYChartTooltip = ({ dataIdxs, seriesIdx, data, allSeries, dismiss, options, isPinned }: Props) => {\n  const styles = useStyles2(getStyles);\n\n  const rowIndex = dataIdxs.find((idx) => idx !== null);\n  // @todo: remove -1 when uPlot v2 arrive\n  // context: first value in dataIdxs always null and represent X series\n  const hoveredPointIndex = seriesIdx! - 1;\n\n  if (!allSeries || rowIndex == null) {\n    return null;\n  }\n\n  const series = allSeries[hoveredPointIndex];\n  const frame = series.frame(data);\n  const xField = series.x(frame);\n  const yField = series.y(frame);\n\n  let label = series.name;\n  if (options.seriesMapping === 'manual') {\n    label = options.series?.[hoveredPointIndex]?.name ?? `Series ${hoveredPointIndex + 1}`;\n  }\n\n  let colorThing = series.pointColor(frame);\n\n  if (Array.isArray(colorThing)) {\n    colorThing = colorThing[rowIndex];\n  }\n\n  const headerItem: VizTooltipItem = {\n    label,\n    value: '',\n    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n    color: alpha(colorThing as string, 0.5),\n    colorIndicator: ColorIndicator.marker_md,\n  };\n\n  const contentItems: VizTooltipItem[] = [\n    {\n      label: getFieldDisplayName(xField, frame),\n      value: fmt(xField, xField.values[rowIndex]),\n    },\n    {\n      label: getFieldDisplayName(yField, frame),\n      value: fmt(yField, yField.values[rowIndex]),\n    },\n  ];\n\n  // add extra fields\n  const extraFields: Field[] = frame.fields.filter((f) => f !== xField && f !== yField);\n  if (extraFields) {\n    extraFields.forEach((field) => {\n      contentItems.push({\n        label: field.name,\n        value: fmt(field, field.values[rowIndex]),\n      });\n    });\n  }\n\n  let footer: ReactNode;\n\n  if (isPinned && seriesIdx != null) {\n    const links = getDataLinks(yField, rowIndex);\n\n    footer = <VizTooltipFooter dataLinks={links} />;\n  }\n\n  return (\n    <div className={styles.wrapper}>\n      <VizTooltipHeader item={headerItem} isPinned={isPinned} />\n      <VizTooltipContent items={contentItems} isPinned={isPinned} />\n      {footer}\n    </div>\n  );\n};\n","import {\n  FieldColorModeId,\n  FieldConfigProperty,\n  FieldType,\n  identityOverrideProcessor,\n  SetFieldConfigOptionsArgs,\n} from '@grafana/data';\nimport { LineStyle } from '@grafana/schema';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { LineStyleEditor } from '../timeseries/LineStyleEditor';\n\nimport { FieldConfig, ScatterShow } from './panelcfg.gen';\n\nexport const DEFAULT_POINT_SIZE = 5;\n\nexport function getScatterFieldConfig(cfg: FieldConfig): SetFieldConfigOptionsArgs<FieldConfig> {\n  return {\n    standardOptions: {\n      [FieldConfigProperty.Min]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Max]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Unit]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Decimals]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.NoValue]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.DisplayName]: {\n        hideFromDefaults: true,\n      },\n\n      [FieldConfigProperty.Thresholds]: {\n        hideFromDefaults: true,\n      },\n      [FieldConfigProperty.Mappings]: {\n        hideFromDefaults: true,\n      },\n\n      // TODO: this still leaves Color series by: [ Last | Min | Max ]\n      // because item.settings?.bySeriesSupport && colorMode.isByValue\n      [FieldConfigProperty.Color]: {\n        settings: {\n          byValueSupport: true,\n          bySeriesSupport: true,\n          preferThresholdsMode: false,\n        },\n        defaultValue: {\n          mode: FieldColorModeId.PaletteClassic,\n        },\n      },\n    },\n\n    useCustomConfig: (builder) => {\n      builder\n        .addRadio({\n          path: 'show',\n          name: 'Show',\n          defaultValue: cfg.show,\n          settings: {\n            options: [\n              { label: 'Points', value: ScatterShow.Points },\n              { label: 'Lines', value: ScatterShow.Lines },\n              { label: 'Both', value: ScatterShow.PointsAndLines },\n            ],\n          },\n        })\n        // .addGenericEditor(\n        //   {\n        //     path: 'pointSymbol',\n        //     name: 'Point symbol',\n        //     defaultValue: defaultFieldConfig.pointSymbol ?? {\n        //       mode: 'fixed',\n        //       fixed: 'img/icons/marker/circle.svg',\n        //     },\n        //     settings: {\n        //       resourceType: MediaType.Icon,\n        //       folderName: ResourceFolderName.Marker,\n        //       placeholderText: 'Select a symbol',\n        //       placeholderValue: 'img/icons/marker/circle.svg',\n        //       showSourceRadio: false,\n        //     },\n        //     showIf: (c) => c.show !== ScatterShow.Lines,\n        //   },\n        //   SymbolEditor // ResourceDimensionEditor\n        // )\n        .addSliderInput({\n          path: 'pointSize.fixed',\n          name: 'Point size',\n          defaultValue: cfg.pointSize?.fixed ?? DEFAULT_POINT_SIZE,\n          settings: {\n            min: 1,\n            max: 100,\n            step: 1,\n          },\n          showIf: (c) => c.show !== ScatterShow.Lines,\n        })\n        // .addSliderInput({\n        //   path: 'fillOpacity',\n        //   name: 'Fill opacity',\n        //   defaultValue: 0.4, // defaultFieldConfig.fillOpacity,\n        //   settings: {\n        //     min: 0, // hidden?  or just outlines?\n        //     max: 1,\n        //     step: 0.05,\n        //   },\n        //   showIf: (c) => c.show !== ScatterShow.Lines,\n        // })\n        .addCustomEditor<void, LineStyle>({\n          id: 'lineStyle',\n          path: 'lineStyle',\n          name: 'Line style',\n          showIf: (c) => c.show !== ScatterShow.Points,\n          editor: LineStyleEditor,\n          override: LineStyleEditor,\n          process: identityOverrideProcessor,\n          shouldApply: (f) => f.type === FieldType.number,\n        })\n        .addSliderInput({\n          path: 'lineWidth',\n          name: 'Line width',\n          defaultValue: cfg.lineWidth,\n          settings: {\n            min: 0,\n            max: 10,\n            step: 1,\n          },\n          showIf: (c) => c.show !== ScatterShow.Points,\n        });\n\n      commonOptionsBuilder.addAxisConfig(builder, cfg);\n      commonOptionsBuilder.addHideFrom(builder);\n    },\n  };\n}\n","import { MutableRefObject } from 'react';\nimport uPlot from 'uplot';\n\nimport {\n  DataFrame,\n  FieldColorModeId,\n  fieldColorModeRegistry,\n  formattedValueToString,\n  getDisplayProcessor,\n  getFieldColorModeForField,\n  getFieldDisplayName,\n  getFieldSeriesColor,\n  GrafanaTheme2,\n} from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { config } from '@grafana/runtime';\nimport {\n  AxisPlacement,\n  ScaleDirection,\n  ScaleOrientation,\n  VisibilityMode,\n  ScaleDimensionConfig,\n  ScaleDimensionMode,\n} from '@grafana/schema';\nimport { UPlotConfigBuilder } from '@grafana/ui';\nimport { FacetedData, FacetSeries } from '@grafana/ui/src/components/uPlot/types';\nimport { findFieldIndex, getScaledDimensionForField } from 'app/features/dimensions';\n\nimport { pointWithin, Quadtree, Rect } from '../barchart/quadtree';\n\nimport { DEFAULT_POINT_SIZE } from './config';\nimport { isGraphable } from './dims';\nimport { FieldConfig, defaultFieldConfig, Options, ScatterShow } from './panelcfg.gen';\nimport { DimensionValues, ScatterHoverCallback, ScatterSeries } from './types';\n\nexport interface ScatterPanelInfo {\n  error?: string;\n  series: ScatterSeries[];\n  builder?: UPlotConfigBuilder;\n}\n\n/**\n * This is called when options or structure rev changes\n */\nexport function prepScatter(\n  options: Options,\n  getData: () => DataFrame[],\n  theme: GrafanaTheme2,\n  ttip: null | ScatterHoverCallback,\n  onUPlotClick: null | ((evt?: Object) => void),\n  isToolTipOpen: null | MutableRefObject<boolean>\n): ScatterPanelInfo {\n  let series: ScatterSeries[];\n  let builder: UPlotConfigBuilder;\n\n  try {\n    series = prepSeries(options, getData());\n    builder = prepConfig(getData, series, theme, ttip, onUPlotClick, isToolTipOpen);\n  } catch (e) {\n    let errorMsg = 'Unknown error in prepScatter';\n    if (typeof e === 'string') {\n      errorMsg = e;\n    } else if (e instanceof Error) {\n      errorMsg = e.message;\n    }\n\n    return {\n      error: errorMsg,\n      series: [],\n    };\n  }\n\n  return {\n    series,\n    builder,\n  };\n}\n\ninterface Dims {\n  pointColorIndex?: number;\n  pointColorFixed?: string;\n\n  pointSizeIndex?: number;\n  pointSizeConfig?: ScaleDimensionConfig;\n}\n\nfunction getScatterSeries(\n  seriesIndex: number,\n  frames: DataFrame[],\n  frameIndex: number,\n  xIndex: number,\n  yIndex: number,\n  dims: Dims\n): ScatterSeries {\n  const frame = frames[frameIndex];\n  const y = frame.fields[yIndex];\n  let state = y.state ?? {};\n  state.seriesIndex = seriesIndex;\n  y.state = state;\n\n  // Color configs\n  //----------------\n  let seriesColor = dims.pointColorFixed\n    ? config.theme2.visualization.getColorByName(dims.pointColorFixed)\n    : getFieldSeriesColor(y, config.theme2).color;\n  let pointColor: DimensionValues<string> = () => seriesColor;\n  const fieldConfig: FieldConfig = { ...defaultFieldConfig, ...y.config.custom };\n  let pointColorMode = fieldColorModeRegistry.get(FieldColorModeId.PaletteClassic);\n  if (dims.pointColorIndex) {\n    const f = frames[frameIndex].fields[dims.pointColorIndex];\n    if (f) {\n      pointColorMode = getFieldColorModeForField(y);\n      if (pointColorMode.isByValue) {\n        const index = dims.pointColorIndex;\n        pointColor = (frame: DataFrame) => {\n          const field = frame.fields[index];\n\n          if (field.state?.range) {\n            // this forces local min/max recalc, rather than using global min/max from field.state\n            field.state.range = undefined;\n          }\n\n          field.display = getDisplayProcessor({ field, theme: config.theme2 });\n\n          return field.values.map((v) => field.display!(v).color!); // slow!\n        };\n      } else {\n        seriesColor = pointColorMode.getCalculator(f, config.theme2)(f.values[0], 1);\n        pointColor = () => seriesColor;\n      }\n    }\n  }\n\n  // Size configs\n  //----------------\n  let pointSizeHints = dims.pointSizeConfig;\n  let pointSizeFixed = dims.pointSizeConfig?.fixed ?? y.config.custom?.pointSize?.fixed ?? DEFAULT_POINT_SIZE;\n  let pointSize: DimensionValues<number> = () => pointSizeFixed;\n  if (dims.pointSizeIndex) {\n    pointSize = (frame) => {\n      const s = getScaledDimensionForField(\n        frame.fields[dims.pointSizeIndex!],\n        dims.pointSizeConfig!,\n        ScaleDimensionMode.Quad\n      );\n      const vals = Array(frame.length);\n      for (let i = 0; i < frame.length; i++) {\n        vals[i] = s.get(i);\n      }\n      return vals;\n    };\n  } else {\n    pointSizeHints = {\n      fixed: pointSizeFixed,\n      min: pointSizeFixed,\n      max: pointSizeFixed,\n    };\n  }\n\n  // Series config\n  //----------------\n  const name = getFieldDisplayName(y, frame, frames);\n  return {\n    name,\n\n    frame: (frames) => frames[frameIndex],\n\n    x: (frame) => frame.fields[xIndex],\n    y: (frame) => frame.fields[yIndex],\n    legend: () => {\n      return [\n        {\n          label: name,\n          color: seriesColor, // single color for series?\n          getItemKey: () => name,\n          yAxis: yIndex, // << but not used\n        },\n      ];\n    },\n\n    showLine: fieldConfig.show !== ScatterShow.Points,\n    lineWidth: fieldConfig.lineWidth ?? 2,\n    lineStyle: fieldConfig.lineStyle!,\n    lineColor: () => seriesColor,\n\n    showPoints: fieldConfig.show !== ScatterShow.Lines ? VisibilityMode.Always : VisibilityMode.Never,\n    pointSize,\n    pointColor,\n    pointSymbol: (frame: DataFrame, from?: number) => 'circle', // single field, multiple symbols.... kinda equals multiple series 🤔\n\n    label: VisibilityMode.Never,\n    labelValue: () => '',\n    show: !frame.fields[yIndex].config.custom.hideFrom?.viz,\n\n    hints: {\n      pointSize: pointSizeHints!,\n      pointColor: {\n        mode: pointColorMode,\n      },\n    },\n  };\n}\n\nfunction prepSeries(options: Options, frames: DataFrame[]): ScatterSeries[] {\n  let seriesIndex = 0;\n  if (!frames.length) {\n    throw 'Missing data';\n  }\n\n  if (options.seriesMapping === 'manual') {\n    if (!options.series?.length) {\n      throw 'Missing series config';\n    }\n\n    const scatterSeries: ScatterSeries[] = [];\n\n    for (const series of options.series) {\n      if (!series?.x) {\n        throw 'Select X dimension';\n      }\n\n      if (!series?.y) {\n        throw 'Select Y dimension';\n      }\n\n      for (let frameIndex = 0; frameIndex < frames.length; frameIndex++) {\n        // When a frame filter is applied, only include matching frame index\n        if (series.frame !== undefined && series.frame !== frameIndex) {\n          continue;\n        }\n        const frame = frames[frameIndex];\n        const xIndex = findFieldIndex(series.x, frame, frames);\n\n        if (xIndex != null) {\n          // TODO: this should find multiple y fields\n          const yIndex = findFieldIndex(series.y, frame, frames);\n\n          if (yIndex == null) {\n            throw 'Y must be in the same frame as X';\n          }\n\n          const dims: Dims = {\n            pointColorFixed: series.pointColor?.fixed,\n            pointColorIndex: findFieldIndex(series.pointColor?.field, frame, frames),\n            pointSizeConfig: series.pointSize,\n            pointSizeIndex: findFieldIndex(series.pointSize?.field, frame, frames),\n          };\n          scatterSeries.push(getScatterSeries(seriesIndex++, frames, frameIndex, xIndex, yIndex, dims));\n        }\n      }\n    }\n\n    return scatterSeries;\n  }\n\n  // Default behavior\n  const dims = options.dims ?? {};\n  const frameIndex = dims.frame ?? 0;\n  const frame = frames[frameIndex];\n  const numericIndices: number[] = [];\n\n  let xIndex = findFieldIndex(dims.x, frame, frames);\n  for (let i = 0; i < frame.fields.length; i++) {\n    if (isGraphable(frame.fields[i])) {\n      if (xIndex == null || i === xIndex) {\n        xIndex = i;\n        continue;\n      }\n      if (dims.exclude && dims.exclude.includes(getFieldDisplayName(frame.fields[i], frame, frames))) {\n        continue; // skip\n      }\n\n      numericIndices.push(i);\n    }\n  }\n\n  if (xIndex == null) {\n    throw 'Missing X dimension';\n  }\n\n  if (!numericIndices.length) {\n    throw 'No Y values';\n  }\n  return numericIndices.map((yIndex) => getScatterSeries(seriesIndex++, frames, frameIndex, xIndex!, yIndex, {}));\n}\n\ninterface DrawBubblesOpts {\n  each: (u: uPlot, seriesIdx: number, dataIdx: number, lft: number, top: number, wid: number, hgt: number) => void;\n  disp: {\n    //unit: 3,\n    size: {\n      values: (u: uPlot, seriesIdx: number) => number[];\n    };\n    color: {\n      values: (u: uPlot, seriesIdx: number) => string[];\n      alpha: number;\n    };\n  };\n}\n\nconst prepConfig = (\n  getData: () => DataFrame[],\n  scatterSeries: ScatterSeries[],\n  theme: GrafanaTheme2,\n  ttip: null | ScatterHoverCallback,\n  onUPlotClick: null | ((evt?: Object) => void),\n  isToolTipOpen: null | MutableRefObject<boolean>\n) => {\n  let qt: Quadtree;\n  let hRect: Rect | null;\n\n  function drawBubblesFactory(opts: DrawBubblesOpts) {\n    const drawBubbles: uPlot.Series.PathBuilder = (u, seriesIdx, idx0, idx1) => {\n      uPlot.orient(\n        u,\n        seriesIdx,\n        (\n          series,\n          dataX,\n          dataY,\n          scaleX,\n          scaleY,\n          valToPosX,\n          valToPosY,\n          xOff,\n          yOff,\n          xDim,\n          yDim,\n          moveTo,\n          lineTo,\n          rect,\n          arc\n        ) => {\n          const pxRatio = uPlot.pxRatio;\n          const scatterInfo = scatterSeries[seriesIdx - 1];\n          let d = u.data[seriesIdx] as unknown as FacetSeries;\n\n          let showLine = scatterInfo.showLine;\n          let showPoints = scatterInfo.showPoints === VisibilityMode.Always;\n          if (!showPoints && scatterInfo.showPoints === VisibilityMode.Auto) {\n            showPoints = d[0].length < 1000;\n          }\n\n          // always show something\n          if (!showPoints && !showLine) {\n            showLine = true;\n          }\n\n          let strokeWidth = 1;\n\n          u.ctx.save();\n\n          u.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n          u.ctx.clip();\n\n          u.ctx.fillStyle = (series.fill as any)(); // assumes constant\n          u.ctx.strokeStyle = (series.stroke as any)();\n          u.ctx.lineWidth = strokeWidth;\n\n          let deg360 = 2 * Math.PI;\n\n          let xKey = scaleX.key!;\n          let yKey = scaleY.key!;\n\n          let pointHints = scatterInfo.hints.pointSize;\n          const colorByValue = scatterInfo.hints.pointColor.mode.isByValue;\n\n          let maxSize = (pointHints.max ?? pointHints.fixed) * pxRatio;\n\n          // todo: this depends on direction & orientation\n          // todo: calc once per redraw, not per path\n          let filtLft = u.posToVal(-maxSize / 2, xKey);\n          let filtRgt = u.posToVal(u.bbox.width / pxRatio + maxSize / 2, xKey);\n          let filtBtm = u.posToVal(u.bbox.height / pxRatio + maxSize / 2, yKey);\n          let filtTop = u.posToVal(-maxSize / 2, yKey);\n\n          let sizes = opts.disp.size.values(u, seriesIdx);\n          let pointColors = opts.disp.color.values(u, seriesIdx);\n          let pointAlpha = opts.disp.color.alpha;\n\n          let linePath: Path2D | null = showLine ? new Path2D() : null;\n\n          let curColor: CanvasRenderingContext2D['fillStyle'] | null = null;\n\n          for (let i = 0; i < d[0].length; i++) {\n            let xVal = d[0][i];\n            let yVal = d[1][i];\n            let size = sizes[i] * pxRatio;\n\n            if (xVal >= filtLft && xVal <= filtRgt && yVal >= filtBtm && yVal <= filtTop) {\n              let cx = valToPosX(xVal, scaleX, xDim, xOff);\n              let cy = valToPosY(yVal, scaleY, yDim, yOff);\n\n              if (showLine) {\n                linePath!.lineTo(cx, cy);\n              }\n\n              if (showPoints) {\n                // if pointHints.fixed? don't recalc size\n                // if pointColor has 0 opacity, draw as single path (assuming all strokes are alpha 1)\n\n                u.ctx.moveTo(cx + size / 2, cy);\n                u.ctx.beginPath();\n                u.ctx.arc(cx, cy, size / 2, 0, deg360);\n\n                if (colorByValue) {\n                  if (pointColors[i] !== curColor) {\n                    curColor = pointColors[i];\n                    u.ctx.fillStyle = alpha(curColor, pointAlpha);\n                    u.ctx.strokeStyle = curColor;\n                  }\n                }\n\n                u.ctx.fill();\n                u.ctx.stroke();\n                opts.each(\n                  u,\n                  seriesIdx,\n                  i,\n                  cx - size / 2 - strokeWidth / 2,\n                  cy - size / 2 - strokeWidth / 2,\n                  size + strokeWidth,\n                  size + strokeWidth\n                );\n              }\n            }\n          }\n\n          if (showLine) {\n            let frame = scatterInfo.frame(getData());\n            u.ctx.strokeStyle = scatterInfo.lineColor(frame);\n            u.ctx.lineWidth = scatterInfo.lineWidth * pxRatio;\n\n            const { lineStyle } = scatterInfo;\n            if (lineStyle && lineStyle.fill !== 'solid') {\n              if (lineStyle.fill === 'dot') {\n                u.ctx.lineCap = 'round';\n              }\n              u.ctx.setLineDash(lineStyle.dash ?? [10, 10]);\n            }\n\n            u.ctx.stroke(linePath!);\n          }\n\n          u.ctx.restore();\n        }\n      );\n\n      return null;\n    };\n\n    return drawBubbles;\n  }\n\n  let drawBubbles = drawBubblesFactory({\n    disp: {\n      size: {\n        //unit: 3, // raw CSS pixels\n        values: (u, seriesIdx) => {\n          return u.data[seriesIdx][2] as any; // already contains final pixel geometry\n          //let [minValue, maxValue] = getSizeMinMax(u);\n          //return u.data[seriesIdx][2].map(v => getSize(v, minValue, maxValue));\n        },\n      },\n      color: {\n        // string values\n        values: (u, seriesIdx) => {\n          return u.data[seriesIdx][3] as any;\n        },\n        alpha: 0.5,\n      },\n    },\n    each: (u, seriesIdx, dataIdx, lft, top, wid, hgt) => {\n      // we get back raw canvas coords (included axes & padding). translate to the plotting area origin\n      lft -= u.bbox.left;\n      top -= u.bbox.top;\n      qt.add({ x: lft, y: top, w: wid, h: hgt, sidx: seriesIdx, didx: dataIdx });\n    },\n  });\n\n  const builder = new UPlotConfigBuilder();\n\n  builder.setCursor({\n    drag: { setScale: true },\n    dataIdx: (u, seriesIdx) => {\n      if (seriesIdx === 1) {\n        const pxRatio = uPlot.pxRatio;\n\n        hRect = null;\n\n        let dist = Infinity;\n        let cx = u.cursor.left! * pxRatio;\n        let cy = u.cursor.top! * pxRatio;\n\n        qt.get(cx, cy, 1, 1, (o) => {\n          if (pointWithin(cx, cy, o.x, o.y, o.x + o.w, o.y + o.h)) {\n            let ocx = o.x + o.w / 2;\n            let ocy = o.y + o.h / 2;\n\n            let dx = ocx - cx;\n            let dy = ocy - cy;\n\n            let d = Math.sqrt(dx ** 2 + dy ** 2);\n\n            // test against radius for actual hover\n            if (d <= o.w / 2) {\n              // only hover bbox with closest distance\n              if (d <= dist) {\n                dist = d;\n                hRect = o;\n              }\n            }\n          }\n        });\n      }\n\n      return hRect && seriesIdx === hRect.sidx ? hRect.didx : null;\n    },\n    points: {\n      size: (u, seriesIdx) => {\n        return hRect && seriesIdx === hRect.sidx ? hRect.w / uPlot.pxRatio : 0;\n      },\n      fill: (u, seriesIdx) => 'rgba(255,255,255,0.4)',\n    },\n  });\n\n  const clearPopupIfOpened = () => {\n    if (isToolTipOpen?.current) {\n      if (ttip) {\n        ttip(undefined);\n      }\n      if (onUPlotClick) {\n        onUPlotClick();\n      }\n    }\n  };\n\n  let ref_parent: HTMLElement | null = null;\n\n  // clip hover points/bubbles to plotting area\n  builder.addHook('init', (u, r) => {\n    const showNewVizTooltips = Boolean(config.featureToggles.newVizTooltips);\n\n    if (!showNewVizTooltips) {\n      u.over.style.overflow = 'hidden';\n    }\n    ref_parent = u.root.parentElement;\n\n    if (onUPlotClick) {\n      ref_parent?.addEventListener('click', onUPlotClick);\n    }\n  });\n\n  builder.addHook('destroy', (u) => {\n    if (onUPlotClick) {\n      ref_parent?.removeEventListener('click', onUPlotClick);\n      clearPopupIfOpened();\n    }\n  });\n\n  let rect: DOMRect;\n\n  // rect of .u-over (grid area)\n  builder.addHook('syncRect', (u, r) => {\n    rect = r;\n  });\n\n  if (ttip) {\n    builder.addHook('setLegend', (u) => {\n      if (u.cursor.idxs != null) {\n        for (let i = 0; i < u.cursor.idxs.length; i++) {\n          const sel = u.cursor.idxs[i];\n          if (sel != null && !isToolTipOpen?.current) {\n            ttip({\n              scatterIndex: i - 1,\n              xIndex: sel,\n              pageX: rect.left + u.cursor.left!,\n              pageY: rect.top + u.cursor.top!,\n            });\n            return; // only show the first one\n          }\n        }\n      }\n\n      if (!isToolTipOpen?.current) {\n        ttip(undefined);\n      }\n    });\n  }\n\n  builder.addHook('drawClear', (u) => {\n    clearPopupIfOpened();\n\n    qt = qt || new Quadtree(0, 0, u.bbox.width, u.bbox.height);\n\n    qt.clear();\n\n    // force-clear the path cache to cause drawBars() to rebuild new quadtree\n    u.series.forEach((s, i) => {\n      if (i > 0) {\n        // @ts-ignore\n        s._paths = null;\n      }\n    });\n  });\n\n  builder.setMode(2);\n\n  const frames = getData();\n  let xField = scatterSeries[0].x(scatterSeries[0].frame(frames));\n\n  let fieldConfig = xField.config;\n  let customConfig = fieldConfig.custom;\n  let scaleDistr = customConfig?.scaleDistribution;\n\n  builder.addScale({\n    scaleKey: 'x',\n    isTime: false,\n    orientation: ScaleOrientation.Horizontal,\n    direction: ScaleDirection.Right,\n    distribution: scaleDistr?.type,\n    log: scaleDistr?.log,\n    linearThreshold: scaleDistr?.linearThreshold,\n    min: fieldConfig.min,\n    max: fieldConfig.max,\n    softMin: customConfig?.axisSoftMin,\n    softMax: customConfig?.axisSoftMax,\n    centeredZero: customConfig?.axisCenteredZero,\n    decimals: fieldConfig.decimals,\n  });\n\n  // why does this fall back to '' instead of null or undef?\n  let xAxisLabel = customConfig.axisLabel;\n\n  builder.addAxis({\n    scaleKey: 'x',\n    placement: customConfig?.axisPlacement !== AxisPlacement.Hidden ? AxisPlacement.Bottom : AxisPlacement.Hidden,\n    show: customConfig?.axisPlacement !== AxisPlacement.Hidden,\n    grid: { show: customConfig?.axisGridShow },\n    border: { show: customConfig?.axisBorderShow },\n    theme,\n    label:\n      xAxisLabel == null || xAxisLabel === ''\n        ? getFieldDisplayName(xField, scatterSeries[0].frame(frames), frames)\n        : xAxisLabel,\n    formatValue: (v, decimals) => formattedValueToString(xField.display!(v, decimals)),\n  });\n\n  scatterSeries.forEach((s, si) => {\n    let frame = s.frame(frames);\n    let field = s.y(frame);\n\n    const lineColor = s.lineColor(frame);\n    const pointColor = asSingleValue(frame, s.pointColor) as string;\n    //const lineColor = s.lineColor(frame);\n    //const lineWidth = s.lineWidth;\n\n    let scaleKey = field.config.unit ?? 'y';\n    let config = field.config;\n    let customConfig = config.custom;\n    let scaleDistr = customConfig?.scaleDistribution;\n\n    builder.addScale({\n      scaleKey,\n      orientation: ScaleOrientation.Vertical,\n      direction: ScaleDirection.Up,\n      distribution: scaleDistr?.type,\n      log: scaleDistr?.log,\n      linearThreshold: scaleDistr?.linearThreshold,\n      min: config.min,\n      max: config.max,\n      softMin: customConfig?.axisSoftMin,\n      softMax: customConfig?.axisSoftMax,\n      centeredZero: customConfig?.axisCenteredZero,\n      decimals: config.decimals,\n    });\n\n    // why does this fall back to '' instead of null or undef?\n    let yAxisLabel = customConfig?.axisLabel;\n\n    builder.addAxis({\n      scaleKey,\n      theme,\n      placement: customConfig?.axisPlacement === AxisPlacement.Auto ? AxisPlacement.Left : customConfig?.axisPlacement,\n      show: customConfig?.axisPlacement !== AxisPlacement.Hidden,\n      grid: { show: customConfig?.axisGridShow },\n      border: { show: customConfig?.axisBorderShow },\n      size: customConfig?.axisWidth,\n      label:\n        yAxisLabel == null || yAxisLabel === ''\n          ? getFieldDisplayName(field, scatterSeries[si].frame(frames), frames)\n          : yAxisLabel,\n      formatValue: (v, decimals) => formattedValueToString(field.display!(v, decimals)),\n    });\n\n    builder.addSeries({\n      facets: [\n        {\n          scale: 'x',\n          auto: true,\n        },\n        {\n          scale: scaleKey,\n          auto: true,\n        },\n      ],\n      pathBuilder: drawBubbles, // drawBubbles({disp: {size: {values: () => }}})\n      theme,\n      scaleKey: '', // facets' scales used (above)\n      lineColor: alpha('' + lineColor, 1),\n      fillColor: alpha(pointColor, 0.5),\n      show: !customConfig.hideFrom?.viz,\n    });\n  });\n\n  /*\n  builder.setPrepData((frames) => {\n    let seriesData = lookup.fieldMaps.flatMap((f, i) => {\n      let { fields } = frames[i];\n\n      return f.y.map((yIndex, frameSeriesIndex) => {\n        let xValues = fields[f.x[frameSeriesIndex]].values;\n        let yValues = fields[f.y[frameSeriesIndex]].values;\n        let sizeValues = f.size![frameSeriesIndex](frames[i]);\n\n        if (!Array.isArray(sizeValues)) {\n          sizeValues = Array(xValues.length).fill(sizeValues);\n        }\n\n        return [xValues, yValues, sizeValues];\n      });\n    });\n\n    return [null, ...seriesData];\n  });\n  */\n\n  return builder;\n};\n\n/**\n * This is called everytime the data changes\n *\n * from?  is this where we would support that?  -- need the previous values\n */\nexport function prepData(info: ScatterPanelInfo, data: DataFrame[], from?: number): FacetedData {\n  if (info.error || !data.length) {\n    return [null];\n  }\n  return [\n    null,\n    ...info.series.map((s, idx) => {\n      const frame = s.frame(data);\n\n      let colorValues;\n      const r = s.pointColor(frame);\n      if (Array.isArray(r)) {\n        colorValues = r;\n      } else {\n        colorValues = Array(frame.length).fill(r);\n      }\n      return [\n        s.x(frame).values, // X\n        s.y(frame).values, // Y\n        asArray(frame, s.pointSize),\n        colorValues,\n      ];\n    }),\n  ];\n}\n\nfunction asArray<T>(frame: DataFrame, lookup: DimensionValues<T>): T[] {\n  const r = lookup(frame);\n  if (Array.isArray(r)) {\n    return r;\n  }\n  return Array(frame.length).fill(r);\n}\n\nfunction asSingleValue<T>(frame: DataFrame, lookup: DimensionValues<T>): T {\n  const r = lookup(frame);\n  if (Array.isArray(r)) {\n    return r[0];\n  }\n  return r;\n}\n","import { css } from '@emotion/css';\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { usePrevious } from 'react-use';\n\nimport {\n  DisplayProcessor,\n  DisplayValue,\n  fieldReducers,\n  PanelProps,\n  reduceField,\n  ReducerID,\n  getDisplayProcessor,\n} from '@grafana/data';\nimport { alpha } from '@grafana/data/src/themes/colorManipulator';\nimport { config } from '@grafana/runtime';\nimport {\n  Portal,\n  TooltipDisplayMode,\n  TooltipPlugin2,\n  UPlotChart,\n  UPlotConfigBuilder,\n  VizLayout,\n  VizLegend,\n  VizLegendItem,\n  VizTooltipContainer,\n} from '@grafana/ui';\nimport { TooltipHoverMode } from '@grafana/ui/src/components/uPlot/plugins/TooltipPlugin2';\nimport { FacetedData } from '@grafana/ui/src/components/uPlot/types';\nimport { CloseButton } from 'app/core/components/CloseButton/CloseButton';\n\nimport { TooltipView } from './TooltipView';\nimport { XYChartTooltip } from './XYChartTooltip';\nimport { Options, SeriesMapping } from './panelcfg.gen';\nimport { prepData, prepScatter, ScatterPanelInfo } from './scatter';\nimport { ScatterHoverEvent, ScatterSeries } from './types';\n\ntype Props = PanelProps<Options>;\nconst TOOLTIP_OFFSET = 10;\n\nexport const XYChartPanel = (props: Props) => {\n  const [error, setError] = useState<string | undefined>();\n  const [series, setSeries] = useState<ScatterSeries[]>([]);\n  const [builder, setBuilder] = useState<UPlotConfigBuilder | undefined>();\n  const [facets, setFacets] = useState<FacetedData | undefined>();\n  const [hover, setHover] = useState<ScatterHoverEvent | undefined>();\n  const [shouldDisplayCloseButton, setShouldDisplayCloseButton] = useState<boolean>(false);\n  const showNewVizTooltips = Boolean(config.featureToggles.newVizTooltips);\n\n  const isToolTipOpen = useRef<boolean>(false);\n  const oldOptions = usePrevious(props.options);\n  const oldData = usePrevious(props.data);\n\n  const onCloseToolTip = () => {\n    isToolTipOpen.current = false;\n    setShouldDisplayCloseButton(false);\n    scatterHoverCallback(undefined);\n  };\n\n  const onUPlotClick = () => {\n    isToolTipOpen.current = !isToolTipOpen.current;\n\n    // Linking into useState required to re-render tooltip\n    setShouldDisplayCloseButton(isToolTipOpen.current);\n  };\n\n  const scatterHoverCallback = (hover?: ScatterHoverEvent) => {\n    setHover(hover);\n  };\n\n  const initSeries = useCallback(() => {\n    const getData = () => props.data.series;\n    const info: ScatterPanelInfo = prepScatter(\n      props.options,\n      getData,\n      config.theme2,\n      showNewVizTooltips ? null : scatterHoverCallback,\n      showNewVizTooltips ? null : onUPlotClick,\n      showNewVizTooltips ? null : isToolTipOpen\n    );\n\n    if (info.error) {\n      setError(info.error);\n    } else if (info.series.length && props.data.series) {\n      setBuilder(info.builder);\n      setSeries(info.series);\n      setFacets(() => prepData(info, props.data.series));\n      setError(undefined);\n    }\n  }, [props.data.series, props.options, showNewVizTooltips]);\n\n  const initFacets = useCallback(() => {\n    setFacets(() => prepData({ error, series }, props.data.series));\n  }, [props.data.series, error, series]);\n\n  useEffect(() => {\n    if (oldOptions !== props.options || oldData?.structureRev !== props.data.structureRev) {\n      initSeries();\n    } else if (oldData?.series !== props.data.series) {\n      initFacets();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  const renderLegend = () => {\n    const items: VizLegendItem[] = [];\n    const defaultFormatter = (v: any) => (v == null ? '-' : v.toFixed(1));\n    const theme = config.theme2;\n\n    for (let si = 0; si < series.length; si++) {\n      const s = series[si];\n      const frame = s.frame(props.data.series);\n      if (frame) {\n        for (const item of s.legend()) {\n          item.getDisplayValues = () => {\n            const calcs = props.options.legend.calcs;\n\n            if (!calcs?.length) {\n              return [];\n            }\n\n            const field = s.y(frame);\n\n            const fmt = field.display ?? defaultFormatter;\n            let countFormatter: DisplayProcessor | null = null;\n\n            const fieldCalcs = reduceField({\n              field,\n              reducers: calcs,\n            });\n\n            return calcs.map<DisplayValue>((reducerId) => {\n              const fieldReducer = fieldReducers.get(reducerId);\n              let formatter = fmt;\n\n              if (fieldReducer.id === ReducerID.diffperc) {\n                formatter = getDisplayProcessor({\n                  field: {\n                    ...field,\n                    config: {\n                      ...field.config,\n                      unit: 'percent',\n                    },\n                  },\n                  theme,\n                });\n              }\n\n              if (\n                fieldReducer.id === ReducerID.count ||\n                fieldReducer.id === ReducerID.changeCount ||\n                fieldReducer.id === ReducerID.distinctCount\n              ) {\n                if (!countFormatter) {\n                  countFormatter = getDisplayProcessor({\n                    field: {\n                      ...field,\n                      config: {\n                        ...field.config,\n                        unit: 'none',\n                      },\n                    },\n                    theme,\n                  });\n                }\n                formatter = countFormatter;\n              }\n\n              return {\n                ...formatter(fieldCalcs[reducerId]),\n                title: fieldReducer.name,\n                description: fieldReducer.description,\n              };\n            });\n          };\n\n          item.disabled = !(s.show ?? true);\n\n          if (props.options.seriesMapping === SeriesMapping.Manual) {\n            item.label = props.options.series?.[si]?.name ?? `Series ${si + 1}`;\n          }\n\n          item.color = alpha(s.lineColor(frame) as string, 1);\n\n          items.push(item);\n        }\n      }\n    }\n\n    if (!props.options.legend.showLegend) {\n      return null;\n    }\n\n    const legendStyle = {\n      flexStart: css({\n        div: {\n          justifyContent: 'flex-start',\n        },\n      }),\n    };\n\n    return (\n      <VizLayout.Legend placement={props.options.legend.placement} width={props.options.legend.width}>\n        <VizLegend\n          className={legendStyle.flexStart}\n          placement={props.options.legend.placement}\n          items={items}\n          displayMode={props.options.legend.displayMode}\n        />\n      </VizLayout.Legend>\n    );\n  };\n\n  if (error || !builder || !facets) {\n    return (\n      <div className=\"panel-empty\">\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <VizLayout width={props.width} height={props.height} legend={renderLegend()}>\n        {(vizWidth: number, vizHeight: number) => (\n          <UPlotChart config={builder} data={facets} width={vizWidth} height={vizHeight}>\n            {showNewVizTooltips && props.options.tooltip.mode !== TooltipDisplayMode.None && (\n              <TooltipPlugin2\n                config={builder}\n                hoverMode={TooltipHoverMode.xyOne}\n                render={(u, dataIdxs, seriesIdx, isPinned, dismiss) => {\n                  return (\n                    <XYChartTooltip\n                      data={props.data.series}\n                      dataIdxs={dataIdxs}\n                      allSeries={series}\n                      dismiss={dismiss}\n                      isPinned={isPinned}\n                      options={props.options}\n                      seriesIdx={seriesIdx}\n                    />\n                  );\n                }}\n                maxWidth={props.options.tooltip.maxWidth}\n                maxHeight={props.options.tooltip.maxHeight}\n              />\n            )}\n          </UPlotChart>\n        )}\n      </VizLayout>\n      {!showNewVizTooltips && (\n        <Portal>\n          {hover && props.options.tooltip.mode !== TooltipDisplayMode.None && (\n            <VizTooltipContainer\n              position={{ x: hover.pageX, y: hover.pageY }}\n              offset={{ x: TOOLTIP_OFFSET, y: TOOLTIP_OFFSET }}\n              allowPointerEvents={isToolTipOpen.current}\n            >\n              {shouldDisplayCloseButton && (\n                <div\n                  style={{\n                    width: '100%',\n                    display: 'flex',\n                    justifyContent: 'flex-end',\n                  }}\n                >\n                  <CloseButton\n                    onClick={onCloseToolTip}\n                    style={{\n                      position: 'relative',\n                      top: 'auto',\n                      right: 'auto',\n                      marginRight: 0,\n                    }}\n                  />\n                </div>\n              )}\n              <TooltipView\n                options={props.options.tooltip}\n                allSeries={series}\n                manualSeriesConfigs={props.options.series}\n                seriesMapping={props.options.seriesMapping!}\n                rowIndex={hover.xIndex}\n                hoveredPointIndex={hover.scatterIndex}\n                data={props.data.series}\n              />\n            </VizTooltipContainer>\n          )}\n        </Portal>\n      )}\n    </>\n  );\n};\n","import { PanelPlugin } from '@grafana/data';\nimport { commonOptionsBuilder } from '@grafana/ui';\n\nimport { AutoEditor } from './AutoEditor';\nimport { ManualEditor } from './ManualEditor';\nimport { XYChartPanel } from './XYChartPanel';\nimport { getScatterFieldConfig } from './config';\nimport { Options, FieldConfig, defaultFieldConfig } from './panelcfg.gen';\n\nexport const plugin = new PanelPlugin<Options, FieldConfig>(XYChartPanel)\n  .useFieldConfig(getScatterFieldConfig(defaultFieldConfig))\n  .setPanelOptions((builder) => {\n    builder\n      .addRadio({\n        path: 'seriesMapping',\n        name: 'Series mapping',\n        defaultValue: 'auto',\n        settings: {\n          options: [\n            { value: 'auto', label: 'Table', description: 'Plot values within a single table result' },\n            { value: 'manual', label: 'Manual', description: 'Construct values from any result' },\n          ],\n        },\n      })\n      .addCustomEditor({\n        id: 'xyPlotConfig',\n        path: 'dims',\n        name: '',\n        editor: AutoEditor,\n        showIf: (cfg) => cfg.seriesMapping === 'auto',\n      })\n      .addCustomEditor({\n        id: 'series',\n        path: 'series',\n        name: '',\n        defaultValue: [],\n        editor: ManualEditor,\n        showIf: (cfg) => cfg.seriesMapping === 'manual',\n      });\n\n    commonOptionsBuilder.addTooltipOptions(builder, true);\n    commonOptionsBuilder.addLegendOptions(builder);\n  });\n","// Code generated - EDITING IS FUTILE. DO NOT EDIT.\n//\n// Generated by:\n//     public/app/plugins/gen.go\n// Using jennies:\n//     TSTypesJenny\n//     PluginTsTypesJenny\n//\n// Run 'make gen-cue' from repository root to regenerate.\n\nimport * as common from '@grafana/schema';\n\n/**\n * Auto is \"table\" in the UI\n */\nexport enum SeriesMapping {\n  Auto = 'auto',\n  Manual = 'manual',\n}\n\nexport enum ScatterShow {\n  Lines = 'lines',\n  Points = 'points',\n  PointsAndLines = 'points+lines',\n}\n\n/**\n * Configuration for the Table/Auto mode\n */\nexport interface XYDimensionConfig {\n  exclude?: Array<string>;\n  frame: number;\n  x?: string;\n}\n\nexport const defaultXYDimensionConfig: Partial<XYDimensionConfig> = {\n  exclude: [],\n};\n\nexport interface FieldConfig extends common.HideableFieldConfig, common.AxisConfig {\n  label?: common.VisibilityMode;\n  labelValue?: common.TextDimensionConfig;\n  lineColor?: common.ColorDimensionConfig;\n  lineStyle?: common.LineStyle;\n  lineWidth?: number;\n  pointColor?: common.ColorDimensionConfig;\n  pointSize?: common.ScaleDimensionConfig;\n  show?: ScatterShow;\n}\n\nexport const defaultFieldConfig: Partial<FieldConfig> = {\n  label: common.VisibilityMode.Auto,\n  show: ScatterShow.Points,\n};\n\nexport interface ScatterSeriesConfig extends FieldConfig {\n  frame?: number;\n  name?: string;\n  x?: string;\n  y?: string;\n}\n\nexport interface Options extends common.OptionsWithLegend, common.OptionsWithTooltip {\n  /**\n   * Table Mode (auto)\n   */\n  dims: XYDimensionConfig;\n  /**\n   * Manual Mode\n   */\n  series: Array<ScatterSeriesConfig>;\n  seriesMapping?: SeriesMapping;\n}\n\nexport const defaultOptions: Partial<Options> = {\n  series: [],\n};\n"],"names":["DimensionError","isGraphable","field","getXYDimensions","cfg","data","frame","xIndex","i","f","hasTime","x","fields","name","getSimpleFieldMatcher","getSimpleFieldNotMatcher","m","AutoEditor","value","onChange","context","frameNames","idx","dims","info","v","xName","sel","styles","getStyles","Field","Select","IconButton","exclude","theme","ScatterSeriesEditor","baseNameMode","frameFilter","onFieldChange","val","FieldNamePicker","obj","ManualEditor","index","selected","setSelected","style","createNewSeries","onSeriesDelete","_","getRowStyle","Button","series","e","LayerName","TooltipView","allSeries","manualSeriesConfigs","seriesMapping","rowIndex","hoveredPointIndex","options","xField","yField","links","disp","linkModel","extraFields","yValue","extraFacets","colorFacetFieldName","sizeFacetFieldName","colorFacet","sizeFacet","fmt","link","XYChartTooltip","dataIdxs","seriesIdx","dismiss","isPinned","label","colorThing","headerItem","contentItems","footer","VizTooltipFooter","VizTooltipHeader","VizTooltipContent","DEFAULT_POINT_SIZE","getScatterFieldConfig","builder","c","LineStyleEditor","prepScatter","getData","ttip","onUPlotClick","isToolTipOpen","prepSeries","prepConfig","errorMsg","getScatterSeries","seriesIndex","frames","frameIndex","yIndex","y","state","seriesColor","config","pointColor","fieldConfig","pointColorMode","fieldColor","pointSizeHints","pointSizeFixed","pointSize","s","vals","from","scatterSeries","numericIndices","qt","hRect","drawBubblesFactory","opts","u","idx0","idx1","dataX","dataY","scaleX","scaleY","valToPosX","valToPosY","xOff","yOff","xDim","yDim","moveTo","lineTo","rect","arc","pxRatio","scatterInfo","d","showLine","showPoints","strokeWidth","deg360","xKey","yKey","pointHints","colorByValue","maxSize","filtLft","filtRgt","filtBtm","filtTop","sizes","pointColors","pointAlpha","linePath","curColor","xVal","yVal","size","cx","cy","lineStyle","drawBubbles","dataIdx","lft","top","wid","hgt","UPlotConfigBuilder","dist","o","ocx","ocy","dx","dy","clearPopupIfOpened","ref_parent","r","customConfig","scaleDistr","xAxisLabel","decimals","si","lineColor","asSingleValue","scaleKey","yAxisLabel","prepData","colorValues","asArray","lookup","TOOLTIP_OFFSET","XYChartPanel","props","error","setError","setSeries","setBuilder","facets","setFacets","hover","setHover","shouldDisplayCloseButton","setShouldDisplayCloseButton","showNewVizTooltips","oldOptions","usePrevious","oldData","onCloseToolTip","scatterHoverCallback","initSeries","initFacets","renderLegend","items","defaultFormatter","item","calcs","countFormatter","fieldCalcs","reducerId","fieldReducer","formatter","legendStyle","VizLayout","VizLegend","vizWidth","vizHeight","TooltipPlugin2","Portal","VizTooltipContainer","CloseButton","PanelPlugin","SeriesMapping","ScatterShow","defaultXYDimensionConfig","defaultFieldConfig","defaultOptions"],"sourceRoot":""}