{"version":3,"file":"DashboardImport.0b85651e842c6bd494ac.js","mappings":"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","sources":["webpack://grafana/./public/app/features/manage-dashboards/utils/validation.ts","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardLibraryPanelsList.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardForm.tsx","webpack://grafana/./public/app/features/manage-dashboards/components/ImportDashboardOverview.tsx","webpack://grafana/./public/app/features/manage-dashboards/DashboardImportPage.tsx"],"sourcesContent":["import { t } from 'i18next';\n\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport { validationSrv } from '../services/ValidationSrv';\n\nexport const validateDashboardJson = (json: string) => {\n  let dashboard;\n  try {\n    dashboard = JSON.parse(json);\n  } catch (error) {\n    return t('dashboard.validation.invalid-json', 'Not valid JSON');\n  }\n  if (dashboard && dashboard.hasOwnProperty('tags')) {\n    if (Array.isArray(dashboard.tags)) {\n      const hasInvalidTag = dashboard.tags.some((tag: string) => typeof tag !== 'string');\n      if (hasInvalidTag) {\n        return t('dashboard.validation.tags-expected-strings', 'tags expected array of strings');\n      }\n    } else {\n      return t('dashboard.validation.tags-expected-array', 'tags expected array');\n    }\n  }\n  return true;\n};\n\nexport const validateGcomDashboard = (gcomDashboard: string) => {\n  // From DashboardImportCtrl\n  const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(gcomDashboard);\n\n  return match && (match[1] || match[2])\n    ? true\n    : t('dashboard.validation.invalid-dashboard-id', 'Could not find a valid Grafana.com ID');\n};\n\nexport const validateTitle = (newTitle: string, folderUid: string) => {\n  return validationSrv\n    .validateNewDashboardName(folderUid, newTitle)\n    .then(() => {\n      return true;\n    })\n    .catch((error) => {\n      if (error.type === 'EXISTING') {\n        return error.message;\n      }\n    });\n};\n\nexport const validateUid = (value: string) => {\n  return getBackendSrv()\n    .get(`/api/dashboards/uid/${value}`)\n    .then((existingDashboard) => {\n      return `Dashboard named '${existingDashboard?.dashboard.title}' in folder '${existingDashboard?.meta.folderTitle}' has the same UID`;\n    })\n    .catch((error) => {\n      error.isHandled = true;\n      return true;\n    });\n};\n","import { css } from '@emotion/css';\nimport React, { ReactElement } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { LibraryPanel } from '@grafana/schema';\nimport { Field, useStyles2 } from '@grafana/ui';\n\nimport { LibraryPanelCard } from '../../library-panels/components/LibraryPanelCard/LibraryPanelCard';\nimport { LibraryPanelInput, LibraryPanelInputState } from '../state/reducers';\n\ninterface ImportDashboardLibraryPanelsListProps {\n  inputs: LibraryPanelInput[];\n  label: string;\n  description: string;\n  folderName?: string;\n}\n\nexport function ImportDashboardLibraryPanelsList({\n  inputs,\n  label,\n  description,\n  folderName,\n}: ImportDashboardLibraryPanelsListProps): ReactElement | null {\n  const styles = useStyles2(getStyles);\n\n  if (!Boolean(inputs?.length)) {\n    return null;\n  }\n\n  return (\n    <div className={styles.spacer}>\n      <Field label={label} description={description}>\n        <>\n          {inputs.map((input, index) => {\n            const libraryPanelIndex = `elements[${index}]`;\n            const libraryPanel =\n              input.state === LibraryPanelInputState.New\n                ? { ...input.model, meta: { ...input.model.meta, folderName: folderName ?? 'General' } }\n                : { ...input.model };\n\n            return (\n              <div className={styles.item} key={libraryPanelIndex}>\n                <LibraryPanelCard libraryPanel={libraryPanel as LibraryPanel} onClick={() => undefined} />\n              </div>\n            );\n          })}\n        </>\n      </Field>\n    </div>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    spacer: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    item: css`\n      margin-bottom: ${theme.spacing(1)};\n    `,\n  };\n}\n","import React, { useEffect, useState } from 'react';\nimport { Controller, FieldErrors, UseFormReturn } from 'react-hook-form';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { ExpressionDatasourceRef } from '@grafana/runtime/src/utils/DataSourceWithBackend';\nimport { Button, Field, FormFieldErrors, FormsOnSubmit, Stack, Input, Legend } from '@grafana/ui';\nimport { OldFolderPicker } from 'app/core/components/Select/OldFolderPicker';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport {\n  DashboardInput,\n  DashboardInputs,\n  DataSourceInput,\n  ImportDashboardDTO,\n  LibraryPanelInputState,\n} from '../state/reducers';\nimport { validateTitle, validateUid } from '../utils/validation';\n\nimport { ImportDashboardLibraryPanelsList } from './ImportDashboardLibraryPanelsList';\n\ninterface Props extends Pick<UseFormReturn<ImportDashboardDTO>, 'register' | 'control' | 'getValues' | 'watch'> {\n  uidReset: boolean;\n  inputs: DashboardInputs;\n  initialFolderUid: string;\n  errors: FieldErrors<ImportDashboardDTO>;\n  onCancel: () => void;\n  onUidReset: () => void;\n  onSubmit: FormsOnSubmit<ImportDashboardDTO>;\n}\n\nexport const ImportDashboardForm = ({\n  register,\n  errors,\n  control,\n  getValues,\n  uidReset,\n  inputs,\n  initialFolderUid,\n  onUidReset,\n  onCancel,\n  onSubmit,\n  watch,\n}: Props) => {\n  const [isSubmitted, setSubmitted] = useState(false);\n  const watchDataSources = watch('dataSources');\n  const watchFolder = watch('folder');\n\n  /*\n    This useEffect is needed for overwriting a dashboard. It\n    submits the form even if there's validation errors on title or uid.\n  */\n  useEffect(() => {\n    if (isSubmitted && (errors.title || errors.uid)) {\n      onSubmit(getValues());\n    }\n  }, [errors, getValues, isSubmitted, onSubmit]);\n  const newLibraryPanels = inputs?.libraryPanels?.filter((i) => i.state === LibraryPanelInputState.New) ?? [];\n  const existingLibraryPanels = inputs?.libraryPanels?.filter((i) => i.state === LibraryPanelInputState.Exists) ?? [];\n\n  return (\n    <>\n      <Legend>Options</Legend>\n      <Field label=\"Name\" invalid={!!errors.title} error={errors.title && errors.title.message}>\n        <Input\n          {...register('title', {\n            required: 'Name is required',\n            validate: async (v: string) => await validateTitle(v, getValues().folder.uid),\n          })}\n          type=\"text\"\n          data-testid={selectors.components.ImportDashboardForm.name}\n        />\n      </Field>\n      <Field label=\"Folder\">\n        <Controller\n          render={({ field: { ref, ...field } }) => (\n            <OldFolderPicker {...field} enableCreateNew initialFolderUid={initialFolderUid} />\n          )}\n          name=\"folder\"\n          control={control}\n        />\n      </Field>\n      <Field\n        label=\"Unique identifier (UID)\"\n        description=\"The unique identifier (UID) of a dashboard can be used for uniquely identify a dashboard between multiple Grafana installs.\n                The UID allows having consistent URLs for accessing dashboards so changing the title of a dashboard will not break any\n                bookmarked links to that dashboard.\"\n        invalid={!!errors.uid}\n        error={errors.uid && errors.uid.message}\n      >\n        <>\n          {!uidReset ? (\n            <Input\n              disabled\n              {...register('uid', { validate: async (v: string) => await validateUid(v) })}\n              addonAfter={!uidReset && <Button onClick={onUidReset}>Change uid</Button>}\n            />\n          ) : (\n            <Input {...register('uid', { required: true, validate: async (v: string) => await validateUid(v) })} />\n          )}\n        </>\n      </Field>\n      {inputs.dataSources &&\n        inputs.dataSources.map((input: DataSourceInput, index: number) => {\n          if (input.pluginId === ExpressionDatasourceRef.type) {\n            return null;\n          }\n          const dataSourceOption = `dataSources.${index}` as const;\n          const current = watchDataSources ?? [];\n          return (\n            <Field\n              label={input.label}\n              description={input.description}\n              key={dataSourceOption}\n              invalid={errors.dataSources && !!errors.dataSources[index]}\n              error={errors.dataSources && errors.dataSources[index] && 'A data source is required'}\n            >\n              <Controller\n                name={dataSourceOption}\n                render={({ field: { ref, ...field } }) => (\n                  <DataSourcePicker\n                    {...field}\n                    noDefault={true}\n                    placeholder={input.info}\n                    pluginId={input.pluginId}\n                    current={current[index]?.uid}\n                  />\n                )}\n                control={control}\n                rules={{ required: true }}\n              />\n            </Field>\n          );\n        })}\n      {inputs.constants &&\n        inputs.constants.map((input: DashboardInput, index) => {\n          const constantIndex = `constants.${index}` as const;\n          return (\n            <Field\n              label={input.label}\n              error={errors.constants && errors.constants[index] && `${input.label} needs a value`}\n              invalid={errors.constants && !!errors.constants[index]}\n              key={constantIndex}\n            >\n              <Input {...register(constantIndex, { required: true })} defaultValue={input.value} />\n            </Field>\n          );\n        })}\n      <ImportDashboardLibraryPanelsList\n        inputs={newLibraryPanels}\n        label=\"New library panels\"\n        description=\"List of new library panels that will get imported.\"\n        folderName={watchFolder.title}\n      />\n      <ImportDashboardLibraryPanelsList\n        inputs={existingLibraryPanels}\n        label=\"Existing library panels\"\n        description=\"List of existing library panels. These panels are not affected by the import.\"\n        folderName={watchFolder.title}\n      />\n      <Stack>\n        <Button\n          type=\"submit\"\n          data-testid={selectors.components.ImportDashboardForm.submit}\n          variant={getButtonVariant(errors)}\n          onClick={() => {\n            setSubmitted(true);\n          }}\n        >\n          {getButtonText(errors)}\n        </Button>\n        <Button type=\"reset\" variant=\"secondary\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </Stack>\n    </>\n  );\n};\n\nfunction getButtonVariant(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'destructive' : 'primary';\n}\n\nfunction getButtonText(errors: FormFieldErrors<ImportDashboardDTO>) {\n  return errors && (errors.title || errors.uid) ? 'Import (Overwrite)' : 'Import';\n}\n","import React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { dateTimeFormat } from '@grafana/data';\nimport { locationService, reportInteraction } from '@grafana/runtime';\nimport { Box, Legend } from '@grafana/ui';\nimport { Form } from 'app/core/components/Form/Form';\nimport { StoreState } from 'app/types';\n\nimport { clearLoadedDashboard, importDashboard } from '../state/actions';\nimport { DashboardSource, ImportDashboardDTO } from '../state/reducers';\n\nimport { ImportDashboardForm } from './ImportDashboardForm';\n\nconst IMPORT_FINISHED_EVENT_NAME = 'dashboard_import_imported';\n\nconst mapStateToProps = (state: StoreState) => {\n  const searchObj = locationService.getSearchObject();\n\n  return {\n    dashboard: state.importDashboard.dashboard,\n    meta: state.importDashboard.meta,\n    source: state.importDashboard.source,\n    inputs: state.importDashboard.inputs,\n    folder: searchObj.folderUid ? { uid: String(searchObj.folderUid) } : { uid: '' },\n  };\n};\n\nconst mapDispatchToProps = {\n  clearLoadedDashboard,\n  importDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = ConnectedProps<typeof connector>;\n\ninterface State {\n  uidReset: boolean;\n}\n\nclass ImportDashboardOverviewUnConnected extends PureComponent<Props, State> {\n  state: State = {\n    uidReset: false,\n  };\n\n  onSubmit = (form: ImportDashboardDTO) => {\n    reportInteraction(IMPORT_FINISHED_EVENT_NAME);\n\n    this.props.importDashboard(form);\n  };\n\n  onCancel = () => {\n    this.props.clearLoadedDashboard();\n  };\n\n  onUidReset = () => {\n    this.setState({ uidReset: true });\n  };\n\n  render() {\n    const { dashboard, inputs, meta, source, folder } = this.props;\n    const { uidReset } = this.state;\n\n    return (\n      <>\n        {source === DashboardSource.Gcom && (\n          <Box marginBottom={3}>\n            <div>\n              <Legend>\n                Importing dashboard from{' '}\n                <a\n                  href={`https://grafana.com/dashboards/${dashboard.gnetId}`}\n                  className=\"external-link\"\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  Grafana.com\n                </a>\n              </Legend>\n            </div>\n            <table className=\"filter-table form-inline\">\n              <tbody>\n                <tr>\n                  <td>Published by</td>\n                  <td>{meta.orgName}</td>\n                </tr>\n                <tr>\n                  <td>Updated on</td>\n                  <td>{dateTimeFormat(meta.updatedAt)}</td>\n                </tr>\n              </tbody>\n            </table>\n          </Box>\n        )}\n        <Form\n          onSubmit={this.onSubmit}\n          defaultValues={{ ...dashboard, constants: [], dataSources: [], elements: [], folder: folder }}\n          validateOnMount\n          validateFieldsOnMount={['title', 'uid']}\n          validateOn=\"onChange\"\n        >\n          {({ register, errors, control, watch, getValues }) => (\n            <ImportDashboardForm\n              register={register}\n              errors={errors}\n              control={control}\n              getValues={getValues}\n              uidReset={uidReset}\n              inputs={inputs}\n              onCancel={this.onCancel}\n              onUidReset={this.onUidReset}\n              onSubmit={this.onSubmit}\n              watch={watch}\n              initialFolderUid={folder.uid}\n            />\n          )}\n        </Form>\n      </>\n    );\n  }\n}\n\nexport const ImportDashboardOverview = connector(ImportDashboardOverviewUnConnected);\nImportDashboardOverview.displayName = 'ImportDashboardOverview';\n","import { css } from '@emotion/css';\nimport React, { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { AppEvents, GrafanaTheme2, LoadingState, NavModelItem } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { config, reportInteraction } from '@grafana/runtime';\nimport {\n  Button,\n  Field,\n  Input,\n  Spinner,\n  stylesFactory,\n  TextArea,\n  Themeable2,\n  FileDropzone,\n  withTheme2,\n  DropzoneFile,\n  FileDropzoneDefaultChildren,\n  LinkButton,\n  TextLink,\n  Label,\n  Stack,\n} from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Form } from 'app/core/components/Form/Form';\nimport { Page } from 'app/core/components/Page/Page';\nimport { t, Trans } from 'app/core/internationalization';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { StoreState } from 'app/types';\n\nimport { cleanUpAction } from '../../core/actions/cleanUp';\n\nimport { ImportDashboardOverview } from './components/ImportDashboardOverview';\nimport { fetchGcomDashboard, importDashboardJson } from './state/actions';\nimport { initialImportDashboardState } from './state/reducers';\nimport { validateDashboardJson, validateGcomDashboard } from './utils/validation';\n\ntype DashboardImportPageRouteSearchParams = {\n  gcomDashboardId?: string;\n};\n\ntype OwnProps = Themeable2 & GrafanaRouteComponentProps<{}, DashboardImportPageRouteSearchParams>;\n\nconst IMPORT_STARTED_EVENT_NAME = 'dashboard_import_loaded';\nconst JSON_PLACEHOLDER = `{\n    \"title\": \"Example - Repeating Dictionary variables\",\n    \"uid\": \"_0HnEoN4z\",\n    \"panels\": [...]\n    ...\n}\n`;\n\nconst mapStateToProps = (state: StoreState) => ({\n  loadingState: state.importDashboard.state,\n});\n\nconst mapDispatchToProps = {\n  fetchGcomDashboard,\n  importDashboardJson,\n  cleanUpAction,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ntype Props = OwnProps & ConnectedProps<typeof connector>;\n\nclass UnthemedDashboardImport extends PureComponent<Props> {\n  constructor(props: Props) {\n    super(props);\n    const { gcomDashboardId } = this.props.queryParams;\n    if (gcomDashboardId) {\n      this.getGcomDashboard({ gcomDashboard: gcomDashboardId });\n      return;\n    }\n  }\n\n  componentWillUnmount() {\n    this.props.cleanUpAction({ cleanupAction: (state) => (state.importDashboard = initialImportDashboardState) });\n  }\n\n  // Do not display upload file list\n  fileListRenderer = (file: DropzoneFile, removeFile: (file: DropzoneFile) => void) => null;\n\n  onFileUpload = (result: string | ArrayBuffer | null) => {\n    reportInteraction(IMPORT_STARTED_EVENT_NAME, {\n      import_source: 'json_uploaded',\n    });\n\n    try {\n      this.props.importDashboardJson(JSON.parse(String(result)));\n    } catch (error) {\n      if (error instanceof Error) {\n        appEvents.emit(AppEvents.alertError, ['Import failed', 'JSON -> JS Serialization failed: ' + error.message]);\n      }\n      return;\n    }\n  };\n\n  getDashboardFromJson = (formData: { dashboardJson: string }) => {\n    reportInteraction(IMPORT_STARTED_EVENT_NAME, {\n      import_source: 'json_pasted',\n    });\n\n    this.props.importDashboardJson(JSON.parse(formData.dashboardJson));\n  };\n\n  getGcomDashboard = (formData: { gcomDashboard: string }) => {\n    reportInteraction(IMPORT_STARTED_EVENT_NAME, {\n      import_source: 'gcom',\n    });\n\n    let dashboardId;\n    const match = /(^\\d+$)|dashboards\\/(\\d+)/.exec(formData.gcomDashboard);\n    if (match && match[1]) {\n      dashboardId = match[1];\n    } else if (match && match[2]) {\n      dashboardId = match[2];\n    }\n\n    if (dashboardId) {\n      this.props.fetchGcomDashboard(dashboardId);\n    }\n  };\n\n  renderImportForm() {\n    const styles = importStyles(this.props.theme);\n\n    const GcomDashboardsLink = () => (\n      <TextLink variant=\"bodySmall\" href=\"https://grafana.com/grafana/dashboards/\" external>\n        grafana.com/dashboards\n      </TextLink>\n    );\n\n    return (\n      <>\n        <div className={styles.option}>\n          <FileDropzone\n            options={{ multiple: false, accept: ['.json', '.txt'] }}\n            readAs=\"readAsText\"\n            fileListRenderer={this.fileListRenderer}\n            onLoad={this.onFileUpload}\n          >\n            <FileDropzoneDefaultChildren\n              primaryText={t('dashboard-import.file-dropzone.primary-text', 'Upload dashboard JSON file')}\n              secondaryText={t(\n                'dashboard-import.file-dropzone.secondary-text',\n                'Drag and drop here or click to browse'\n              )}\n            />\n          </FileDropzone>\n        </div>\n        <div className={styles.option}>\n          <Form onSubmit={this.getGcomDashboard} defaultValues={{ gcomDashboard: '' }}>\n            {({ register, errors }) => (\n              <Field\n                label={\n                  <Label className={styles.labelWithLink} htmlFor=\"url-input\">\n                    <span>\n                      <Trans i18nKey=\"dashboard-import.gcom-field.label\">\n                        Find and import dashboards for common applications at <GcomDashboardsLink />\n                      </Trans>\n                    </span>\n                  </Label>\n                }\n                invalid={!!errors.gcomDashboard}\n                error={errors.gcomDashboard && errors.gcomDashboard.message}\n              >\n                <Input\n                  id=\"url-input\"\n                  placeholder={t('dashboard-import.gcom-field.placeholder', 'Grafana.com dashboard URL or ID')}\n                  type=\"text\"\n                  {...register('gcomDashboard', {\n                    required: t(\n                      'dashboard-import.gcom-field.validation-required',\n                      'A Grafana dashboard URL or ID is required'\n                    ),\n                    validate: validateGcomDashboard,\n                  })}\n                  addonAfter={\n                    <Button type=\"submit\">\n                      <Trans i18nKey=\"dashboard-import.gcom-field.load-button\">Load</Trans>\n                    </Button>\n                  }\n                />\n              </Field>\n            )}\n          </Form>\n        </div>\n        <div className={styles.option}>\n          <Form onSubmit={this.getDashboardFromJson} defaultValues={{ dashboardJson: '' }}>\n            {({ register, errors }) => (\n              <>\n                <Field\n                  label={t('dashboard-import.json-field.label', 'Import via dashboard JSON model')}\n                  invalid={!!errors.dashboardJson}\n                  error={errors.dashboardJson && errors.dashboardJson.message}\n                >\n                  <TextArea\n                    {...register('dashboardJson', {\n                      required: t('dashboard-import.json-field.validation-required', 'Need a dashboard JSON model'),\n                      validate: validateDashboardJson,\n                    })}\n                    data-testid={selectors.components.DashboardImportPage.textarea}\n                    id=\"dashboard-json-textarea\"\n                    rows={10}\n                    placeholder={JSON_PLACEHOLDER}\n                  />\n                </Field>\n                <Stack>\n                  <Button type=\"submit\" data-testid={selectors.components.DashboardImportPage.submit}>\n                    <Trans i18nKey=\"dashboard-import.form-actions.load\">Load</Trans>\n                  </Button>\n                  <LinkButton variant=\"secondary\" href={`${config.appSubUrl}/dashboards`}>\n                    <Trans i18nKey=\"dashboard-import.form-actions.cancel\">Cancel</Trans>\n                  </LinkButton>\n                </Stack>\n              </>\n            )}\n          </Form>\n        </div>\n      </>\n    );\n  }\n\n  pageNav: NavModelItem = {\n    text: 'Import dashboard',\n    subTitle: 'Import dashboard from file or Grafana.com',\n  };\n\n  render() {\n    const { loadingState } = this.props;\n\n    return (\n      <Page navId=\"dashboards/browse\" pageNav={this.pageNav}>\n        <Page.Contents>\n          {loadingState === LoadingState.Loading && (\n            <Stack direction={'column'} justifyContent=\"center\">\n              <Stack justifyContent=\"center\">\n                <Spinner size=\"xxl\" />\n              </Stack>\n            </Stack>\n          )}\n          {[LoadingState.Error, LoadingState.NotStarted].includes(loadingState) && this.renderImportForm()}\n          {loadingState === LoadingState.Done && <ImportDashboardOverview />}\n        </Page.Contents>\n      </Page>\n    );\n  }\n}\n\nconst DashboardImportUnConnected = withTheme2(UnthemedDashboardImport);\nconst DashboardImport = connector(DashboardImportUnConnected);\nDashboardImport.displayName = 'DashboardImport';\nexport default DashboardImport;\n\nconst importStyles = stylesFactory((theme: GrafanaTheme2) => {\n  return {\n    option: css`\n      margin-bottom: ${theme.spacing(4)};\n      max-width: 600px;\n    `,\n    labelWithLink: css`\n      max-width: 100%;\n    `,\n    linkWithinLabel: css`\n      font-size: inherit;\n    `,\n  };\n});\n"],"names":["validateDashboardJson","json","dashboard","tag","validateGcomDashboard","gcomDashboard","match","validateTitle","newTitle","folderUid","error","validateUid","value","existingDashboard","ImportDashboardLibraryPanelsList","inputs","label","description","folderName","styles","getStyles","Field","input","index","libraryPanelIndex","libraryPanel","LibraryPanelCard","theme","ImportDashboardForm","register","errors","control","getValues","uidReset","initialFolderUid","onUidReset","onCancel","onSubmit","watch","isSubmitted","setSubmitted","watchDataSources","watchFolder","newLibraryPanels","i","existingLibraryPanels","Legend","Input","v","selectors","ref","field","OldFolderPicker","Button","dataSourceOption","current","DataSourcePicker","constantIndex","Stack","getButtonVariant","getButtonText","IMPORT_FINISHED_EVENT_NAME","mapStateToProps","state","searchObj","mapDispatchToProps","connector","ImportDashboardOverviewUnConnected","form","meta","source","folder","Box","Form","ImportDashboardOverview","IMPORT_STARTED_EVENT_NAME","JSON_PLACEHOLDER","UnthemedDashboardImport","props","file","removeFile","result","formData","dashboardId","gcomDashboardId","importStyles","GcomDashboardsLink","TextLink","FileDropzone","Label","TextArea","config","loadingState","Page","Spinner","DashboardImportUnConnected","DashboardImport","stylesFactory"],"sourceRoot":""}