{"version":3,"file":"MuteTimings.61114e1c10ec66dff85e.js","mappings":"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CA,kBACA,gBACA,kBACA,kBACA,kBACA,gBACA,sBACA,cACA,iBACA,kBACA,gBACA,kBACA,eACA,oBACA,cACA,gBACA,oBACA,gBACA,gBACA,gBACA,gBACA,iBACA,mBACA,kBACA,iBACA,kBACA,gBACA,oBACA,qBACA,oBACA,kBACA,iBACA,eACA,kBACA,eACA,oBACA,mBACA,kBACA,oBACA,iCACA,8BACA,4BACA,0BACA,6BACA,4BACA,iCACA,0BACA,6BACA,6BACA,4BACA,4BACA,gBACA,mBACA,mBACA,gBACA,yBACA,mBACA,gBACA,iBACA,uBACA,oBACA,iBACA,gBACA,wBACA,uBACA,iBACA,kBACA,kBACA,iBACA,kBACA,oBACA,wBACA,qBACA,kBACA,iBACA,kBACA,uBACA,iBACA,uBACA,iBACA,kBACA,mBACA,mBACA,mBACA,sBACA,sBACA,oBACA,oBACA,kBACA,oBACA,qBACA,kBACA,qBACA,oBACA,oBACA,iBACA,kBACA,iBACA,qBACA,+BACA,uBACA,0BACA,6BACA,4BACA,wBACA,4BACA,0BACA,iBACA,kBACA,kBACA,iBACA,8BACA,8BACA,qBACA,iBACA,eACA,sBACA,wBACA,iBACA,kBACA,iBACA,kBACA,qBACA,oBACA,mBACA,oBACA,iBACA,qBACA,sBACA,mBACA,kBACA,oBACA,qBACA,mBACA,qBACA,iBACA,mBACA,kBACA,eACA,kBACA,8BACA,8BACA,iCACA,eACA,kBACA,iBACA,sBACA,qBACA,kBACA,yBACA,wBACA,sBACA,sBACA,uBACA,sBACA,uBACA,iBACA,iBACA,mBACA,qBACA,uBACA,mBACA,mBACA,wBACA,oBACA,uBACA,mBACA,gBACA,wBACA,mBACA,mBACA,mBACA,oBACA,qBACA,wBACA,sBACA,gBACA,sBACA,kBACA,kBACA,kBACA,oBACA,qBACA,mBACA,kBACA,sBACA,mBACA,mBACA,4BACA,uBACA,oBACA,qBACA,oBACA,qBACA,wBACA,mBACA,mBACA,oBACA,sBACA,YACA,cACA,aACA,cACA,aACA,cACA,gBACA,cACA,eACA,eACA,YACA,eACA,eACA,cACA,eACA,cACA,gBACA,aACA,kBACA,iBACA,eACA,gBACA,aACA,YACA,aACA,gBACA,iBACA,YACA,cACA,cACA,mBACA,iBACA,YACA,eACA,eACA,gBACA,iBACA,aACA,iBACA,eACA,eACA,iBACA,gBACA,gBACA,mBACA,oBACA,eACA,cACA,aACA,eACA,gBACA,cACA,cACA,eACA,oBACA,mBACA,YACA,YACA,kBACA,iBACA,iBACA,aACA,gBACA,iBACA,eACA,cACA,gBACA,iBACA,aACA,gBACA,iBACA,qBACA,cACA,gBACA,eACA,cACA,eACA,aACA,aACA,mBACA,cACA,gBACA,iBACA,mBACA,eACA,cACA,qBACA,eACA,kBACA,mBACA,kBACA,sBACA,iBACA,mBACA,qBACA,yBACA,qBACA,mBACA,qBACA,qBACA,wBACA,mBACA,mBACA,kBACA,mBACA,qBACA,sBACA,sBACA,kBACA,mBACA,mBACA,iBACA,mBACA,gBACA,kBACA,gBACA,oBACA,kBACA,mBACA,kBACA,kBACA,kBACA,oBACA,gBACA,mBACA,kBACA,kBACA,qBACA,kBACA,gBACA,qBACA,cACA,eACA,cACA,gBACA,mBACA,gBACA,oBACA,gBACA,eACA,mBACA,eACA,gBACA,gBACA,cACA,eACA,mBACA,gBACA,cACA,cACA,gBACA,oBACA,kBACA,iBACA,oBACA,gBACA,eACA,mBACA,iBACA,gBACA,mBACA,kBACA,eACA,iBACA,gBACA,iBACA,mBACA,gBACA,gBACA,oBACA,gBACA,MACA,sBACA,gBACA,mBACA,eACA,gBACA,mBACA,cACA,kBACA,mBACA,iBACA,iBACA,QACA,eACA,mBACA,uBACA,kBACA,gBACA,iBACA,gBACA,oBACA,kBACA,eACA,mBACA,oBACA,kBACA,sBACA,eACA,mBACA,mBACA,iBACA,qBACA,iBACA,oBACA,iBACA,oBACA,iBACA,gBACA,eACA,kBACA,iBACA,oBACA,gBAC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","sources":["webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingTimeRange.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/timezones.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingTimeInterval.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/MuteTimingForm.tsx","webpack://grafana/./public/app/features/alerting/unified/MuteTimings.tsx","webpack://grafana/./public/app/features/alerting/unified/components/ConditionalWrap.tsx","webpack://grafana/./public/app/features/alerting/unified/components/mute-timings/util.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/useAlertmanagerConfig.ts","webpack://grafana/./public/app/features/alerting/unified/utils/mute-timings.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport React from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, Icon, IconButton, InlineField, InlineFieldRow, Input, Tooltip, useStyles2 } from '@grafana/ui';\n\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport ConditionalWrap from '../ConditionalWrap';\n\nimport { isValidStartAndEndTime, isvalidTimeFormat } from './util';\n\ninterface Props {\n  intervalIndex: number;\n}\n\nconst INVALID_FORMAT_MESSAGE = 'Times must be between 00:00 and 24:00 UTC';\n\nexport const MuteTimingTimeRange = ({ intervalIndex }: Props) => {\n  const styles = useStyles2(getStyles);\n  const { register, formState, getValues, watch } = useFormContext<MuteTimingFields>();\n  const isDisabled = watch(`time_intervals.${intervalIndex}.disable`);\n\n  const {\n    fields: timeRanges,\n    append: addTimeRange,\n    remove: removeTimeRange,\n  } = useFieldArray<MuteTimingFields>({\n    name: `time_intervals.${intervalIndex}.times`,\n  });\n\n  const formErrors = formState.errors.time_intervals?.[intervalIndex];\n  const timeRangeInvalid = formErrors?.times?.some?.((value) => value?.start_time || value?.end_time) ?? false;\n\n  return (\n    <div>\n      <Field\n        className={styles.field}\n        label=\"Time range\"\n        description=\"The time inclusive of the start and exclusive of the end time (in UTC if no location has been selected, otherwise local time)\"\n        invalid={timeRangeInvalid}\n      >\n        <>\n          {timeRanges.map((timeRange, index) => {\n            const timeRangeErrors = formErrors?.times?.[index];\n            const startTimeKey = `time_intervals.${intervalIndex}.times.${index}.start_time`;\n            const endTimeKey = `time_intervals.${intervalIndex}.times.${index}.end_time`;\n\n            const getStartAndEndTime = (): [string | undefined, string | undefined] => {\n              // @ts-ignore react-hook-form doesn't handle nested field arrays well\n              const startTime: string = getValues(startTimeKey);\n              // @ts-ignore react-hook-form doesn't handle nested field arrays well\n              const endTime: string = getValues(endTimeKey);\n\n              return [startTime, endTime];\n            };\n\n            return (\n              <div className={styles.timeRange} key={timeRange.id}>\n                <InlineFieldRow>\n                  <InlineField\n                    label=\"Start time\"\n                    invalid={Boolean(timeRangeErrors?.start_time)}\n                    error={timeRangeErrors?.start_time?.message}\n                  >\n                    <Input\n                      // @ts-ignore\n                      {...register(startTimeKey, {\n                        validate: (input: string) => {\n                          const validFormat = isvalidTimeFormat(input);\n                          if (!validFormat) {\n                            return INVALID_FORMAT_MESSAGE;\n                          }\n\n                          const [startTime, endTime] = getStartAndEndTime();\n\n                          if (isValidStartAndEndTime(startTime, endTime)) {\n                            return;\n                          } else {\n                            return 'Start time must be before end time';\n                          }\n                        },\n                      })}\n                      className={styles.timeRangeInput}\n                      maxLength={5}\n                      readOnly={isDisabled}\n                      suffix={<Icon name=\"clock-nine\" />}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.start_time}\n                      placeholder=\"HH:mm\"\n                      data-testid=\"mute-timing-starts-at\"\n                    />\n                  </InlineField>\n                  <InlineField\n                    label=\"End time\"\n                    invalid={Boolean(timeRangeErrors?.end_time)}\n                    error={timeRangeErrors?.end_time?.message}\n                  >\n                    <Input\n                      {...register(`time_intervals.${intervalIndex}.times.${index}.end_time`, {\n                        validate: (input: string) => {\n                          const validFormat = isvalidTimeFormat(input);\n                          if (!validFormat) {\n                            return INVALID_FORMAT_MESSAGE;\n                          }\n\n                          const [startTime, endTime] = getStartAndEndTime();\n\n                          if (isValidStartAndEndTime(startTime, endTime)) {\n                            return;\n                          } else {\n                            return 'End time must be after start time';\n                          }\n                        },\n                      })}\n                      className={styles.timeRangeInput}\n                      maxLength={5}\n                      readOnly={isDisabled}\n                      suffix={<Icon name=\"clock-nine\" />}\n                      // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                      defaultValue={timeRange.end_time}\n                      placeholder=\"HH:mm\"\n                      data-testid=\"mute-timing-ends-at\"\n                    />\n                  </InlineField>\n                  <IconButton\n                    className={styles.deleteTimeRange}\n                    title=\"Remove\"\n                    name=\"trash-alt\"\n                    onClick={(e) => {\n                      e.preventDefault();\n                      removeTimeRange(index);\n                    }}\n                    tooltip=\"Remove time range\"\n                  />\n                </InlineFieldRow>\n              </div>\n            );\n          })}\n        </>\n      </Field>\n      <ConditionalWrap\n        shouldWrap={isDisabled}\n        wrap={(children) => (\n          <Tooltip content=\"This time interval is disabled\" placement=\"right-start\">\n            {children}\n          </Tooltip>\n        )}\n      >\n        <Button\n          className={styles.addTimeRange}\n          variant=\"secondary\"\n          type=\"button\"\n          icon=\"plus\"\n          disabled={isDisabled}\n          onClick={() => addTimeRange({ start_time: '', end_time: '' })}\n        >\n          Add another time range\n        </Button>\n      </ConditionalWrap>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  field: css`\n    margin-bottom: 0;\n  `,\n  timeRange: css`\n    margin-bottom: ${theme.spacing(1)};\n  `,\n  timeRangeInput: css`\n    width: 90px;\n  `,\n  deleteTimeRange: css`\n    margin: ${theme.spacing(1)} 0 0 ${theme.spacing(0.5)};\n  `,\n  addTimeRange: css`\n    margin-bottom: ${theme.spacing(2)};\n  `,\n});\n","import React from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select, SelectCommonProps } from '@grafana/ui';\n\nconst TIMEZONES = [\n  'Africa/Abidjan',\n  'Africa/Accra',\n  'Africa/Addis_Ababa',\n  'Africa/Algiers',\n  'Africa/Asmara',\n  'Africa/Bamako',\n  'Africa/Bangui',\n  'Africa/Banjul',\n  'Africa/Bissau',\n  'Africa/Blantyre',\n  'Africa/Brazzaville',\n  'Africa/Bujumbura',\n  'Africa/Cairo',\n  'Africa/Casablanca',\n  'Africa/Ceuta',\n  'Africa/Conakry',\n  'Africa/Dakar',\n  'Africa/Dar_es_Salaam',\n  'Africa/Djibouti',\n  'Africa/Douala',\n  'Africa/El_Aaiun',\n  'Africa/Freetown',\n  'Africa/Gaborone',\n  'Africa/Harare',\n  'Africa/Johannesburg',\n  'Africa/Juba',\n  'Africa/Kampala',\n  'Africa/Khartoum',\n  'Africa/Kigali',\n  'Africa/Kinshasa',\n  'Africa/Lagos',\n  'Africa/Libreville',\n  'Africa/Lome',\n  'Africa/Luanda',\n  'Africa/Lubumbashi',\n  'Africa/Lusaka',\n  'Africa/Malabo',\n  'Africa/Maputo',\n  'Africa/Maseru',\n  'Africa/Mbabane',\n  'Africa/Mogadishu',\n  'Africa/Monrovia',\n  'Africa/Nairobi',\n  'Africa/Ndjamena',\n  'Africa/Niamey',\n  'Africa/Nouakchott',\n  'Africa/Ouagadougou',\n  'Africa/Porto-Novo',\n  'Africa/Sao_Tome',\n  'Africa/Tripoli',\n  'Africa/Tunis',\n  'Africa/Windhoek',\n  'America/Adak',\n  'America/Anchorage',\n  'America/Anguilla',\n  'America/Antigua',\n  'America/Araguaina',\n  'America/Argentina/Buenos_Aires',\n  'America/Argentina/Catamarca',\n  'America/Argentina/Cordoba',\n  'America/Argentina/Jujuy',\n  'America/Argentina/La_Rioja',\n  'America/Argentina/Mendoza',\n  'America/Argentina/Rio_Gallegos',\n  'America/Argentina/Salta',\n  'America/Argentina/San_Juan',\n  'America/Argentina/San_Luis',\n  'America/Argentina/Tucuman',\n  'America/Argentina/Ushuaia',\n  'America/Aruba',\n  'America/Asuncion',\n  'America/Atikokan',\n  'America/Bahia',\n  'America/Bahia_Banderas',\n  'America/Barbados',\n  'America/Belem',\n  'America/Belize',\n  'America/Blanc-Sablon',\n  'America/Boa_Vista',\n  'America/Bogota',\n  'America/Boise',\n  'America/Cambridge_Bay',\n  'America/Campo_Grande',\n  'America/Cancun',\n  'America/Caracas',\n  'America/Cayenne',\n  'America/Cayman',\n  'America/Chicago',\n  'America/Chihuahua',\n  'America/Ciudad_Juarez',\n  'America/Costa_Rica',\n  'America/Creston',\n  'America/Cuiaba',\n  'America/Curacao',\n  'America/Danmarkshavn',\n  'America/Dawson',\n  'America/Dawson_Creek',\n  'America/Denver',\n  'America/Detroit',\n  'America/Dominica',\n  'America/Edmonton',\n  'America/Eirunepe',\n  'America/El_Salvador',\n  'America/Fort_Nelson',\n  'America/Fortaleza',\n  'America/Glace_Bay',\n  'America/Godthab',\n  'America/Goose_Bay',\n  'America/Grand_Turk',\n  'America/Grenada',\n  'America/Guadeloupe',\n  'America/Guatemala',\n  'America/Guayaquil',\n  'America/Guyana',\n  'America/Halifax',\n  'America/Havana',\n  'America/Hermosillo',\n  'America/Indiana/Indianapolis',\n  'America/Indiana/Knox',\n  'America/Indiana/Marengo',\n  'America/Indiana/Petersburg',\n  'America/Indiana/Tell_City',\n  'America/Indiana/Vevay',\n  'America/Indiana/Vincennes',\n  'America/Indiana/Winamac',\n  'America/Inuvik',\n  'America/Iqaluit',\n  'America/Jamaica',\n  'America/Juneau',\n  'America/Kentucky/Louisville',\n  'America/Kentucky/Monticello',\n  'America/Kralendijk',\n  'America/La_Paz',\n  'America/Lima',\n  'America/Los_Angeles',\n  'America/Lower_Princes',\n  'America/Maceio',\n  'America/Managua',\n  'America/Manaus',\n  'America/Marigot',\n  'America/Martinique',\n  'America/Matamoros',\n  'America/Mazatlan',\n  'America/Menominee',\n  'America/Merida',\n  'America/Metlakatla',\n  'America/Mexico_City',\n  'America/Miquelon',\n  'America/Moncton',\n  'America/Monterrey',\n  'America/Montevideo',\n  'America/Montreal',\n  'America/Montserrat',\n  'America/Nassau',\n  'America/New_York',\n  'America/Nipigon',\n  'America/Nome',\n  'America/Noronha',\n  'America/North_Dakota/Beulah',\n  'America/North_Dakota/Center',\n  'America/North_Dakota/New_Salem',\n  'America/Nuuk',\n  'America/Ojinaga',\n  'America/Panama',\n  'America/Pangnirtung',\n  'America/Paramaribo',\n  'America/Phoenix',\n  'America/Port-au-Prince',\n  'America/Port_of_Spain',\n  'America/Porto_Velho',\n  'America/Puerto_Rico',\n  'America/Punta_Arenas',\n  'America/Rainy_River',\n  'America/Rankin_Inlet',\n  'America/Recife',\n  'America/Regina',\n  'America/Resolute',\n  'America/Rio_Branco',\n  'America/Santa_Isabel',\n  'America/Santarem',\n  'America/Santiago',\n  'America/Santo_Domingo',\n  'America/Sao_Paulo',\n  'America/Scoresbysund',\n  'America/Shiprock',\n  'America/Sitka',\n  'America/St_Barthelemy',\n  'America/St_Johns',\n  'America/St_Kitts',\n  'America/St_Lucia',\n  'America/St_Thomas',\n  'America/St_Vincent',\n  'America/Swift_Current',\n  'America/Tegucigalpa',\n  'America/Thule',\n  'America/Thunder_Bay',\n  'America/Tijuana',\n  'America/Toronto',\n  'America/Tortola',\n  'America/Vancouver',\n  'America/Whitehorse',\n  'America/Winnipeg',\n  'America/Yakutat',\n  'America/Yellowknife',\n  'Antarctica/Casey',\n  'Antarctica/Davis',\n  'Antarctica/DumontDUrville',\n  'Antarctica/Macquarie',\n  'Antarctica/Mawson',\n  'Antarctica/McMurdo',\n  'Antarctica/Palmer',\n  'Antarctica/Rothera',\n  'Antarctica/South_Pole',\n  'Antarctica/Syowa',\n  'Antarctica/Troll',\n  'Antarctica/Vostok',\n  'Arctic/Longyearbyen',\n  'Asia/Aden',\n  'Asia/Almaty',\n  'Asia/Amman',\n  'Asia/Anadyr',\n  'Asia/Aqtau',\n  'Asia/Aqtobe',\n  'Asia/Ashgabat',\n  'Asia/Atyrau',\n  'Asia/Baghdad',\n  'Asia/Bahrain',\n  'Asia/Baku',\n  'Asia/Bangkok',\n  'Asia/Barnaul',\n  'Asia/Beirut',\n  'Asia/Bishkek',\n  'Asia/Brunei',\n  'Asia/Calcutta',\n  'Asia/Chita',\n  'Asia/Choibalsan',\n  'Asia/Chongqing',\n  'Asia/Colombo',\n  'Asia/Damascus',\n  'Asia/Dhaka',\n  'Asia/Dili',\n  'Asia/Dubai',\n  'Asia/Dushanbe',\n  'Asia/Famagusta',\n  'Asia/Gaza',\n  'Asia/Harbin',\n  'Asia/Hebron',\n  'Asia/Ho_Chi_Minh',\n  'Asia/Hong_Kong',\n  'Asia/Hovd',\n  'Asia/Irkutsk',\n  'Asia/Jakarta',\n  'Asia/Jayapura',\n  'Asia/Jerusalem',\n  'Asia/Kabul',\n  'Asia/Kamchatka',\n  'Asia/Karachi',\n  'Asia/Kashgar',\n  'Asia/Kathmandu',\n  'Asia/Katmandu',\n  'Asia/Khandyga',\n  'Asia/Krasnoyarsk',\n  'Asia/Kuala_Lumpur',\n  'Asia/Kuching',\n  'Asia/Kuwait',\n  'Asia/Macau',\n  'Asia/Magadan',\n  'Asia/Makassar',\n  'Asia/Manila',\n  'Asia/Muscat',\n  'Asia/Nicosia',\n  'Asia/Novokuznetsk',\n  'Asia/Novosibirsk',\n  'Asia/Omsk',\n  'Asia/Oral',\n  'Asia/Phnom_Penh',\n  'Asia/Pontianak',\n  'Asia/Pyongyang',\n  'Asia/Qatar',\n  'Asia/Qostanay',\n  'Asia/Qyzylorda',\n  'Asia/Rangoon',\n  'Asia/Riyadh',\n  'Asia/Sakhalin',\n  'Asia/Samarkand',\n  'Asia/Seoul',\n  'Asia/Shanghai',\n  'Asia/Singapore',\n  'Asia/Srednekolymsk',\n  'Asia/Taipei',\n  'Asia/Tashkent',\n  'Asia/Tbilisi',\n  'Asia/Tehran',\n  'Asia/Thimphu',\n  'Asia/Tokyo',\n  'Asia/Tomsk',\n  'Asia/Ulaanbaatar',\n  'Asia/Urumqi',\n  'Asia/Ust-Nera',\n  'Asia/Vientiane',\n  'Asia/Vladivostok',\n  'Asia/Yakutsk',\n  'Asia/Yangon',\n  'Asia/Yekaterinburg',\n  'Asia/Yerevan',\n  'Atlantic/Azores',\n  'Atlantic/Bermuda',\n  'Atlantic/Canary',\n  'Atlantic/Cape_Verde',\n  'Atlantic/Faroe',\n  'Atlantic/Madeira',\n  'Atlantic/Reykjavik',\n  'Atlantic/South_Georgia',\n  'Atlantic/St_Helena',\n  'Atlantic/Stanley',\n  'Australia/Adelaide',\n  'Australia/Brisbane',\n  'Australia/Broken_Hill',\n  'Australia/Currie',\n  'Australia/Darwin',\n  'Australia/Eucla',\n  'Australia/Hobart',\n  'Australia/Lindeman',\n  'Australia/Lord_Howe',\n  'Australia/Melbourne',\n  'Australia/Perth',\n  'Australia/Sydney',\n  'Europe/Amsterdam',\n  'Europe/Andorra',\n  'Europe/Astrakhan',\n  'Europe/Athens',\n  'Europe/Belgrade',\n  'Europe/Berlin',\n  'Europe/Bratislava',\n  'Europe/Brussels',\n  'Europe/Bucharest',\n  'Europe/Budapest',\n  'Europe/Busingen',\n  'Europe/Chisinau',\n  'Europe/Copenhagen',\n  'Europe/Dublin',\n  'Europe/Gibraltar',\n  'Europe/Guernsey',\n  'Europe/Helsinki',\n  'Europe/Isle_of_Man',\n  'Europe/Istanbul',\n  'Europe/Jersey',\n  'Europe/Kaliningrad',\n  'Europe/Kiev',\n  'Europe/Kirov',\n  'Europe/Kyiv',\n  'Europe/Lisbon',\n  'Europe/Ljubljana',\n  'Europe/London',\n  'Europe/Luxembourg',\n  'Europe/Madrid',\n  'Europe/Malta',\n  'Europe/Mariehamn',\n  'Europe/Minsk',\n  'Europe/Monaco',\n  'Europe/Moscow',\n  'Europe/Oslo',\n  'Europe/Paris',\n  'Europe/Podgorica',\n  'Europe/Prague',\n  'Europe/Riga',\n  'Europe/Rome',\n  'Europe/Samara',\n  'Europe/San_Marino',\n  'Europe/Sarajevo',\n  'Europe/Saratov',\n  'Europe/Simferopol',\n  'Europe/Skopje',\n  'Europe/Sofia',\n  'Europe/Stockholm',\n  'Europe/Tallinn',\n  'Europe/Tirane',\n  'Europe/Ulyanovsk',\n  'Europe/Uzhgorod',\n  'Europe/Vaduz',\n  'Europe/Vatican',\n  'Europe/Vienna',\n  'Europe/Vilnius',\n  'Europe/Volgograd',\n  'Europe/Warsaw',\n  'Europe/Zagreb',\n  'Europe/Zaporozhye',\n  'Europe/Zurich',\n  'GMT',\n  'Indian/Antananarivo',\n  'Indian/Chagos',\n  'Indian/Christmas',\n  'Indian/Cocos',\n  'Indian/Comoro',\n  'Indian/Kerguelen',\n  'Indian/Mahe',\n  'Indian/Maldives',\n  'Indian/Mauritius',\n  'Indian/Mayotte',\n  'Indian/Reunion',\n  'Local', // this is the local timezone of the machine\n  'Pacific/Apia',\n  'Pacific/Auckland',\n  'Pacific/Bougainville',\n  'Pacific/Chatham',\n  'Pacific/Chuuk',\n  'Pacific/Easter',\n  'Pacific/Efate',\n  'Pacific/Enderbury',\n  'Pacific/Fakaofo',\n  'Pacific/Fiji',\n  'Pacific/Funafuti',\n  'Pacific/Galapagos',\n  'Pacific/Gambier',\n  'Pacific/Guadalcanal',\n  'Pacific/Guam',\n  'Pacific/Honolulu',\n  'Pacific/Johnston',\n  'Pacific/Kanton',\n  'Pacific/Kiritimati',\n  'Pacific/Kosrae',\n  'Pacific/Kwajalein',\n  'Pacific/Majuro',\n  'Pacific/Marquesas',\n  'Pacific/Midway',\n  'Pacific/Nauru',\n  'Pacific/Niue',\n  'Pacific/Norfolk',\n  'Pacific/Noumea',\n  'Pacific/Pago_Pago',\n  'Pacific/Palau',\n  'Pacific/Pitcairn',\n  'Pacific/Pohnpei',\n  'Pacific/Ponape',\n  'Pacific/Port_Moresby',\n  'Pacific/Rarotonga',\n  'Pacific/Saipan',\n  'Pacific/Tahiti',\n  'Pacific/Tarawa',\n  'Pacific/Tongatapu',\n  'Pacific/Truk',\n  'Pacific/Wake',\n  'Pacific/Wallis',\n  'UTC',\n];\n\nexport const TimezoneSelect = (options: SelectCommonProps<string>) => {\n  const timezoneOptions: Array<SelectableValue<string>> = TIMEZONES.map((tz) => ({\n    label: tz,\n    value: tz,\n  }));\n\n  return <Select<string> {...options} options={timezoneOptions} />;\n};\n","import { css, cx } from '@emotion/css';\nimport { concat, uniq, upperFirst, without } from 'lodash';\nimport React, { useEffect, useState } from 'react';\nimport { useFieldArray, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, Field, FieldSet, Icon, InlineSwitch, Input, Stack, useStyles2 } from '@grafana/ui';\n\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { DAYS_OF_THE_WEEK, defaultTimeInterval, MONTHS, validateArrayField } from '../../utils/mute-timings';\n\nimport { MuteTimingTimeRange } from './MuteTimingTimeRange';\nimport { TimezoneSelect } from './timezones';\n\nexport const MuteTimingTimeInterval = () => {\n  const styles = useStyles2(getStyles);\n  const { formState, register, setValue } = useFormContext<MuteTimingFields>();\n  const {\n    fields: timeIntervals,\n    append: addTimeInterval,\n    remove: removeTimeInterval,\n  } = useFieldArray({\n    name: 'time_intervals',\n  });\n  const { isGrafanaAlertmanager } = useAlertmanager();\n\n  return (\n    <FieldSet label=\"Time intervals\">\n      <>\n        <p>\n          A time interval is a definition for a moment in time. All fields are lists, and at least one list element must\n          be satisfied to match the field. If a field is left blank, any moment of time will match the field. For an\n          instant of time to match a complete time interval, all fields must match. A mute timing can contain multiple\n          time intervals.\n        </p>\n        <Stack direction=\"column\" gap={2}>\n          {timeIntervals.map((timeInterval, timeIntervalIndex) => {\n            const errors = formState.errors;\n\n            // manually register the \"location\" field, react-hook-form doesn't handle nested field arrays well and will refuse to set\n            // the default value for the field when using \"useFieldArray\"\n            register(`time_intervals.${timeIntervalIndex}.location`);\n\n            return (\n              <div key={timeInterval.id} className={styles.timeIntervalSection}>\n                <MuteTimingTimeRange intervalIndex={timeIntervalIndex} />\n                <Field\n                  label=\"Location\"\n                  invalid={Boolean(errors.time_intervals?.[timeIntervalIndex]?.location)}\n                  error={errors.time_intervals?.[timeIntervalIndex]?.location?.message}\n                >\n                  <TimezoneSelect\n                    prefix={<Icon name=\"map-marker\" />}\n                    width={50}\n                    onChange={(selectedTimezone) => {\n                      setValue(`time_intervals.${timeIntervalIndex}.location`, selectedTimezone.value);\n                    }}\n                    // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                    defaultValue={{ label: timeInterval.location, value: timeInterval.location }}\n                    data-testid=\"mute-timing-location\"\n                  />\n                </Field>\n                <Field label=\"Days of the week\">\n                  <DaysOfTheWeek\n                    onChange={(daysOfWeek) => {\n                      setValue(`time_intervals.${timeIntervalIndex}.weekdays`, daysOfWeek);\n                    }}\n                    // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                    defaultValue={timeInterval.weekdays}\n                  />\n                </Field>\n                <Field\n                  label=\"Days of the month\"\n                  description=\"The days of the month, 1-31, of a month. Negative values can be used to represent days which begin at the end of the month\"\n                  invalid={!!errors.time_intervals?.[timeIntervalIndex]?.days_of_month}\n                  error={errors.time_intervals?.[timeIntervalIndex]?.days_of_month?.message}\n                >\n                  <Input\n                    {...register(`time_intervals.${timeIntervalIndex}.days_of_month`, {\n                      validate: (value) =>\n                        validateArrayField(\n                          value,\n                          (day) => {\n                            const parsedDay = parseInt(day, 10);\n                            return (parsedDay > -31 && parsedDay < 0) || (parsedDay > 0 && parsedDay < 32);\n                          },\n                          'Invalid day'\n                        ),\n                    })}\n                    width={50}\n                    // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                    defaultValue={timeInterval.days_of_month}\n                    placeholder=\"Example: 1, 14:16, -1\"\n                    data-testid=\"mute-timing-days\"\n                  />\n                </Field>\n                <Field\n                  label=\"Months\"\n                  description=\"The months of the year in either numerical or the full calendar month\"\n                  invalid={!!errors.time_intervals?.[timeIntervalIndex]?.months}\n                  error={errors.time_intervals?.[timeIntervalIndex]?.months?.message}\n                >\n                  <Input\n                    {...register(`time_intervals.${timeIntervalIndex}.months`, {\n                      validate: (value) =>\n                        validateArrayField(\n                          value,\n                          (month) => MONTHS.includes(month) || (parseInt(month, 10) < 13 && parseInt(month, 10) > 0),\n                          'Invalid month'\n                        ),\n                    })}\n                    width={50}\n                    placeholder=\"Example: 1:3, may:august, december\"\n                    // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                    defaultValue={timeInterval.months}\n                    data-testid=\"mute-timing-months\"\n                  />\n                </Field>\n                <Field\n                  label=\"Years\"\n                  invalid={!!errors.time_intervals?.[timeIntervalIndex]?.years}\n                  error={errors.time_intervals?.[timeIntervalIndex]?.years?.message ?? ''}\n                >\n                  <Input\n                    {...register(`time_intervals.${timeIntervalIndex}.years`, {\n                      validate: (value) => validateArrayField(value, (year) => /^\\d{4}$/.test(year), 'Invalid year'),\n                    })}\n                    width={50}\n                    placeholder=\"Example: 2021:2022, 2030\"\n                    // @ts-ignore react-hook-form doesn't handle nested field arrays well\n                    defaultValue={timeInterval.years}\n                    data-testid=\"mute-timing-years\"\n                  />\n                </Field>\n                <Stack direction=\"row\" gap={2}>\n                  <Button\n                    type=\"button\"\n                    variant=\"destructive\"\n                    fill=\"outline\"\n                    icon=\"trash-alt\"\n                    onClick={() => removeTimeInterval(timeIntervalIndex)}\n                  >\n                    Remove time interval\n                  </Button>\n                  {/* \n                    This switch is only available for Grafana Alertmanager, as for now, Grafana alert manager doesn't support this feature\n                    It hanldes empty list as undefined making impossible the use of an empty list for disabling time interval\n                  */}\n                  {!isGrafanaAlertmanager && (\n                    <InlineSwitch\n                      id={`time_intervals.${timeIntervalIndex}.disable`}\n                      label=\"Disable\"\n                      showLabel\n                      transparent\n                      {...register(`time_intervals.${timeIntervalIndex}.disable`)}\n                    />\n                  )}\n                </Stack>\n              </div>\n            );\n          })}\n        </Stack>\n        <Button\n          type=\"button\"\n          variant=\"secondary\"\n          className={styles.removeTimeIntervalButton}\n          onClick={() => {\n            addTimeInterval(defaultTimeInterval);\n          }}\n          icon=\"plus\"\n        >\n          Add another time interval\n        </Button>\n      </>\n    </FieldSet>\n  );\n};\n\ninterface DaysOfTheWeekProps {\n  defaultValue?: string;\n  onChange: (input: string) => void;\n}\n\nconst parseDays = (input: string): string[] => {\n  const parsedDays = input\n    .split(',')\n    .map((day) => day.trim())\n    // each \"day\" could still be a range of days, so we parse the range\n    .flatMap((day) => (day.includes(':') ? parseWeekdayRange(day) : day))\n    .map((day) => day.toLowerCase())\n    // remove invalid weekdays\n    .filter((day) => DAYS_OF_THE_WEEK.includes(day));\n\n  return uniq(parsedDays);\n};\n\n// parse monday:wednesday to [\"monday\", \"tuesday\", \"wednesday\"]\nfunction parseWeekdayRange(input: string): string[] {\n  const [start = '', end = ''] = input.split(':');\n\n  const startIndex = DAYS_OF_THE_WEEK.indexOf(start);\n  const endIndex = DAYS_OF_THE_WEEK.indexOf(end);\n\n  return DAYS_OF_THE_WEEK.slice(startIndex, endIndex + 1);\n}\n\nconst DaysOfTheWeek = ({ defaultValue = '', onChange }: DaysOfTheWeekProps) => {\n  const styles = useStyles2(getStyles);\n  const defaultValues = parseDays(defaultValue);\n  const [selectedDays, setSelectedDays] = useState<string[]>(defaultValues);\n\n  const toggleDay = (day: string) => {\n    selectedDays.includes(day)\n      ? setSelectedDays((selectedDays) => without(selectedDays, day))\n      : setSelectedDays((selectedDays) => concat(selectedDays, day));\n  };\n\n  useEffect(() => {\n    onChange(selectedDays.join(', '));\n  }, [selectedDays, onChange]);\n\n  return (\n    <div data-testid=\"mute-timing-weekdays\">\n      <Stack gap={1}>\n        {DAYS_OF_THE_WEEK.map((day) => {\n          const style = cx(styles.dayOfTheWeek, selectedDays.includes(day) && 'selected');\n          const abbreviated = day.slice(0, 3);\n\n          return (\n            <button type=\"button\" key={day} className={style} onClick={() => toggleDay(day)}>\n              {upperFirst(abbreviated)}\n            </button>\n          );\n        })}\n      </Stack>\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  timeIntervalSection: css`\n    background-color: ${theme.colors.background.secondary};\n    padding: ${theme.spacing(2)};\n  `,\n  removeTimeIntervalButton: css`\n    margin-top: ${theme.spacing(2)};\n  `,\n  dayOfTheWeek: css`\n    cursor: pointer;\n    user-select: none;\n    padding: ${theme.spacing(1)} ${theme.spacing(3)};\n\n    border: solid 1px ${theme.colors.border.medium};\n    background: none;\n    border-radius: ${theme.shape.radius.default};\n\n    color: ${theme.colors.text.secondary};\n\n    &.selected {\n      font-weight: ${theme.typography.fontWeightBold};\n      color: ${theme.colors.primary.text};\n      border-color: ${theme.colors.primary.border};\n      background: ${theme.colors.primary.transparent};\n    }\n  `,\n});\n","import { css } from '@emotion/css';\nimport React, { useState } from 'react';\nimport { FormProvider, useForm } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Button, Field, FieldSet, Input, LinkButton, LoadingPlaceholder, useStyles2 } from '@grafana/ui';\nimport { AlertManagerCortexConfig, MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\nimport { useDispatch } from 'app/types';\n\nimport { useAlertmanagerConfig } from '../../hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from '../../state/AlertmanagerContext';\nimport { updateAlertManagerConfigAction } from '../../state/actions';\nimport { MuteTimingFields } from '../../types/mute-timing-form';\nimport { renameMuteTimings } from '../../utils/alertmanager';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { makeAMLink } from '../../utils/misc';\nimport { createMuteTiming, defaultTimeInterval, isTimeIntervalDisabled } from '../../utils/mute-timings';\nimport { ProvisionedResource, ProvisioningAlert } from '../Provisioning';\n\nimport { MuteTimingTimeInterval } from './MuteTimingTimeInterval';\n\ninterface Props {\n  fromLegacyTimeInterval?: MuteTimeInterval; // mute time interval when comes from the old config , mute_time_intervals\n  fromTimeIntervals?: MuteTimeInterval; // mute time interval when comes from the new config , time_intervals. These two fields are mutually exclusive\n  showError?: boolean;\n  provenance?: string;\n  loading?: boolean;\n}\n\nconst useDefaultValues = (muteTiming?: MuteTimeInterval): MuteTimingFields => {\n  const defaultValues = {\n    name: '',\n    time_intervals: [defaultTimeInterval],\n  };\n\n  if (!muteTiming) {\n    return defaultValues;\n  }\n\n  const intervals = muteTiming.time_intervals.map((interval) => ({\n    times: interval.times,\n    weekdays: interval.weekdays?.join(', '),\n    days_of_month: interval.days_of_month?.join(', '),\n    months: interval.months?.join(', '),\n    years: interval.years?.join(', '),\n    location: interval.location ?? defaultTimeInterval.location,\n    disable: isTimeIntervalDisabled(interval),\n  }));\n\n  return {\n    name: muteTiming.name,\n    time_intervals: intervals,\n  };\n};\n\nconst replaceMuteTiming = (\n  originalTimings: MuteTimeInterval[],\n  existingTiming: MuteTimeInterval | undefined,\n  newTiming: MuteTimeInterval,\n  addNew: boolean\n) => {\n  // we only add new timing if addNew is true. Otherwise, we just remove the existing timing\n  const originalTimingsWithoutNew = existingTiming\n    ? originalTimings?.filter(({ name }) => name !== existingTiming.name)\n    : originalTimings;\n  return addNew ? [...originalTimingsWithoutNew, newTiming] : [...originalTimingsWithoutNew];\n};\n\nconst MuteTimingForm = ({\n  fromLegacyTimeInterval: fromMuteTimings,\n  fromTimeIntervals,\n  showError,\n  loading,\n  provenance,\n}: Props) => {\n  const dispatch = useDispatch();\n  const { selectedAlertmanager } = useAlertmanager();\n  const styles = useStyles2(getStyles);\n\n  const [updating, setUpdating] = useState(false);\n\n  const { currentData: result } = useAlertmanagerConfig(selectedAlertmanager);\n  const config = result?.alertmanager_config;\n\n  const fromIntervals = Boolean(fromTimeIntervals);\n  const muteTiming = fromIntervals ? fromTimeIntervals : fromMuteTimings;\n\n  const originalMuteTimings = config?.mute_time_intervals ?? [];\n  const originalTimeIntervals = config?.time_intervals ?? [];\n\n  const defaultValues = useDefaultValues(muteTiming);\n  const formApi = useForm({ defaultValues });\n\n  const onSubmit = (values: MuteTimingFields) => {\n    if (!result) {\n      return;\n    }\n\n    const newMuteTiming = createMuteTiming(values);\n\n    const isGrafanaDataSource = selectedAlertmanager === GRAFANA_RULES_SOURCE_NAME;\n    const isNewMuteTiming = fromTimeIntervals === undefined && fromMuteTimings === undefined;\n\n    // If is Grafana data source, we wil save mute timings in the alertmanager_config.mute_time_intervals\n    // Otherwise, we will save it on alertmanager_config.time_intervals or alertmanager_config.mute_time_intervals depending on the original config\n\n    const newMutetimeIntervals = isGrafanaDataSource\n      ? {\n          // for Grafana data source, we will save mute timings in the alertmanager_config.mute_time_intervals\n          mute_time_intervals: [\n            ...replaceMuteTiming(originalTimeIntervals, fromTimeIntervals, newMuteTiming, false),\n            ...replaceMuteTiming(originalMuteTimings, fromMuteTimings, newMuteTiming, true),\n          ],\n        }\n      : {\n          // for non-Grafana data source, we will save mute timings in the alertmanager_config.time_intervals or alertmanager_config.mute_time_intervals depending on the original config\n          time_intervals: replaceMuteTiming(\n            originalTimeIntervals,\n            fromTimeIntervals,\n            newMuteTiming,\n            Boolean(fromTimeIntervals) || isNewMuteTiming\n          ),\n          mute_time_intervals:\n            Boolean(fromMuteTimings) && !isNewMuteTiming\n              ? replaceMuteTiming(originalMuteTimings, fromMuteTimings, newMuteTiming, true)\n              : undefined,\n        };\n\n    const { mute_time_intervals: _, time_intervals: __, ...configWithoutMuteTimings } = config ?? {};\n    const newConfig: AlertManagerCortexConfig = {\n      ...result,\n      alertmanager_config: {\n        ...configWithoutMuteTimings,\n        route:\n          muteTiming && newMuteTiming.name !== muteTiming.name\n            ? renameMuteTimings(newMuteTiming.name, muteTiming.name, config?.route ?? {})\n            : config?.route,\n        ...newMutetimeIntervals,\n      },\n    };\n\n    const saveAction = dispatch(\n      updateAlertManagerConfigAction({\n        newConfig,\n        oldConfig: result,\n        alertManagerSourceName: selectedAlertmanager!,\n        successMessage: 'Mute timing saved',\n        redirectPath: '/alerting/routes/',\n        redirectSearch: 'tab=mute_timings',\n      })\n    );\n\n    setUpdating(true);\n\n    saveAction.unwrap().finally(() => {\n      setUpdating(false);\n    });\n  };\n\n  return (\n    <>\n      {provenance && <ProvisioningAlert resource={ProvisionedResource.MuteTiming} />}\n      {loading && <LoadingPlaceholder text=\"Loading mute timing\" />}\n      {showError && <Alert title=\"No matching mute timing found\" />}\n      {result && !loading && !showError && (\n        <FormProvider {...formApi}>\n          <form onSubmit={formApi.handleSubmit(onSubmit)} data-testid=\"mute-timing-form\">\n            <FieldSet label={'Create mute timing'} disabled={Boolean(provenance) || updating}>\n              <Field\n                required\n                label=\"Name\"\n                description=\"A unique name for the mute timing\"\n                invalid={!!formApi.formState.errors?.name}\n                error={formApi.formState.errors.name?.message}\n              >\n                <Input\n                  {...formApi.register('name', {\n                    required: true,\n                    validate: (value) =>\n                      validateMuteTiming(value, muteTiming, originalMuteTimings, originalTimeIntervals),\n                  })}\n                  className={styles.input}\n                  data-testid={'mute-timing-name'}\n                />\n              </Field>\n              <MuteTimingTimeInterval />\n              <Button type=\"submit\" className={styles.submitButton} disabled={updating}>\n                Save mute timing\n              </Button>\n              <LinkButton\n                type=\"button\"\n                variant=\"secondary\"\n                fill=\"outline\"\n                href={makeAMLink('/alerting/routes/', selectedAlertmanager, { tab: 'mute_timings' })}\n                disabled={updating}\n              >\n                Cancel\n              </LinkButton>\n            </FieldSet>\n          </form>\n        </FormProvider>\n      )}\n    </>\n  );\n};\n\nfunction validateMuteTiming(\n  value: string,\n  muteTiming: MuteTimeInterval | undefined,\n  originalMuteTimings: MuteTimeInterval[],\n  originalTimeIntervals: MuteTimeInterval[]\n) {\n  if (!muteTiming) {\n    const existingMuteTimingInMuteTimings = originalMuteTimings?.find(({ name }) => value === name);\n    const existingMuteTimingInTimeIntervals = originalTimeIntervals?.find(({ name }) => value === name);\n    return existingMuteTimingInMuteTimings || existingMuteTimingInTimeIntervals\n      ? `Mute timing already exists for \"${value}\"`\n      : true;\n  }\n  return;\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  input: css`\n    width: 400px;\n  `,\n  submitButton: css`\n    margin-right: ${theme.spacing(1)};\n  `,\n});\n\nexport default MuteTimingForm;\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { Redirect, Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport { NavModelItem } from '@grafana/data';\nimport { Alert } from '@grafana/ui';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\nimport { MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport { AlertmanagerPageWrapper } from './components/AlertingPageWrapper';\nimport MuteTimingForm from './components/mute-timings/MuteTimingForm';\nimport { useAlertmanagerConfig } from './hooks/useAlertmanagerConfig';\nimport { useAlertmanager } from './state/AlertmanagerContext';\n\nconst MuteTimings = () => {\n  const [queryParams] = useQueryParams();\n  const { selectedAlertmanager } = useAlertmanager();\n  const { currentData, isLoading, error } = useAlertmanagerConfig(selectedAlertmanager, {\n    refetchOnFocus: true,\n    refetchOnReconnect: true,\n  });\n  const config = currentData?.alertmanager_config;\n\n  const getMuteTimingByName = useCallback(\n    (id: string, fromTimeIntervals: boolean): MuteTimeInterval | undefined => {\n      const time_intervals = fromTimeIntervals ? config?.time_intervals ?? [] : config?.mute_time_intervals ?? [];\n      const timing = time_intervals.find(({ name }: MuteTimeInterval) => name === id);\n\n      if (timing) {\n        const provenance = config?.muteTimeProvenances?.[timing.name];\n\n        return {\n          ...timing,\n          provenance,\n        };\n      }\n\n      return timing;\n    },\n    [config]\n  );\n\n  return (\n    <>\n      {error && !isLoading && !currentData && (\n        <Alert severity=\"error\" title={`Error loading Alertmanager config for ${selectedAlertmanager}`}>\n          {error.message || 'Unknown error.'}\n        </Alert>\n      )}\n      {currentData && !error && (\n        <Switch>\n          <Route exact path=\"/alerting/routes/mute-timing/new\">\n            <MuteTimingForm loading={isLoading} />\n          </Route>\n          <Route exact path=\"/alerting/routes/mute-timing/edit\">\n            {() => {\n              if (queryParams['muteName']) {\n                const muteTimingInMuteTimings = getMuteTimingByName(String(queryParams['muteName']), false);\n                const muteTimingInTimeIntervals = getMuteTimingByName(String(queryParams['muteName']), true);\n                const inTimeIntervals = Boolean(muteTimingInTimeIntervals);\n                const muteTiming = inTimeIntervals ? muteTimingInTimeIntervals : muteTimingInMuteTimings;\n                const provenance = muteTiming?.provenance;\n\n                return (\n                  <MuteTimingForm\n                    loading={isLoading}\n                    fromLegacyTimeInterval={muteTimingInMuteTimings}\n                    fromTimeIntervals={muteTimingInTimeIntervals}\n                    showError={!muteTiming && !isLoading}\n                    provenance={provenance}\n                  />\n                );\n              }\n              return <Redirect to=\"/alerting/routes\" />;\n            }}\n          </Route>\n        </Switch>\n      )}\n    </>\n  );\n};\n\nconst MuteTimingsPage = () => {\n  const pageNav = useMuteTimingNavData();\n\n  return (\n    <AlertmanagerPageWrapper navId=\"am-routes\" pageNav={pageNav} accessType=\"notification\">\n      <MuteTimings />\n    </AlertmanagerPageWrapper>\n  );\n};\n\nexport function useMuteTimingNavData() {\n  const { isExact, path } = useRouteMatch();\n  const [pageNav, setPageNav] = useState<Pick<NavModelItem, 'id' | 'text' | 'icon'> | undefined>();\n\n  useEffect(() => {\n    if (path === '/alerting/routes/mute-timing/new') {\n      setPageNav({\n        id: 'alert-policy-new',\n        text: 'Add mute timing',\n      });\n    } else if (path === '/alerting/routes/mute-timing/edit') {\n      setPageNav({\n        id: 'alert-policy-edit',\n        text: 'Edit mute timing',\n      });\n    }\n  }, [path, isExact]);\n\n  return pageNav;\n}\n\nexport default MuteTimingsPage;\n","import React, { forwardRef, Ref } from 'react';\n\ninterface ConditionalWrapProps {\n  shouldWrap: boolean;\n  children: JSX.Element;\n  wrap: (children: JSX.Element) => JSX.Element;\n}\n\nfunction ConditionalWrap({ children, shouldWrap, wrap }: ConditionalWrapProps, _ref: Ref<HTMLElement>) {\n  return shouldWrap ? React.cloneElement(wrap(children)) : children;\n}\n\nexport default forwardRef(ConditionalWrap);\n","import moment from 'moment';\nimport React from 'react';\n\nimport { AlertmanagerConfig, MuteTimeInterval } from 'app/plugins/datasource/alertmanager/types';\n\nimport {\n  getDaysOfMonthString,\n  getMonthsString,\n  getTimeString,\n  getWeekdayString,\n  getYearsString,\n} from '../../utils/alertmanager';\n\n// https://github.com/prometheus/alertmanager/blob/9de8ef36755298a68b6ab20244d4369d38bdea99/timeinterval/timeinterval.go#L443\nconst TIME_RANGE_REGEX = /^((([01][0-9])|(2[0-3])):[0-5][0-9])$|(^24:00$)/;\n\nconst isvalidTimeFormat = (timeString: string): boolean => {\n  return timeString ? TIME_RANGE_REGEX.test(timeString) : true;\n};\n\n// merge both fields mute_time_intervals and time_intervals to support both old and new config\nexport const mergeTimeIntervals = (alertManagerConfig: AlertmanagerConfig) => {\n  return [...(alertManagerConfig.mute_time_intervals ?? []), ...(alertManagerConfig.time_intervals ?? [])];\n};\n\n// Usage\nconst isValidStartAndEndTime = (startTime?: string, endTime?: string): boolean => {\n  // empty time range is perfactly valid for a mute timing\n  if (!startTime && !endTime) {\n    return true;\n  }\n\n  if ((!startTime && endTime) || (startTime && !endTime)) {\n    return false;\n  }\n\n  const timeUnit = 'HH:mm';\n  // @ts-ignore typescript types here incorrect, sigh\n  const startDate = moment().startOf('day').add(startTime, timeUnit);\n  // @ts-ignore typescript types here incorrect, sigh\n  const endDate = moment().startOf('day').add(endTime, timeUnit);\n\n  if (startTime && endTime && startDate.isBefore(endDate)) {\n    return true;\n  }\n\n  if (startTime && endTime && endDate.isAfter(startDate)) {\n    return true;\n  }\n\n  return false;\n};\n\nfunction renderTimeIntervals(muteTiming: MuteTimeInterval) {\n  const timeIntervals = muteTiming.time_intervals;\n\n  return timeIntervals.map((interval, index) => {\n    const { times, weekdays, days_of_month, months, years, location } = interval;\n    const timeString = getTimeString(times, location);\n    const weekdayString = getWeekdayString(weekdays);\n    const daysString = getDaysOfMonthString(days_of_month);\n    const monthsString = getMonthsString(months);\n    const yearsString = getYearsString(years);\n\n    return (\n      <React.Fragment key={JSON.stringify(interval) + index}>\n        {`${timeString} ${weekdayString}`}\n        <br />\n        {[daysString, monthsString, yearsString].join(' | ')}\n        <br />\n      </React.Fragment>\n    );\n  });\n}\n\nexport { isValidStartAndEndTime, isvalidTimeFormat, renderTimeIntervals };\n","import { SerializedError } from '@reduxjs/toolkit';\n\nimport { alertmanagerApi } from '../api/alertmanagerApi';\n\ntype Options = {\n  refetchOnFocus: boolean;\n  refetchOnReconnect: boolean;\n};\n\n// TODO refactor this so we can just call \"alertmanagerApi.endpoints.getAlertmanagerConfiguration\" everywhere\n// and remove this hook since it adds little value\nexport function useAlertmanagerConfig(amSourceName?: string, options?: Options) {\n  const fetchConfig = alertmanagerApi.endpoints.getAlertmanagerConfiguration.useQuery(amSourceName ?? '', {\n    ...options,\n    skip: !amSourceName,\n  });\n\n  return {\n    ...fetchConfig,\n    // TODO refactor to get rid of this type assertion\n    error: fetchConfig.error as SerializedError,\n  };\n}\n","import { isUndefined, omitBy } from 'lodash';\n\nimport { MuteTimeInterval, TimeInterval, TimeRange } from 'app/plugins/datasource/alertmanager/types';\n\nimport { MuteTimingFields, MuteTimingIntervalFields } from '../types/mute-timing-form';\n\nexport const DAYS_OF_THE_WEEK = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'];\n\nexport const MONTHS = [\n  'january',\n  'february',\n  'march',\n  'april',\n  'may',\n  'june',\n  'july',\n  'august',\n  'september',\n  'october',\n  'november',\n  'december',\n];\n\nexport const defaultTimeInterval: MuteTimingIntervalFields = {\n  times: [{ start_time: '', end_time: '' }],\n  weekdays: '',\n  days_of_month: '',\n  months: '',\n  years: '',\n  location: '',\n  disable: false,\n};\n\nexport const validateArrayField = (\n  value: string | undefined,\n  validateValue: (input: string) => boolean,\n  invalidText: string\n) => {\n  if (value) {\n    return (\n      value\n        .split(',')\n        .map((x) => x.trim())\n        .every((entry) => entry.split(':').every(validateValue)) || invalidText\n    );\n  } else {\n    return true;\n  }\n};\n\nconst convertStringToArray = (str?: string) => {\n  return str ? str.split(',').map((s) => s.trim()) : undefined;\n};\n\nexport const createMuteTiming = (fields: MuteTimingFields): MuteTimeInterval => {\n  const timeIntervals: TimeInterval[] = fields.time_intervals.map(\n    ({ times, weekdays, days_of_month, months, years, location, disable }) => {\n      const interval = {\n        times: convertTimesToDto(times, disable),\n        weekdays: convertStringToArray(weekdays)?.map((v) => v.toLowerCase()),\n        days_of_month: convertStringToArray(days_of_month),\n        months: convertStringToArray(months),\n        years: convertStringToArray(years),\n        location: location ? location : undefined,\n      };\n\n      return omitBy(interval, isUndefined);\n    }\n  );\n\n  return {\n    name: fields.name,\n    time_intervals: timeIntervals,\n  };\n};\n\n/*\n * Convert times from form to dto, if disable is true, then return an empty array as times\n If the times array is empty and disable is false, then return undefined\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\nfunction convertTimesToDto(times: TimeRange[] | undefined, disable: boolean) {\n  if (disable) {\n    return [];\n  }\n  const timesToReturn = times?.filter(({ start_time, end_time }) => !!start_time && !!end_time);\n  return timesToReturn?.length ? timesToReturn : undefined;\n}\n\n/*\n * Get disable field from dto, if any of the lists is an empty array, then the disable field is true\n * @param muteTimeInterval\n * @returns MuteTimingFields\n *\n */\n\nexport function isTimeIntervalDisabled(intervals: TimeInterval): boolean {\n  if (\n    intervals.times?.length === 0 ||\n    intervals.weekdays?.length === 0 ||\n    intervals.days_of_month?.length === 0 ||\n    intervals.months?.length === 0 ||\n    intervals.years?.length === 0\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/*\n   Return true if all the time intervals are disabled\n  * @param muteTimeInterval\n  * @returns MuteTimingFields\n  * */\nexport function isDisabled(muteTiming: MuteTimeInterval) {\n  return muteTiming.time_intervals.every((timeInterval) => isTimeIntervalDisabled(timeInterval));\n}\n"],"names":["INVALID_FORMAT_MESSAGE","MuteTimingTimeRange","intervalIndex","styles","getStyles","register","formState","getValues","watch","isDisabled","timeRanges","addTimeRange","removeTimeRange","formErrors","timeRangeInvalid","value","Field","timeRange","index","timeRangeErrors","startTimeKey","endTimeKey","getStartAndEndTime","startTime","endTime","InlineFieldRow","InlineField","Input","input","Icon","IconButton","e","ConditionalWrap","children","Tooltip","Button","theme","TIMEZONES","TimezoneSelect","options","timezoneOptions","tz","Select","MuteTimingTimeInterval","setValue","timeIntervals","addTimeInterval","removeTimeInterval","isGrafanaAlertmanager","FieldSet","Stack","timeInterval","timeIntervalIndex","errors","selectedTimezone","DaysOfTheWeek","daysOfWeek","day","parsedDay","month","year","parseDays","parsedDays","parseWeekdayRange","start","end","startIndex","endIndex","defaultValue","onChange","defaultValues","selectedDays","setSelectedDays","toggleDay","style","abbreviated","useDefaultValues","muteTiming","intervals","interval","replaceMuteTiming","originalTimings","existingTiming","newTiming","addNew","originalTimingsWithoutNew","name","MuteTimingForm","fromMuteTimings","fromTimeIntervals","showError","loading","provenance","dispatch","selectedAlertmanager","updating","setUpdating","result","useAlertmanagerConfig","config","originalMuteTimings","originalTimeIntervals","formApi","onSubmit","values","newMuteTiming","isGrafanaDataSource","isNewMuteTiming","newMutetimeIntervals","_","__","configWithoutMuteTimings","newConfig","saveAction","Provisioning","LoadingPlaceholder","Alert","validateMuteTiming","existingMuteTimingInMuteTimings","existingMuteTimingInTimeIntervals","MuteTimings","queryParams","useQueryParams","currentData","isLoading","error","getMuteTimingByName","id","timing","muteTimingInMuteTimings","muteTimingInTimeIntervals","MuteTimingsPage","pageNav","useMuteTimingNavData","isExact","path","setPageNav","shouldWrap","wrap","_ref","TIME_RANGE_REGEX","isvalidTimeFormat","timeString","mergeTimeIntervals","alertManagerConfig","isValidStartAndEndTime","timeUnit","startDate","endDate","renderTimeIntervals","times","weekdays","days_of_month","months","years","location","weekdayString","daysString","monthsString","yearsString","amSourceName","fetchConfig","DAYS_OF_THE_WEEK","MONTHS","defaultTimeInterval","validateArrayField","validateValue","invalidText","x","entry","convertStringToArray","str","s","createMuteTiming","fields","disable","convertTimesToDto","v","timesToReturn","start_time","end_time","isTimeIntervalDisabled"],"sourceRoot":""}